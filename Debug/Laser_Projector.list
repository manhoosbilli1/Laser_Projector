
Laser_Projector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e40  08004e40  00005e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e78  08004e78  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e78  08004e78  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e78  08004e78  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e78  08004e78  00005e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e7c  08004e7c  00005e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004e80  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000554  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000560  20000560  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f2d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000278b  00000000  00000000  0001bf69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  0001e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f09  00000000  00000000  0001fa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e48d  00000000  00000000  00020909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d50  00000000  00000000  0003ed96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9f1b  00000000  00000000  00056ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110a01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005248  00000000  00000000  00110a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00115c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e28 	.word	0x08004e28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e28 	.word	0x08004e28

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fdb3 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f837 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fabd 	bl	8000754 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001da:	f000 f899 	bl	8000310 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001de:	f000 f8d7 	bl	8000390 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e2:	f000 fa95 	bl	8000710 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80001e6:	f000 f9e1 	bl	80005ac <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001ea:	f000 fa31 	bl	8000650 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80001ee:	f000 f90d 	bl	800040c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80001f2:	f000 fa5d 	bl	80006b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 10;
 80001f6:	4b11      	ldr	r3, [pc, #68]	@ (800023c <main+0x74>)
 80001f8:	220a      	movs	r2, #10
 80001fa:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 80;
 80001fc:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <main+0x74>)
 80001fe:	2250      	movs	r2, #80	@ 0x50
 8000200:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR4 = 80;
 8000202:	4b0e      	ldr	r3, [pc, #56]	@ (800023c <main+0x74>)
 8000204:	2250      	movs	r2, #80	@ 0x50
 8000206:	641a      	str	r2, [r3, #64]	@ 0x40
  uint8_t MSG[35] = {'\0'};
 8000208:	2300      	movs	r3, #0
 800020a:	607b      	str	r3, [r7, #4]
 800020c:	f107 0308 	add.w	r3, r7, #8
 8000210:	221f      	movs	r2, #31
 8000212:	2100      	movs	r1, #0
 8000214:	4618      	mov	r0, r3
 8000216:	f004 fddb 	bl	8004dd0 <memset>
  uint8_t X = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000220:	2100      	movs	r1, #0
 8000222:	4807      	ldr	r0, [pc, #28]	@ (8000240 <main+0x78>)
 8000224:	f002 fffe 	bl	8003224 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000228:	2104      	movs	r1, #4
 800022a:	4805      	ldr	r0, [pc, #20]	@ (8000240 <main+0x78>)
 800022c:	f002 fffa 	bl	8003224 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000230:	210c      	movs	r1, #12
 8000232:	4803      	ldr	r0, [pc, #12]	@ (8000240 <main+0x78>)
 8000234:	f002 fff6 	bl	8003224 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	bf00      	nop
 800023a:	e7fd      	b.n	8000238 <main+0x70>
 800023c:	40012c00 	.word	0x40012c00
 8000240:	200000e0 	.word	0x200000e0

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b09e      	sub	sp, #120	@ 0x78
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800024e:	2228      	movs	r2, #40	@ 0x28
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f004 fdbc 	bl	8004dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	605a      	str	r2, [r3, #4]
 8000262:	609a      	str	r2, [r3, #8]
 8000264:	60da      	str	r2, [r3, #12]
 8000266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000268:	463b      	mov	r3, r7
 800026a:	223c      	movs	r2, #60	@ 0x3c
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f004 fdae 	bl	8004dd0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000274:	2303      	movs	r3, #3
 8000276:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000278:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800027c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000282:	2301      	movs	r3, #1
 8000284:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000286:	2310      	movs	r3, #16
 8000288:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800028e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000292:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000294:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000298:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fa4e 	bl	8001740 <HAL_RCC_OscConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002aa:	f000 fad1 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ae:	230f      	movs	r3, #15
 80002b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b2:	2302      	movs	r3, #2
 80002b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fa76 	bl	80027bc <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002d6:	f000 fabb 	bl	8000850 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80002da:	4b0c      	ldr	r3, [pc, #48]	@ (800030c <SystemClock_Config+0xc8>)
 80002dc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002de:	2300      	movs	r3, #0
 80002e0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ea:	2300      	movs	r3, #0
 80002ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002ee:	2300      	movs	r3, #0
 80002f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f2:	463b      	mov	r3, r7
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 fc81 	bl	8002bfc <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000300:	f000 faa6 	bl	8000850 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3778      	adds	r7, #120	@ 0x78
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	00021023 	.word	0x00021023

08000310 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000314:	4b1b      	ldr	r3, [pc, #108]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000316:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <MX_I2C1_Init+0x78>)
 8000318:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800031a:	4b1a      	ldr	r3, [pc, #104]	@ (8000384 <MX_I2C1_Init+0x74>)
 800031c:	4a1b      	ldr	r2, [pc, #108]	@ (800038c <MX_I2C1_Init+0x7c>)
 800031e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000326:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000328:	2201      	movs	r2, #1
 800032a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <MX_I2C1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000332:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000338:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033e:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800034a:	480e      	ldr	r0, [pc, #56]	@ (8000384 <MX_I2C1_Init+0x74>)
 800034c:	f000 fffe 	bl	800134c <HAL_I2C_Init>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000356:	f000 fa7b 	bl	8000850 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035a:	2100      	movs	r1, #0
 800035c:	4809      	ldr	r0, [pc, #36]	@ (8000384 <MX_I2C1_Init+0x74>)
 800035e:	f001 f890 	bl	8001482 <HAL_I2CEx_ConfigAnalogFilter>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000368:	f000 fa72 	bl	8000850 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800036c:	2100      	movs	r1, #0
 800036e:	4805      	ldr	r0, [pc, #20]	@ (8000384 <MX_I2C1_Init+0x74>)
 8000370:	f001 f8d2 	bl	8001518 <HAL_I2CEx_ConfigDigitalFilter>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800037a:	f000 fa69 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000028 	.word	0x20000028
 8000388:	40005400 	.word	0x40005400
 800038c:	2000090e 	.word	0x2000090e

08000390 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000394:	4b1b      	ldr	r3, [pc, #108]	@ (8000404 <MX_SPI1_Init+0x74>)
 8000396:	4a1c      	ldr	r2, [pc, #112]	@ (8000408 <MX_SPI1_Init+0x78>)
 8000398:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800039a:	4b1a      	ldr	r3, [pc, #104]	@ (8000404 <MX_SPI1_Init+0x74>)
 800039c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003a2:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003a8:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003aa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003bc:	4b11      	ldr	r3, [pc, #68]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003c6:	2208      	movs	r2, #8
 80003c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003d8:	2200      	movs	r2, #0
 80003da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003dc:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003de:	2207      	movs	r2, #7
 80003e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003ea:	2208      	movs	r2, #8
 80003ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	@ (8000404 <MX_SPI1_Init+0x74>)
 80003f0:	f002 fdb4 	bl	8002f5c <HAL_SPI_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003fa:	f000 fa29 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	2000007c 	.word	0x2000007c
 8000408:	40013000 	.word	0x40013000

0800040c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b09a      	sub	sp, #104	@ 0x68
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000412:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000420:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800042c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
 800043a:	611a      	str	r2, [r3, #16]
 800043c:	615a      	str	r2, [r3, #20]
 800043e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	222c      	movs	r2, #44	@ 0x2c
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f004 fcc2 	bl	8004dd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800044c:	4b55      	ldr	r3, [pc, #340]	@ (80005a4 <MX_TIM1_Init+0x198>)
 800044e:	4a56      	ldr	r2, [pc, #344]	@ (80005a8 <MX_TIM1_Init+0x19c>)
 8000450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000452:	4b54      	ldr	r3, [pc, #336]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000454:	2247      	movs	r2, #71	@ 0x47
 8000456:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000458:	4b52      	ldr	r3, [pc, #328]	@ (80005a4 <MX_TIM1_Init+0x198>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800045e:	4b51      	ldr	r3, [pc, #324]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000460:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000464:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000466:	4b4f      	ldr	r3, [pc, #316]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000468:	2200      	movs	r2, #0
 800046a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800046c:	4b4d      	ldr	r3, [pc, #308]	@ (80005a4 <MX_TIM1_Init+0x198>)
 800046e:	2200      	movs	r2, #0
 8000470:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000472:	4b4c      	ldr	r3, [pc, #304]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000478:	484a      	ldr	r0, [pc, #296]	@ (80005a4 <MX_TIM1_Init+0x198>)
 800047a:	f002 fe1a 	bl	80030b2 <HAL_TIM_Base_Init>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000484:	f000 f9e4 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000488:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800048c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800048e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000492:	4619      	mov	r1, r3
 8000494:	4843      	ldr	r0, [pc, #268]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000496:	f003 f9db 	bl	8003850 <HAL_TIM_ConfigClockSource>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004a0:	f000 f9d6 	bl	8000850 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004a4:	483f      	ldr	r0, [pc, #252]	@ (80005a4 <MX_TIM1_Init+0x198>)
 80004a6:	f002 fe5b 	bl	8003160 <HAL_TIM_PWM_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80004b0:	f000 f9ce 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004b4:	2300      	movs	r3, #0
 80004b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004b8:	2300      	movs	r3, #0
 80004ba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80004c4:	4619      	mov	r1, r3
 80004c6:	4837      	ldr	r0, [pc, #220]	@ (80005a4 <MX_TIM1_Init+0x198>)
 80004c8:	f003 fef0 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80004d2:	f000 f9bd 	bl	8000850 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004d6:	2360      	movs	r3, #96	@ 0x60
 80004d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004de:	2300      	movs	r3, #0
 80004e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004e2:	2300      	movs	r3, #0
 80004e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004ea:	2300      	movs	r3, #0
 80004ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004ee:	2300      	movs	r3, #0
 80004f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004f6:	2200      	movs	r2, #0
 80004f8:	4619      	mov	r1, r3
 80004fa:	482a      	ldr	r0, [pc, #168]	@ (80005a4 <MX_TIM1_Init+0x198>)
 80004fc:	f003 f894 	bl	8003628 <HAL_TIM_PWM_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000506:	f000 f9a3 	bl	8000850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800050a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800050e:	2204      	movs	r2, #4
 8000510:	4619      	mov	r1, r3
 8000512:	4824      	ldr	r0, [pc, #144]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000514:	f003 f888 	bl	8003628 <HAL_TIM_PWM_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800051e:	f000 f997 	bl	8000850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000522:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000526:	2208      	movs	r2, #8
 8000528:	4619      	mov	r1, r3
 800052a:	481e      	ldr	r0, [pc, #120]	@ (80005a4 <MX_TIM1_Init+0x198>)
 800052c:	f003 f87c 	bl	8003628 <HAL_TIM_PWM_ConfigChannel>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000536:	f000 f98b 	bl	8000850 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800053a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800053e:	220c      	movs	r2, #12
 8000540:	4619      	mov	r1, r3
 8000542:	4818      	ldr	r0, [pc, #96]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000544:	f003 f870 	bl	8003628 <HAL_TIM_PWM_ConfigChannel>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800054e:	f000 f97f 	bl	8000850 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000556:	2300      	movs	r3, #0
 8000558:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000566:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800056a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000574:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4619      	mov	r1, r3
 8000586:	4807      	ldr	r0, [pc, #28]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000588:	f003 ff10 	bl	80043ac <HAL_TIMEx_ConfigBreakDeadTime>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000592:	f000 f95d 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000596:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <MX_TIM1_Init+0x198>)
 8000598:	f000 fa68 	bl	8000a6c <HAL_TIM_MspPostInit>

}
 800059c:	bf00      	nop
 800059e:	3768      	adds	r7, #104	@ 0x68
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000e0 	.word	0x200000e0
 80005a8:	40012c00 	.word	0x40012c00

080005ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_TIM2_Init+0xa0>)
 80005cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_TIM2_Init+0xa0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <MX_TIM2_Init+0xa0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 80005de:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_TIM2_Init+0xa0>)
 80005e0:	2214      	movs	r2, #20
 80005e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <MX_TIM2_Init+0xa0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_TIM2_Init+0xa0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005f0:	4816      	ldr	r0, [pc, #88]	@ (800064c <MX_TIM2_Init+0xa0>)
 80005f2:	f002 fd5e 	bl	80030b2 <HAL_TIM_Base_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80005fc:	f000 f928 	bl	8000850 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000600:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000604:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 15;
 800060e:	230f      	movs	r3, #15
 8000610:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <MX_TIM2_Init+0xa0>)
 800061a:	f003 f919 	bl	8003850 <HAL_TIM_ConfigClockSource>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000624:	f000 f914 	bl	8000850 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_TIM2_Init+0xa0>)
 8000636:	f003 fe39 	bl	80042ac <HAL_TIMEx_MasterConfigSynchronization>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000640:	f000 f906 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000012c 	.word	0x2000012c

08000650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 8000656:	4a15      	ldr	r2, [pc, #84]	@ (80006ac <MX_USART1_UART_Init+0x5c>)
 8000658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 800065c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000686:	4b08      	ldr	r3, [pc, #32]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000692:	4805      	ldr	r0, [pc, #20]	@ (80006a8 <MX_USART1_UART_Init+0x58>)
 8000694:	f003 ff26 	bl	80044e4 <HAL_UART_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800069e:	f000 f8d7 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000178 	.word	0x20000178
 80006ac:	40013800 	.word	0x40013800

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	@ (800070c <MX_USART2_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006bc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_USART2_UART_Init+0x58>)
 80006f4:	f003 fef6 	bl	80044e4 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f8a7 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000200 	.word	0x20000200
 800070c:	40004400 	.word	0x40004400

08000710 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_USB_PCD_Init+0x3c>)
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <MX_USB_PCD_Init+0x40>)
 8000718:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USB_PCD_Init+0x3c>)
 800071c:	2208      	movs	r2, #8
 800071e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_USB_PCD_Init+0x3c>)
 8000722:	2202      	movs	r2, #2
 8000724:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USB_PCD_Init+0x3c>)
 8000728:	2202      	movs	r2, #2
 800072a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_USB_PCD_Init+0x3c>)
 800072e:	2200      	movs	r2, #0
 8000730:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USB_PCD_Init+0x3c>)
 8000734:	2200      	movs	r2, #0
 8000736:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_USB_PCD_Init+0x3c>)
 800073a:	f000 ff39 	bl	80015b0 <HAL_PCD_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000744:	f000 f884 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000288 	.word	0x20000288
 8000750:	40005c00 	.word	0x40005c00

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	4b37      	ldr	r3, [pc, #220]	@ (8000848 <MX_GPIO_Init+0xf4>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a36      	ldr	r2, [pc, #216]	@ (8000848 <MX_GPIO_Init+0xf4>)
 8000770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b34      	ldr	r3, [pc, #208]	@ (8000848 <MX_GPIO_Init+0xf4>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <MX_GPIO_Init+0xf4>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4a30      	ldr	r2, [pc, #192]	@ (8000848 <MX_GPIO_Init+0xf4>)
 8000788:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800078c:	6153      	str	r3, [r2, #20]
 800078e:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <MX_GPIO_Init+0xf4>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800079a:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <MX_GPIO_Init+0xf4>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a2a      	ldr	r2, [pc, #168]	@ (8000848 <MX_GPIO_Init+0xf4>)
 80007a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007a4:	6153      	str	r3, [r2, #20]
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <MX_GPIO_Init+0xf4>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <MX_GPIO_Init+0xf4>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	4a24      	ldr	r2, [pc, #144]	@ (8000848 <MX_GPIO_Init+0xf4>)
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007bc:	6153      	str	r3, [r2, #20]
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <MX_GPIO_Init+0xf4>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <MX_GPIO_Init+0xf4>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000848 <MX_GPIO_Init+0xf4>)
 80007d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007d4:	6153      	str	r3, [r2, #20]
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_GPIO_Init+0xf4>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD5_Pin|LD9_Pin
 80007e2:	2200      	movs	r2, #0
 80007e4:	f249 5108 	movw	r1, #38152	@ 0x9508
 80007e8:	4818      	ldr	r0, [pc, #96]	@ (800084c <MX_GPIO_Init+0xf8>)
 80007ea:	f000 fd97 	bl	800131c <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80007ee:	2337      	movs	r3, #55	@ 0x37
 80007f0:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4812      	ldr	r0, [pc, #72]	@ (800084c <MX_GPIO_Init+0xf8>)
 8000804:	f000 fc10 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD5_Pin LD9_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD5_Pin|LD9_Pin
 8000808:	f249 5308 	movw	r3, #38152	@ 0x9508
 800080c:	617b      	str	r3, [r7, #20]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	480a      	ldr	r0, [pc, #40]	@ (800084c <MX_GPIO_Init+0xf8>)
 8000822:	f000 fc01 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000826:	2301      	movs	r3, #1
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4619      	mov	r1, r3
 8000838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083c:	f000 fbf4 	bl	8001028 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3728      	adds	r7, #40	@ 0x28
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000
 800084c:	48001000 	.word	0x48001000

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <Error_Handler+0x8>

0800085c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_MspInit+0x44>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <HAL_MspInit+0x44>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x44>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_MspInit+0x44>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000892:	2007      	movs	r0, #7
 8000894:	f000 fb86 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	@ 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a17      	ldr	r2, [pc, #92]	@ (8000920 <HAL_I2C_MspInit+0x7c>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d127      	bne.n	8000916 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <HAL_I2C_MspInit+0x80>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_I2C_MspInit+0x80>)
 80008cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d0:	6153      	str	r3, [r2, #20]
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_I2C_MspInit+0x80>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80008de:	23c0      	movs	r3, #192	@ 0xc0
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e2:	2312      	movs	r3, #18
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ee:	2304      	movs	r3, #4
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <HAL_I2C_MspInit+0x84>)
 80008fa:	f000 fb95 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_I2C_MspInit+0x80>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_I2C_MspInit+0x80>)
 8000904:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_I2C_MspInit+0x80>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40005400 	.word	0x40005400
 8000924:	40021000 	.word	0x40021000
 8000928:	48000400 	.word	0x48000400

0800092c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	@ 0x28
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <HAL_SPI_MspInit+0x7c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d128      	bne.n	80009a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <HAL_SPI_MspInit+0x80>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a16      	ldr	r2, [pc, #88]	@ (80009ac <HAL_SPI_MspInit+0x80>)
 8000954:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <HAL_SPI_MspInit+0x80>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <HAL_SPI_MspInit+0x80>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a10      	ldr	r2, [pc, #64]	@ (80009ac <HAL_SPI_MspInit+0x80>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_SPI_MspInit+0x80>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800097e:	23e0      	movs	r3, #224	@ 0xe0
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800098e:	2305      	movs	r3, #5
 8000990:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800099c:	f000 fb44 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	@ 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40013000 	.word	0x40013000
 80009ac:	40021000 	.word	0x40021000

080009b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a25      	ldr	r2, [pc, #148]	@ (8000a64 <HAL_TIM_Base_MspInit+0xb4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10c      	bne.n	80009ec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d2:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4a24      	ldr	r2, [pc, #144]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 80009d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009dc:	6193      	str	r3, [r2, #24]
 80009de:	4b22      	ldr	r3, [pc, #136]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ea:	e036      	b.n	8000a5a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009f4:	d131      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 80009f8:	69db      	ldr	r3, [r3, #28]
 80009fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	61d3      	str	r3, [r2, #28]
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	4a15      	ldr	r2, [pc, #84]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	6153      	str	r3, [r2, #20]
 8000a1a:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <HAL_TIM_Base_MspInit+0xb8>)
 8000a1c:	695b      	ldr	r3, [r3, #20]
 8000a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a46:	f000 faef 	bl	8001028 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	201c      	movs	r0, #28
 8000a50:	f000 fab3 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a54:	201c      	movs	r0, #28
 8000a56:	f000 facc 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40012c00 	.word	0x40012c00
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a11      	ldr	r2, [pc, #68]	@ (8000ad0 <HAL_TIM_MspPostInit+0x64>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d11c      	bne.n	8000ac8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a98:	6153      	str	r3, [r2, #20]
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a9c:	695b      	ldr	r3, [r3, #20]
 8000a9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000aa6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8000aaa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000ac4:	f000 fab0 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ac8:	bf00      	nop
 8000aca:	3720      	adds	r7, #32
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40012c00 	.word	0x40012c00
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	48001000 	.word	0x48001000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	@ 0x30
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a2e      	ldr	r2, [pc, #184]	@ (8000bb4 <HAL_UART_MspInit+0xd8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d128      	bne.n	8000b50 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	4b2e      	ldr	r3, [pc, #184]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a2d      	ldr	r2, [pc, #180]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a27      	ldr	r2, [pc, #156]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b2e:	2330      	movs	r3, #48	@ 0x30
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	481c      	ldr	r0, [pc, #112]	@ (8000bbc <HAL_UART_MspInit+0xe0>)
 8000b4a:	f000 fa6d 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4e:	e02d      	b.n	8000bac <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1a      	ldr	r2, [pc, #104]	@ (8000bc0 <HAL_UART_MspInit+0xe4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d128      	bne.n	8000bac <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b5c:	69db      	ldr	r3, [r3, #28]
 8000b5e:	4a16      	ldr	r2, [pc, #88]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b64:	61d3      	str	r3, [r2, #28]
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b68:	69db      	ldr	r3, [r3, #28]
 8000b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7c:	6153      	str	r3, [r2, #20]
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_UART_MspInit+0xdc>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f000 fa3e 	bl	8001028 <HAL_GPIO_Init>
}
 8000bac:	bf00      	nop
 8000bae:	3730      	adds	r7, #48	@ 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40013800 	.word	0x40013800
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000800 	.word	0x48000800
 8000bc0:	40004400 	.word	0x40004400

08000bc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a18      	ldr	r2, [pc, #96]	@ (8000c44 <HAL_PCD_MspInit+0x80>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d129      	bne.n	8000c3a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_PCD_MspInit+0x84>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a17      	ldr	r2, [pc, #92]	@ (8000c48 <HAL_PCD_MspInit+0x84>)
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf0:	6153      	str	r3, [r2, #20]
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_PCD_MspInit+0x84>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000bfe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000c10:	230e      	movs	r3, #14
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1e:	f000 fa03 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <HAL_PCD_MspInit+0x84>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_PCD_MspInit+0x84>)
 8000c28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_PCD_MspInit+0x84>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	@ 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40005c00 	.word	0x40005c00
 8000c48:	40021000 	.word	0x40021000

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 f88f 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <TIM2_IRQHandler+0x10>)
 8000cb2:	f002 fbb7 	bl	8003424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000012c 	.word	0x2000012c

08000cc0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <SystemInit+0x20>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <SystemInit+0x20>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d1c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce8:	f7ff ffea 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cec:	480c      	ldr	r0, [pc, #48]	@ (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cee:	490d      	ldr	r1, [pc, #52]	@ (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d04:	4c0a      	ldr	r4, [pc, #40]	@ (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d12:	f004 f865 	bl	8004de0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fa57 	bl	80001c8 <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d1c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d28:	08004e80 	.word	0x08004e80
  ldr r2, =_sbss
 8000d2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d30:	20000560 	.word	0x20000560

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <HAL_Init+0x28>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a07      	ldr	r2, [pc, #28]	@ (8000d60 <HAL_Init+0x28>)
 8000d42:	f043 0310 	orr.w	r3, r3, #16
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d48:	2003      	movs	r0, #3
 8000d4a:	f000 f92b 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f000 f808 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d54:	f7ff fd82 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f943 	bl	800100e <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000da0:	f000 f90b 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	@ (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	@ (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	2000055c 	.word	0x2000055c

08000dec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;  
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000055c 	.word	0x2000055c

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	@ (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	@ (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	@ 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	@ 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e154      	b.n	80012e2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8146 	beq.w	80012dc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d005      	beq.n	8001068 <HAL_GPIO_Init+0x40>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d130      	bne.n	80010ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f003 0201 	and.w	r2, r3, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d017      	beq.n	8001106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80a0 	beq.w	80012dc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	4b58      	ldr	r3, [pc, #352]	@ (8001300 <HAL_GPIO_Init+0x2d8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	4a57      	ldr	r2, [pc, #348]	@ (8001300 <HAL_GPIO_Init+0x2d8>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6193      	str	r3, [r2, #24]
 80011a8:	4b55      	ldr	r3, [pc, #340]	@ (8001300 <HAL_GPIO_Init+0x2d8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b4:	4a53      	ldr	r2, [pc, #332]	@ (8001304 <HAL_GPIO_Init+0x2dc>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011de:	d019      	beq.n	8001214 <HAL_GPIO_Init+0x1ec>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a49      	ldr	r2, [pc, #292]	@ (8001308 <HAL_GPIO_Init+0x2e0>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d013      	beq.n	8001210 <HAL_GPIO_Init+0x1e8>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a48      	ldr	r2, [pc, #288]	@ (800130c <HAL_GPIO_Init+0x2e4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d00d      	beq.n	800120c <HAL_GPIO_Init+0x1e4>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a47      	ldr	r2, [pc, #284]	@ (8001310 <HAL_GPIO_Init+0x2e8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d007      	beq.n	8001208 <HAL_GPIO_Init+0x1e0>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a46      	ldr	r2, [pc, #280]	@ (8001314 <HAL_GPIO_Init+0x2ec>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d101      	bne.n	8001204 <HAL_GPIO_Init+0x1dc>
 8001200:	2304      	movs	r3, #4
 8001202:	e008      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001204:	2305      	movs	r3, #5
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001208:	2303      	movs	r3, #3
 800120a:	e004      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 800120c:	2302      	movs	r3, #2
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001214:	2300      	movs	r3, #0
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001226:	4937      	ldr	r1, [pc, #220]	@ (8001304 <HAL_GPIO_Init+0x2dc>)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001234:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <HAL_GPIO_Init+0x2f0>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001258:	4a2f      	ldr	r2, [pc, #188]	@ (8001318 <HAL_GPIO_Init+0x2f0>)
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125e:	4b2e      	ldr	r3, [pc, #184]	@ (8001318 <HAL_GPIO_Init+0x2f0>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001282:	4a25      	ldr	r2, [pc, #148]	@ (8001318 <HAL_GPIO_Init+0x2f0>)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <HAL_GPIO_Init+0x2f0>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001318 <HAL_GPIO_Init+0x2f0>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b2:	4b19      	ldr	r3, [pc, #100]	@ (8001318 <HAL_GPIO_Init+0x2f0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012d6:	4a10      	ldr	r2, [pc, #64]	@ (8001318 <HAL_GPIO_Init+0x2f0>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f47f aea3 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 80012f2:	bf00      	nop
 80012f4:	bf00      	nop
 80012f6:	371c      	adds	r7, #28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	48000400 	.word	0x48000400
 800130c:	48000800 	.word	0x48000800
 8001310:	48000c00 	.word	0x48000c00
 8001314:	48001000 	.word	0x48001000
 8001318:	40010400 	.word	0x40010400

0800131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001332:	887a      	ldrh	r2, [r7, #2]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001338:	e002      	b.n	8001340 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e08d      	b.n	800147a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fa96 	bl	80008a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2224      	movs	r2, #36	@ 0x24
 800137c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0201 	bic.w	r2, r2, #1
 800138e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800139c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	e006      	b.n	80013d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80013d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d108      	bne.n	80013ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	e007      	b.n	80013fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800140c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001410:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001420:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691a      	ldr	r2, [r3, #16]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69d9      	ldr	r1, [r3, #28]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2220      	movs	r2, #32
 8001466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b20      	cmp	r3, #32
 8001496:	d138      	bne.n	800150a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d101      	bne.n	80014a6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e032      	b.n	800150c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2224      	movs	r2, #36	@ 0x24
 80014b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80014d4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f042 0201 	orr.w	r2, r2, #1
 80014f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2220      	movs	r2, #32
 80014fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800150a:	2302      	movs	r3, #2
  }
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b20      	cmp	r3, #32
 800152c:	d139      	bne.n	80015a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001538:	2302      	movs	r3, #2
 800153a:	e033      	b.n	80015a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800156a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2220      	movs	r2, #32
 8001592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80015a2:	2302      	movs	r3, #2
  }
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0b9      	b.n	8001736 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff faf4 	bl	8000bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fbb8 	bl	8004d5e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e03e      	b.n	8001672 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3311      	adds	r3, #17
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	440b      	add	r3, r1
 8001616:	3310      	adds	r3, #16
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	3313      	adds	r3, #19
 800162c:	2200      	movs	r2, #0
 800162e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	440b      	add	r3, r1
 800163e:	3320      	adds	r3, #32
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	440b      	add	r3, r1
 8001652:	3324      	adds	r3, #36	@ 0x24
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	1c5a      	adds	r2, r3, #1
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	440b      	add	r3, r1
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	3301      	adds	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	429a      	cmp	r2, r3
 800167a:	d3bb      	bcc.n	80015f4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]
 8001680:	e044      	b.n	800170c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016c4:	7bfa      	ldrb	r2, [r7, #15]
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	440b      	add	r3, r1
 80016d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	4613      	mov	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	440b      	add	r3, r1
 80016e8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	440b      	add	r3, r1
 80016fe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	3301      	adds	r3, #1
 800170a:	73fb      	strb	r3, [r7, #15]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	791b      	ldrb	r3, [r3, #4]
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3b5      	bcc.n	8001682 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3304      	adds	r3, #4
 800171e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001722:	f003 fb37 	bl	8004d94 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001746:	af00      	add	r7, sp, #0
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001750:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	f001 b823 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 817d 	beq.w	8001a76 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800177c:	4bbc      	ldr	r3, [pc, #752]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b04      	cmp	r3, #4
 8001786:	d00c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001788:	4bb9      	ldr	r3, [pc, #740]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d15c      	bne.n	800184e <HAL_RCC_OscConfig+0x10e>
 8001794:	4bb6      	ldr	r3, [pc, #728]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017a0:	d155      	bne.n	800184e <HAL_RCC_OscConfig+0x10e>
 80017a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017a6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80017ae:	fa93 f3a3 	rbit	r3, r3
 80017b2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ba:	fab3 f383 	clz	r3, r3
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d102      	bne.n	80017d4 <HAL_RCC_OscConfig+0x94>
 80017ce:	4ba8      	ldr	r3, [pc, #672]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	e015      	b.n	8001800 <HAL_RCC_OscConfig+0xc0>
 80017d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017d8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017ec:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80017f4:	fa93 f3a3 	rbit	r3, r3
 80017f8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017fc:	4b9c      	ldr	r3, [pc, #624]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001804:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001808:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800180c:	fa92 f2a2 	rbit	r2, r2
 8001810:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001814:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001818:	fab2 f282 	clz	r2, r2
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	f042 0220 	orr.w	r2, r2, #32
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	f002 021f 	and.w	r2, r2, #31
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 811f 	beq.w	8001a74 <HAL_RCC_OscConfig+0x334>
 8001836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 8116 	bne.w	8001a74 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	f000 bfaf 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001852:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x12e>
 8001860:	4b83      	ldr	r3, [pc, #524]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a82      	ldr	r2, [pc, #520]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e036      	b.n	80018dc <HAL_RCC_OscConfig+0x19c>
 800186e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001872:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10c      	bne.n	8001898 <HAL_RCC_OscConfig+0x158>
 800187e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7b      	ldr	r2, [pc, #492]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b79      	ldr	r3, [pc, #484]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a78      	ldr	r2, [pc, #480]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	e021      	b.n	80018dc <HAL_RCC_OscConfig+0x19c>
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x184>
 80018aa:	4b71      	ldr	r3, [pc, #452]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a70      	ldr	r2, [pc, #448]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6d      	ldr	r2, [pc, #436]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0x19c>
 80018c4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a69      	ldr	r2, [pc, #420]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b67      	ldr	r3, [pc, #412]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a66      	ldr	r2, [pc, #408]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018dc:	4b64      	ldr	r3, [pc, #400]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018e0:	f023 020f 	bic.w	r2, r3, #15
 80018e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	495f      	ldr	r1, [pc, #380]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d059      	beq.n	80019ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff fa71 	bl	8000dec <HAL_GetTick>
 800190a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fa6c 	bl	8000dec <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b64      	cmp	r3, #100	@ 0x64
 800191e:	d902      	bls.n	8001926 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	f000 bf43 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001926:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800192a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001932:	fa93 f3a3 	rbit	r3, r3
 8001936:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800193a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	095b      	lsrs	r3, r3, #5
 8001946:	b2db      	uxtb	r3, r3
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d102      	bne.n	8001958 <HAL_RCC_OscConfig+0x218>
 8001952:	4b47      	ldr	r3, [pc, #284]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e015      	b.n	8001984 <HAL_RCC_OscConfig+0x244>
 8001958:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800195c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800196c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001970:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001974:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001978:	fa93 f3a3 	rbit	r3, r3
 800197c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001980:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001988:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800198c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001990:	fa92 f2a2 	rbit	r2, r2
 8001994:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001998:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800199c:	fab2 f282 	clz	r2, r2
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f042 0220 	orr.w	r2, r2, #32
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f002 021f 	and.w	r2, r2, #31
 80019ac:	2101      	movs	r1, #1
 80019ae:	fa01 f202 	lsl.w	r2, r1, r2
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ab      	beq.n	8001910 <HAL_RCC_OscConfig+0x1d0>
 80019b8:	e05d      	b.n	8001a76 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fa17 	bl	8000dec <HAL_GetTick>
 80019be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e00a      	b.n	80019da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fa12 	bl	8000dec <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b64      	cmp	r3, #100	@ 0x64
 80019d2:	d902      	bls.n	80019da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	f000 bee9 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 80019da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019de:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019e6:	fa93 f3a3 	rbit	r3, r3
 80019ea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	fab3 f383 	clz	r3, r3
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	095b      	lsrs	r3, r3, #5
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d102      	bne.n	8001a0c <HAL_RCC_OscConfig+0x2cc>
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	e015      	b.n	8001a38 <HAL_RCC_OscConfig+0x2f8>
 8001a0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a10:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a24:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a28:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a2c:	fa93 f3a3 	rbit	r3, r3
 8001a30:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a34:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <HAL_RCC_OscConfig+0x330>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a38:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a3c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001a40:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a44:	fa92 f2a2 	rbit	r2, r2
 8001a48:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a4c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a50:	fab2 f282 	clz	r2, r2
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f042 0220 	orr.w	r2, r2, #32
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f002 021f 	and.w	r2, r2, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1ab      	bne.n	80019c4 <HAL_RCC_OscConfig+0x284>
 8001a6c:	e003      	b.n	8001a76 <HAL_RCC_OscConfig+0x336>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 817d 	beq.w	8001d86 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a8c:	4ba6      	ldr	r3, [pc, #664]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00b      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a98:	4ba3      	ldr	r3, [pc, #652]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d172      	bne.n	8001b8a <HAL_RCC_OscConfig+0x44a>
 8001aa4:	4ba0      	ldr	r3, [pc, #640]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d16c      	bne.n	8001b8a <HAL_RCC_OscConfig+0x44a>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001ac2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	095b      	lsrs	r3, r3, #5
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d102      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3a0>
 8001ada:	4b93      	ldr	r3, [pc, #588]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	e013      	b.n	8001b08 <HAL_RCC_OscConfig+0x3c8>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001aea:	fa93 f3a3 	rbit	r3, r3
 8001aee:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001af2:	2302      	movs	r3, #2
 8001af4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001af8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001afc:	fa93 f3a3 	rbit	r3, r3
 8001b00:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001b04:	4b88      	ldr	r3, [pc, #544]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001b0e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001b12:	fa92 f2a2 	rbit	r2, r2
 8001b16:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001b1a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001b1e:	fab2 f282 	clz	r2, r2
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	f042 0220 	orr.w	r2, r2, #32
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f002 021f 	and.w	r2, r2, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_RCC_OscConfig+0x410>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	f000 be2e 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b75      	ldr	r3, [pc, #468]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	21f8      	movs	r1, #248	@ 0xf8
 8001b66:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b6e:	fa91 f1a1 	rbit	r1, r1
 8001b72:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b76:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b7a:	fab1 f181 	clz	r1, r1
 8001b7e:	b2c9      	uxtb	r1, r1
 8001b80:	408b      	lsls	r3, r1
 8001b82:	4969      	ldr	r1, [pc, #420]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b88:	e0fd      	b.n	8001d86 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 8088 	beq.w	8001cac <HAL_RCC_OscConfig+0x56c>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ba6:	fa93 f3a3 	rbit	r3, r3
 8001baa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001bae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb2:	fab3 f383 	clz	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001bbc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f910 	bl	8000dec <HAL_GetTick>
 8001bcc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f90b 	bl	8000dec <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d902      	bls.n	8001be8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	f000 bde2 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001be8:	2302      	movs	r3, #2
 8001bea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001bfa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	095b      	lsrs	r3, r3, #5
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <HAL_RCC_OscConfig+0x4d8>
 8001c12:	4b45      	ldr	r3, [pc, #276]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	e013      	b.n	8001c40 <HAL_RCC_OscConfig+0x500>
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c30:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	2202      	movs	r2, #2
 8001c42:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c46:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c4a:	fa92 f2a2 	rbit	r2, r2
 8001c4e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c52:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c56:	fab2 f282 	clz	r2, r2
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f002 021f 	and.w	r2, r2, #31
 8001c66:	2101      	movs	r1, #1
 8001c68:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0af      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b2d      	ldr	r3, [pc, #180]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	21f8      	movs	r1, #248	@ 0xf8
 8001c88:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c90:	fa91 f1a1 	rbit	r1, r1
 8001c94:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c98:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c9c:	fab1 f181 	clz	r1, r1
 8001ca0:	b2c9      	uxtb	r1, r1
 8001ca2:	408b      	lsls	r3, r1
 8001ca4:	4920      	ldr	r1, [pc, #128]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
 8001caa:	e06c      	b.n	8001d86 <HAL_RCC_OscConfig+0x646>
 8001cac:	2301      	movs	r3, #1
 8001cae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001cbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc2:	fab3 f383 	clz	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ccc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7ff f888 	bl	8000dec <HAL_GetTick>
 8001cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7ff f883 	bl	8000dec <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d902      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f000 bd5a 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d104      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5ec>
 8001d22:	4b01      	ldr	r3, [pc, #4]	@ (8001d28 <HAL_RCC_OscConfig+0x5e8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	e015      	b.n	8001d54 <HAL_RCC_OscConfig+0x614>
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d3e:	2302      	movs	r3, #2
 8001d40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d44:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d50:	4bc8      	ldr	r3, [pc, #800]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d54:	2202      	movs	r2, #2
 8001d56:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d5a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d5e:	fa92 f2a2 	rbit	r2, r2
 8001d62:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d66:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d6a:	fab2 f282 	clz	r2, r2
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f042 0220 	orr.w	r2, r2, #32
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ad      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f000 8110 	beq.w	8001fbc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d079      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x760>
 8001dac:	2301      	movs	r3, #1
 8001dae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001db6:	fa93 f3a3 	rbit	r3, r3
 8001dba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4bab      	ldr	r3, [pc, #684]	@ (8002078 <HAL_RCC_OscConfig+0x938>)
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7ff f809 	bl	8000dec <HAL_GetTick>
 8001dda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff f804 	bl	8000dec <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d902      	bls.n	8001df6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f000 bcdb 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e10:	2202      	movs	r2, #2
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fa93 f2a3 	rbit	r2, r3
 8001e22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e50:	4b88      	ldr	r3, [pc, #544]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 8001e52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	6019      	str	r1, [r3, #0]
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f1a3 	rbit	r1, r3
 8001e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e76:	6019      	str	r1, [r3, #0]
  return result;
 8001e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2101      	movs	r1, #1
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0a0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x6a0>
 8001e9e:	e08d      	b.n	8001fbc <HAL_RCC_OscConfig+0x87c>
 8001ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	fa93 f2a3 	rbit	r2, r3
 8001eba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ecc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	fab3 f383 	clz	r3, r3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b68      	ldr	r3, [pc, #416]	@ (8002078 <HAL_RCC_OscConfig+0x938>)
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	461a      	mov	r2, r3
 8001ede:	2300      	movs	r3, #0
 8001ee0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7fe ff83 	bl	8000dec <HAL_GetTick>
 8001ee6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eea:	e00a      	b.n	8001f02 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eec:	f7fe ff7e 	bl	8000dec <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d902      	bls.n	8001f02 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	f000 bc55 	b.w	80027ac <HAL_RCC_OscConfig+0x106c>
 8001f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f06:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f20:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f2e:	2202      	movs	r2, #2
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f36:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f52:	2202      	movs	r2, #2
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f68:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 8001f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f76:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	6019      	str	r1, [r3, #0]
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f1a3 	rbit	r1, r3
 8001f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f94:	6019      	str	r1, [r3, #0]
  return result;
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d197      	bne.n	8001eec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 81a1 	beq.w	8002314 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd8:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d116      	bne.n	8002012 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	4b23      	ldr	r3, [pc, #140]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	4a22      	ldr	r2, [pc, #136]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	61d3      	str	r3, [r2, #28]
 8001ff0:	4b20      	ldr	r3, [pc, #128]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800200a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800200c:	2301      	movs	r3, #1
 800200e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <HAL_RCC_OscConfig+0x93c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d11a      	bne.n	8002054 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <HAL_RCC_OscConfig+0x93c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a16      	ldr	r2, [pc, #88]	@ (800207c <HAL_RCC_OscConfig+0x93c>)
 8002024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002028:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800202a:	f7fe fedf 	bl	8000dec <HAL_GetTick>
 800202e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	e009      	b.n	8002048 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002034:	f7fe feda 	bl	8000dec <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b64      	cmp	r3, #100	@ 0x64
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e3b1      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <HAL_RCC_OscConfig+0x93c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ef      	beq.n	8002034 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002058:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_OscConfig+0x940>
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4a02      	ldr	r2, [pc, #8]	@ (8002074 <HAL_RCC_OscConfig+0x934>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6213      	str	r3, [r2, #32]
 8002070:	e03c      	b.n	80020ec <HAL_RCC_OscConfig+0x9ac>
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	10908120 	.word	0x10908120
 800207c:	40007000 	.word	0x40007000
 8002080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002084:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10c      	bne.n	80020aa <HAL_RCC_OscConfig+0x96a>
 8002090:	4bc1      	ldr	r3, [pc, #772]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4ac0      	ldr	r2, [pc, #768]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	4bbe      	ldr	r3, [pc, #760]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4abd      	ldr	r2, [pc, #756]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6213      	str	r3, [r2, #32]
 80020a8:	e020      	b.n	80020ec <HAL_RCC_OscConfig+0x9ac>
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x994>
 80020ba:	4bb7      	ldr	r3, [pc, #732]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4ab6      	ldr	r2, [pc, #728]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	4bb4      	ldr	r3, [pc, #720]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4ab3      	ldr	r2, [pc, #716]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6213      	str	r3, [r2, #32]
 80020d2:	e00b      	b.n	80020ec <HAL_RCC_OscConfig+0x9ac>
 80020d4:	4bb0      	ldr	r3, [pc, #704]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4aaf      	ldr	r2, [pc, #700]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	4bad      	ldr	r3, [pc, #692]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	4aac      	ldr	r2, [pc, #688]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80020e6:	f023 0304 	bic.w	r3, r3, #4
 80020ea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8081 	beq.w	8002200 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fe:	f7fe fe75 	bl	8000dec <HAL_GetTick>
 8002102:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7fe fe70 	bl	8000dec <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e345      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002128:	2202      	movs	r2, #2
 800212a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	fa93 f2a3 	rbit	r2, r3
 800213a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002148:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002166:	601a      	str	r2, [r3, #0]
  return result;
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002170:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	095b      	lsrs	r3, r3, #5
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d102      	bne.n	800218c <HAL_RCC_OscConfig+0xa4c>
 8002186:	4b84      	ldr	r3, [pc, #528]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	e013      	b.n	80021b4 <HAL_RCC_OscConfig+0xa74>
 800218c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002190:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002194:	2202      	movs	r2, #2
 8002196:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	fa93 f2a3 	rbit	r2, r3
 80021a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021aa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	4b79      	ldr	r3, [pc, #484]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021b8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021bc:	2102      	movs	r1, #2
 80021be:	6011      	str	r1, [r2, #0]
 80021c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021c4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	fa92 f1a2 	rbit	r1, r2
 80021ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021d2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021d6:	6011      	str	r1, [r2, #0]
  return result;
 80021d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021dc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	fab2 f282 	clz	r2, r2
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	f002 021f 	and.w	r2, r2, #31
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f202 	lsl.w	r2, r1, r2
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d084      	beq.n	8002108 <HAL_RCC_OscConfig+0x9c8>
 80021fe:	e07f      	b.n	8002300 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7fe fdf4 	bl	8000dec <HAL_GetTick>
 8002204:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002208:	e00b      	b.n	8002222 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7fe fdef 	bl	8000dec <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e2c4      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800222a:	2202      	movs	r2, #2
 800222c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f2a3 	rbit	r2, r3
 800223c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002240:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800224e:	2202      	movs	r2, #2
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002264:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002268:	601a      	str	r2, [r3, #0]
  return result;
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002272:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d102      	bne.n	800228e <HAL_RCC_OscConfig+0xb4e>
 8002288:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	e013      	b.n	80022b6 <HAL_RCC_OscConfig+0xb76>
 800228e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002292:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002296:	2202      	movs	r2, #2
 8002298:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	4b39      	ldr	r3, [pc, #228]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022ba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022be:	2102      	movs	r1, #2
 80022c0:	6011      	str	r1, [r2, #0]
 80022c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	fa92 f1a2 	rbit	r1, r2
 80022d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022d8:	6011      	str	r1, [r2, #0]
  return result;
 80022da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022de:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	fab2 f282 	clz	r2, r2
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	f002 021f 	and.w	r2, r2, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f202 	lsl.w	r2, r1, r2
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d184      	bne.n	800220a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002300:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b23      	ldr	r3, [pc, #140]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4a22      	ldr	r2, [pc, #136]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002312:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002318:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 8242 	beq.w	80027aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002326:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <HAL_RCC_OscConfig+0xc58>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	f000 8213 	beq.w	800275a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b02      	cmp	r3, #2
 8002342:	f040 8162 	bne.w	800260a <HAL_RCC_OscConfig+0xeca>
 8002346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800234e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002366:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800236a:	601a      	str	r2, [r3, #0]
  return result;
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002374:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002380:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	461a      	mov	r2, r3
 8002388:	2300      	movs	r3, #0
 800238a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fd2e 	bl	8000dec <HAL_GetTick>
 8002390:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	e00c      	b.n	80023b0 <HAL_RCC_OscConfig+0xc70>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7fe fd26 	bl	8000dec <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e1fd      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 80023b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023d4:	601a      	str	r2, [r3, #0]
  return result;
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023de:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <HAL_RCC_OscConfig+0xcba>
 80023f4:	4bb0      	ldr	r3, [pc, #704]	@ (80026b8 <HAL_RCC_OscConfig+0xf78>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	e027      	b.n	800244a <HAL_RCC_OscConfig+0xd0a>
 80023fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002402:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002424:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002428:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002432:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002440:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	4b9c      	ldr	r3, [pc, #624]	@ (80026b8 <HAL_RCC_OscConfig+0xf78>)
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002452:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002456:	6011      	str	r1, [r2, #0]
 8002458:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	fa92 f1a2 	rbit	r1, r2
 8002466:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800246a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800246e:	6011      	str	r1, [r2, #0]
  return result;
 8002470:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002474:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	fab2 f282 	clz	r2, r2
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f042 0220 	orr.w	r2, r2, #32
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	f002 021f 	and.w	r2, r2, #31
 800248a:	2101      	movs	r1, #1
 800248c:	fa01 f202 	lsl.w	r2, r1, r2
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d182      	bne.n	800239c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b88      	ldr	r3, [pc, #544]	@ (80026b8 <HAL_RCC_OscConfig+0xf78>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	430b      	orrs	r3, r1
 80024b8:	497f      	ldr	r1, [pc, #508]	@ (80026b8 <HAL_RCC_OscConfig+0xf78>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
 80024be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024c6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	fa93 f2a3 	rbit	r2, r3
 80024da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024de:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024e2:	601a      	str	r2, [r3, #0]
  return result;
 80024e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024ec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	461a      	mov	r2, r3
 8002500:	2301      	movs	r3, #1
 8002502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002504:	f7fe fc72 	bl	8000dec <HAL_GetTick>
 8002508:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250c:	e009      	b.n	8002522 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fc6d 	bl	8000dec <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e144      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800252a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800252e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	fa93 f2a3 	rbit	r2, r3
 800253e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002542:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002546:	601a      	str	r2, [r3, #0]
  return result;
 8002548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002550:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	095b      	lsrs	r3, r3, #5
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d102      	bne.n	800256c <HAL_RCC_OscConfig+0xe2c>
 8002566:	4b54      	ldr	r3, [pc, #336]	@ (80026b8 <HAL_RCC_OscConfig+0xf78>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	e027      	b.n	80025bc <HAL_RCC_OscConfig+0xe7c>
 800256c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002570:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002574:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002578:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	fa93 f2a3 	rbit	r2, r3
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800259a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	fa93 f2a3 	rbit	r2, r3
 80025ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	4b3f      	ldr	r3, [pc, #252]	@ (80026b8 <HAL_RCC_OscConfig+0xf78>)
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025c8:	6011      	str	r1, [r2, #0]
 80025ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ce:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	fa92 f1a2 	rbit	r1, r2
 80025d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025dc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025e0:	6011      	str	r1, [r2, #0]
  return result;
 80025e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	fab2 f282 	clz	r2, r2
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	f002 021f 	and.w	r2, r2, #31
 80025fc:	2101      	movs	r1, #1
 80025fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d082      	beq.n	800250e <HAL_RCC_OscConfig+0xdce>
 8002608:	e0cf      	b.n	80027aa <HAL_RCC_OscConfig+0x106a>
 800260a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002612:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	fa93 f2a3 	rbit	r2, r3
 8002626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800262e:	601a      	str	r2, [r3, #0]
  return result;
 8002630:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002634:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002638:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002644:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	461a      	mov	r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fbcc 	bl	8000dec <HAL_GetTick>
 8002654:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002658:	e009      	b.n	800266e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7fe fbc7 	bl	8000dec <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e09e      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002676:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800267a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002692:	601a      	str	r2, [r3, #0]
  return result;
 8002694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002698:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800269c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d104      	bne.n	80026bc <HAL_RCC_OscConfig+0xf7c>
 80026b2:	4b01      	ldr	r3, [pc, #4]	@ (80026b8 <HAL_RCC_OscConfig+0xf78>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e029      	b.n	800270c <HAL_RCC_OscConfig+0xfcc>
 80026b8:	40021000 	.word	0x40021000
 80026bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	fa93 f2a3 	rbit	r2, r3
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	fa93 f2a3 	rbit	r2, r3
 80026fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002702:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <HAL_RCC_OscConfig+0x1078>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002710:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002714:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002718:	6011      	str	r1, [r2, #0]
 800271a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fa92 f1a2 	rbit	r1, r2
 8002728:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800272c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002730:	6011      	str	r1, [r2, #0]
  return result;
 8002732:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002736:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	fab2 f282 	clz	r2, r2
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f042 0220 	orr.w	r2, r2, #32
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f002 021f 	and.w	r2, r2, #31
 800274c:	2101      	movs	r1, #1
 800274e:	fa01 f202 	lsl.w	r2, r1, r2
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d180      	bne.n	800265a <HAL_RCC_OscConfig+0xf1a>
 8002758:	e027      	b.n	80027aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800275e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e01e      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800276e:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <HAL_RCC_OscConfig+0x1078>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002776:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800277a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	429a      	cmp	r2, r3
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800278e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002792:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b09e      	sub	sp, #120	@ 0x78
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e162      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b90      	ldr	r3, [pc, #576]	@ (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	498b      	ldr	r1, [pc, #556]	@ (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b89      	ldr	r3, [pc, #548]	@ (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e14a      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002810:	4b82      	ldr	r3, [pc, #520]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	497f      	ldr	r1, [pc, #508]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80dc 	beq.w	80029e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d13c      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xf6>
 8002838:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800283c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_RCC_ClockConfig+0xa6>
 800285c:	4b6f      	ldr	r3, [pc, #444]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e00f      	b.n	8002882 <HAL_RCC_ClockConfig+0xc6>
 8002862:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002866:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002870:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002874:	663b      	str	r3, [r7, #96]	@ 0x60
 8002876:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800287e:	4b67      	ldr	r3, [pc, #412]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002886:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002888:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800288a:	fa92 f2a2 	rbit	r2, r2
 800288e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002890:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002892:	fab2 f282 	clz	r2, r2
 8002896:	b2d2      	uxtb	r2, r2
 8002898:	f042 0220 	orr.w	r2, r2, #32
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	f002 021f 	and.w	r2, r2, #31
 80028a2:	2101      	movs	r1, #1
 80028a4:	fa01 f202 	lsl.w	r2, r1, r2
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d17b      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e0f3      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d13c      	bne.n	8002934 <HAL_RCC_ClockConfig+0x178>
 80028ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x128>
 80028de:	4b4f      	ldr	r3, [pc, #316]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e00f      	b.n	8002904 <HAL_RCC_ClockConfig+0x148>
 80028e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028ec:	fa93 f3a3 	rbit	r3, r3
 80028f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80028f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002900:	4b46      	ldr	r3, [pc, #280]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002908:	63ba      	str	r2, [r7, #56]	@ 0x38
 800290a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800290c:	fa92 f2a2 	rbit	r2, r2
 8002910:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002914:	fab2 f282 	clz	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f042 0220 	orr.w	r2, r2, #32
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f002 021f 	and.w	r2, r2, #31
 8002924:	2101      	movs	r1, #1
 8002926:	fa01 f202 	lsl.w	r2, r1, r2
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d13a      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b2      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
 8002934:	2302      	movs	r3, #2
 8002936:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	b2db      	uxtb	r3, r3
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_RCC_ClockConfig+0x1a0>
 8002956:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	e00d      	b.n	8002978 <HAL_RCC_ClockConfig+0x1bc>
 800295c:	2302      	movs	r3, #2
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002962:	fa93 f3a3 	rbit	r3, r3
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
 8002968:	2302      	movs	r3, #2
 800296a:	623b      	str	r3, [r7, #32]
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	61fb      	str	r3, [r7, #28]
 8002974:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	2202      	movs	r2, #2
 800297a:	61ba      	str	r2, [r7, #24]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	fa92 f2a2 	rbit	r2, r2
 8002982:	617a      	str	r2, [r7, #20]
  return result;
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	fab2 f282 	clz	r2, r2
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	f042 0220 	orr.w	r2, r2, #32
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	f002 021f 	and.w	r2, r2, #31
 8002996:	2101      	movs	r1, #1
 8002998:	fa01 f202 	lsl.w	r2, r1, r2
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e079      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	491a      	ldr	r1, [pc, #104]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fa18 	bl	8000dec <HAL_GetTick>
 80029bc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fa14 	bl	8000dec <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e061      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b11      	ldr	r3, [pc, #68]	@ (8002a1c <HAL_RCC_ClockConfig+0x260>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d214      	bcs.n	8002a20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4906      	ldr	r1, [pc, #24]	@ (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b04      	ldr	r3, [pc, #16]	@ (8002a18 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e040      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2de>
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d008      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	491a      	ldr	r1, [pc, #104]	@ (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a4a:	4b16      	ldr	r3, [pc, #88]	@ (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4912      	ldr	r1, [pc, #72]	@ (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a5e:	f000 f829 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a62:	4601      	mov	r1, r0
 8002a64:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a6c:	22f0      	movs	r2, #240	@ 0xf0
 8002a6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	fa92 f2a2 	rbit	r2, r2
 8002a76:	60fa      	str	r2, [r7, #12]
  return result;
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	fab2 f282 	clz	r2, r2
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	40d3      	lsrs	r3, r2
 8002a82:	4a09      	ldr	r2, [pc, #36]	@ (8002aa8 <HAL_RCC_ClockConfig+0x2ec>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	fa21 f303 	lsr.w	r3, r1, r3
 8002a8a:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <HAL_RCC_ClockConfig+0x2f0>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a8e:	4b08      	ldr	r3, [pc, #32]	@ (8002ab0 <HAL_RCC_ClockConfig+0x2f4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f966 	bl	8000d64 <HAL_InitTick>
  
  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3778      	adds	r7, #120	@ 0x78
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08004e40 	.word	0x08004e40
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ace:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x36>
 8002ae2:	e026      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ae4:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ae6:	613b      	str	r3, [r7, #16]
      break;
 8002ae8:	e026      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	0c9b      	lsrs	r3, r3, #18
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	4a14      	ldr	r2, [pc, #80]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b10:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e004      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b26:	fb02 f303 	mul.w	r3, r2, r3
 8002b2a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	613b      	str	r3, [r7, #16]
      break;
 8002b30:	e002      	b.n	8002b38 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b34:	613b      	str	r3, [r7, #16]
      break;
 8002b36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b38:	693b      	ldr	r3, [r7, #16]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	08004e58 	.word	0x08004e58
 8002b54:	08004e68 	.word	0x08004e68
 8002b58:	003d0900 	.word	0x003d0900

08002b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b7a:	f7ff ffef 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b88:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	fa92 f2a2 	rbit	r2, r2
 8002b94:	603a      	str	r2, [r7, #0]
  return result;
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	fab2 f282 	clz	r2, r2
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	40d3      	lsrs	r3, r2
 8002ba0:	4a04      	ldr	r2, [pc, #16]	@ (8002bb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ba2:	5cd3      	ldrb	r3, [r2, r3]
 8002ba4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08004e50 	.word	0x08004e50

08002bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bbe:	f7ff ffcd 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002bc2:	4601      	mov	r1, r0
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002bf4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002bcc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002bd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	fa92 f2a2 	rbit	r2, r2
 8002bd8:	603a      	str	r2, [r7, #0]
  return result;
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	fab2 f282 	clz	r2, r2
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	40d3      	lsrs	r3, r2
 8002be4:	4a04      	ldr	r2, [pc, #16]	@ (8002bf8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	08004e50 	.word	0x08004e50

08002bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b092      	sub	sp, #72	@ 0x48
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 80d4 	beq.w	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c20:	4b4e      	ldr	r3, [pc, #312]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10e      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	69db      	ldr	r3, [r3, #28]
 8002c30:	4a4a      	ldr	r2, [pc, #296]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c36:	61d3      	str	r3, [r2, #28]
 8002c38:	4b48      	ldr	r3, [pc, #288]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	4b45      	ldr	r3, [pc, #276]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d118      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c56:	4b42      	ldr	r3, [pc, #264]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a41      	ldr	r2, [pc, #260]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c62:	f7fe f8c3 	bl	8000dec <HAL_GetTick>
 8002c66:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c68:	e008      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6a:	f7fe f8bf 	bl	8000dec <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b64      	cmp	r3, #100	@ 0x64
 8002c76:	d901      	bls.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e169      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c88:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8084 	beq.w	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d07c      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b26      	ldr	r3, [pc, #152]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cde:	fa93 f3a3 	rbit	r3, r3
 8002ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cfa:	4a18      	ldr	r2, [pc, #96]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d04b      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0a:	f7fe f86f 	bl	8000dec <HAL_GetTick>
 8002d0e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d12:	f7fe f86b 	bl	8000dec <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e113      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d34:	2302      	movs	r3, #2
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	61fb      	str	r3, [r7, #28]
  return result;
 8002d40:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	095b      	lsrs	r3, r3, #5
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d108      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d56:	4b01      	ldr	r3, [pc, #4]	@ (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	e00d      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40007000 	.word	0x40007000
 8002d64:	10908100 	.word	0x10908100
 8002d68:	2302      	movs	r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	4b78      	ldr	r3, [pc, #480]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d78:	2202      	movs	r2, #2
 8002d7a:	613a      	str	r2, [r7, #16]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	fa92 f2a2 	rbit	r2, r2
 8002d82:	60fa      	str	r2, [r7, #12]
  return result;
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	fab2 f282 	clz	r2, r2
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	f002 021f 	and.w	r2, r2, #31
 8002d96:	2101      	movs	r1, #1
 8002d98:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0b7      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002da2:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	496a      	ldr	r1, [pc, #424]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4b66      	ldr	r3, [pc, #408]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	4a65      	ldr	r2, [pc, #404]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd4:	4b60      	ldr	r3, [pc, #384]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	f023 0203 	bic.w	r2, r3, #3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	495d      	ldr	r1, [pc, #372]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df2:	4b59      	ldr	r3, [pc, #356]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4956      	ldr	r1, [pc, #344]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e10:	4b51      	ldr	r3, [pc, #324]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	494e      	ldr	r1, [pc, #312]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f023 0210 	bic.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	4947      	ldr	r1, [pc, #284]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e4c:	4b42      	ldr	r3, [pc, #264]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	493f      	ldr	r1, [pc, #252]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f023 0220 	bic.w	r2, r3, #32
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4938      	ldr	r1, [pc, #224]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e88:	4b33      	ldr	r3, [pc, #204]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	4930      	ldr	r1, [pc, #192]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	4929      	ldr	r1, [pc, #164]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ec4:	4b24      	ldr	r3, [pc, #144]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	4921      	ldr	r1, [pc, #132]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	491a      	ldr	r1, [pc, #104]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f00:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f04:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	4912      	ldr	r1, [pc, #72]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	490b      	ldr	r1, [pc, #44]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f3c:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f48:	4903      	ldr	r1, [pc, #12]	@ (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3748      	adds	r7, #72	@ 0x48
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e09d      	b.n	80030aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d108      	bne.n	8002f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f7e:	d009      	beq.n	8002f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
 8002f86:	e005      	b.n	8002f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd fcbc 	bl	800092c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fd4:	d902      	bls.n	8002fdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	e002      	b.n	8002fe2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002fea:	d007      	beq.n	8002ffc <HAL_SPI_Init+0xa0>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ff4:	d002      	beq.n	8002ffc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	431a      	orrs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800303e:	ea42 0103 	orr.w	r1, r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	0c1b      	lsrs	r3, r3, #16
 8003058:	f003 0204 	and.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003078:	ea42 0103 	orr.w	r1, r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003098:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e049      	b.n	8003158 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fd fc69 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	4619      	mov	r1, r3
 80030f0:	4610      	mov	r0, r2
 80030f2:	f000 fca9 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e049      	b.n	8003206 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f841 	bl	800320e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f000 fc52 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <HAL_TIM_PWM_Start+0x24>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e03c      	b.n	80032c2 <HAL_TIM_PWM_Start+0x9e>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b04      	cmp	r3, #4
 800324c:	d109      	bne.n	8003262 <HAL_TIM_PWM_Start+0x3e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e02f      	b.n	80032c2 <HAL_TIM_PWM_Start+0x9e>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d109      	bne.n	800327c <HAL_TIM_PWM_Start+0x58>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e022      	b.n	80032c2 <HAL_TIM_PWM_Start+0x9e>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b0c      	cmp	r3, #12
 8003280:	d109      	bne.n	8003296 <HAL_TIM_PWM_Start+0x72>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b01      	cmp	r3, #1
 800328c:	bf14      	ite	ne
 800328e:	2301      	movne	r3, #1
 8003290:	2300      	moveq	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e015      	b.n	80032c2 <HAL_TIM_PWM_Start+0x9e>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b10      	cmp	r3, #16
 800329a:	d109      	bne.n	80032b0 <HAL_TIM_PWM_Start+0x8c>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e008      	b.n	80032c2 <HAL_TIM_PWM_Start+0x9e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e097      	b.n	80033fa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <HAL_TIM_PWM_Start+0xb6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d8:	e023      	b.n	8003322 <HAL_TIM_PWM_Start+0xfe>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d104      	bne.n	80032ea <HAL_TIM_PWM_Start+0xc6>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e8:	e01b      	b.n	8003322 <HAL_TIM_PWM_Start+0xfe>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_PWM_Start+0xd6>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032f8:	e013      	b.n	8003322 <HAL_TIM_PWM_Start+0xfe>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b0c      	cmp	r3, #12
 80032fe:	d104      	bne.n	800330a <HAL_TIM_PWM_Start+0xe6>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003308:	e00b      	b.n	8003322 <HAL_TIM_PWM_Start+0xfe>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d104      	bne.n	800331a <HAL_TIM_PWM_Start+0xf6>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003318:	e003      	b.n	8003322 <HAL_TIM_PWM_Start+0xfe>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	6839      	ldr	r1, [r7, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 ff98 	bl	8004260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a33      	ldr	r2, [pc, #204]	@ (8003404 <HAL_TIM_PWM_Start+0x1e0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_TIM_PWM_Start+0x13e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a32      	ldr	r2, [pc, #200]	@ (8003408 <HAL_TIM_PWM_Start+0x1e4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00e      	beq.n	8003362 <HAL_TIM_PWM_Start+0x13e>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a30      	ldr	r2, [pc, #192]	@ (800340c <HAL_TIM_PWM_Start+0x1e8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d009      	beq.n	8003362 <HAL_TIM_PWM_Start+0x13e>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2f      	ldr	r2, [pc, #188]	@ (8003410 <HAL_TIM_PWM_Start+0x1ec>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d004      	beq.n	8003362 <HAL_TIM_PWM_Start+0x13e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2d      	ldr	r2, [pc, #180]	@ (8003414 <HAL_TIM_PWM_Start+0x1f0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_TIM_PWM_Start+0x142>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_TIM_PWM_Start+0x144>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800337a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a20      	ldr	r2, [pc, #128]	@ (8003404 <HAL_TIM_PWM_Start+0x1e0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d018      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x194>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338e:	d013      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x194>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a20      	ldr	r2, [pc, #128]	@ (8003418 <HAL_TIM_PWM_Start+0x1f4>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00e      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x194>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1f      	ldr	r2, [pc, #124]	@ (800341c <HAL_TIM_PWM_Start+0x1f8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d009      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x194>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a17      	ldr	r2, [pc, #92]	@ (8003408 <HAL_TIM_PWM_Start+0x1e4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d004      	beq.n	80033b8 <HAL_TIM_PWM_Start+0x194>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a16      	ldr	r2, [pc, #88]	@ (800340c <HAL_TIM_PWM_Start+0x1e8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d115      	bne.n	80033e4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <HAL_TIM_PWM_Start+0x1fc>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d015      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x1d2>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d0:	d011      	beq.n	80033f6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	e008      	b.n	80033f6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e000      	b.n	80033f8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40012c00 	.word	0x40012c00
 8003408:	40013400 	.word	0x40013400
 800340c:	40014000 	.word	0x40014000
 8003410:	40014400 	.word	0x40014400
 8003414:	40014800 	.word	0x40014800
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	00010007 	.word	0x00010007

08003424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d020      	beq.n	8003488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01b      	beq.n	8003488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0202 	mvn.w	r2, #2
 8003458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 facb 	bl	8003a0a <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fabd 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 face 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	d020      	beq.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01b      	beq.n	80034d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0204 	mvn.w	r2, #4
 80034a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2202      	movs	r2, #2
 80034aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 faa5 	bl	8003a0a <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fa97 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 faa8 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d020      	beq.n	8003520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01b      	beq.n	8003520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0208 	mvn.w	r2, #8
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2204      	movs	r2, #4
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fa7f 	bl	8003a0a <HAL_TIM_IC_CaptureCallback>
 800350c:	e005      	b.n	800351a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa71 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fa82 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d020      	beq.n	800356c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01b      	beq.n	800356c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f06f 0210 	mvn.w	r2, #16
 800353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2208      	movs	r2, #8
 8003542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa59 	bl	8003a0a <HAL_TIM_IC_CaptureCallback>
 8003558:	e005      	b.n	8003566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa4b 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 fa5c 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00c      	beq.n	8003590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0201 	mvn.w	r2, #1
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa29 	bl	80039e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00c      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d007      	beq.n	80035b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 ff84 	bl	80044bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00c      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 ff7c 	bl	80044d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa1b 	bl	8003a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0320 	and.w	r3, r3, #32
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00c      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0320 	and.w	r3, r3, #32
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0220 	mvn.w	r2, #32
 8003618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 ff44 	bl	80044a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003620:	bf00      	nop
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003642:	2302      	movs	r3, #2
 8003644:	e0ff      	b.n	8003846 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b14      	cmp	r3, #20
 8003652:	f200 80f0 	bhi.w	8003836 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003656:	a201      	add	r2, pc, #4	@ (adr r2, 800365c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	080036b1 	.word	0x080036b1
 8003660:	08003837 	.word	0x08003837
 8003664:	08003837 	.word	0x08003837
 8003668:	08003837 	.word	0x08003837
 800366c:	080036f1 	.word	0x080036f1
 8003670:	08003837 	.word	0x08003837
 8003674:	08003837 	.word	0x08003837
 8003678:	08003837 	.word	0x08003837
 800367c:	08003733 	.word	0x08003733
 8003680:	08003837 	.word	0x08003837
 8003684:	08003837 	.word	0x08003837
 8003688:	08003837 	.word	0x08003837
 800368c:	08003773 	.word	0x08003773
 8003690:	08003837 	.word	0x08003837
 8003694:	08003837 	.word	0x08003837
 8003698:	08003837 	.word	0x08003837
 800369c:	080037b5 	.word	0x080037b5
 80036a0:	08003837 	.word	0x08003837
 80036a4:	08003837 	.word	0x08003837
 80036a8:	08003837 	.word	0x08003837
 80036ac:	080037f5 	.word	0x080037f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fa62 	bl	8003b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0208 	orr.w	r2, r2, #8
 80036ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0204 	bic.w	r2, r2, #4
 80036da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6999      	ldr	r1, [r3, #24]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	619a      	str	r2, [r3, #24]
      break;
 80036ee:	e0a5      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fad2 	bl	8003ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699a      	ldr	r2, [r3, #24]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800370a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699a      	ldr	r2, [r3, #24]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800371a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	619a      	str	r2, [r3, #24]
      break;
 8003730:	e084      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fb3b 	bl	8003db4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69da      	ldr	r2, [r3, #28]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0208 	orr.w	r2, r2, #8
 800374c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0204 	bic.w	r2, r2, #4
 800375c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69d9      	ldr	r1, [r3, #28]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	61da      	str	r2, [r3, #28]
      break;
 8003770:	e064      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68b9      	ldr	r1, [r7, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 fba3 	bl	8003ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69d9      	ldr	r1, [r3, #28]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	021a      	lsls	r2, r3, #8
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	61da      	str	r2, [r3, #28]
      break;
 80037b2:	e043      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68b9      	ldr	r1, [r7, #8]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fbec 	bl	8003f98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0208 	orr.w	r2, r2, #8
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0204 	bic.w	r2, r2, #4
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037f2:	e023      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68b9      	ldr	r1, [r7, #8]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fc30 	bl	8004060 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800380e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	021a      	lsls	r2, r3, #8
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003834:	e002      	b.n	800383c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	75fb      	strb	r3, [r7, #23]
      break;
 800383a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop

08003850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_TIM_ConfigClockSource+0x1c>
 8003868:	2302      	movs	r3, #2
 800386a:	e0b6      	b.n	80039da <HAL_TIM_ConfigClockSource+0x18a>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800388e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a8:	d03e      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0xd8>
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ae:	f200 8087 	bhi.w	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	f000 8086 	beq.w	80039c6 <HAL_TIM_ConfigClockSource+0x176>
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038be:	d87f      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038c0:	2b70      	cmp	r3, #112	@ 0x70
 80038c2:	d01a      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0xaa>
 80038c4:	2b70      	cmp	r3, #112	@ 0x70
 80038c6:	d87b      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038c8:	2b60      	cmp	r3, #96	@ 0x60
 80038ca:	d050      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x11e>
 80038cc:	2b60      	cmp	r3, #96	@ 0x60
 80038ce:	d877      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038d0:	2b50      	cmp	r3, #80	@ 0x50
 80038d2:	d03c      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xfe>
 80038d4:	2b50      	cmp	r3, #80	@ 0x50
 80038d6:	d873      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038d8:	2b40      	cmp	r3, #64	@ 0x40
 80038da:	d058      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x13e>
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	d86f      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038e0:	2b30      	cmp	r3, #48	@ 0x30
 80038e2:	d064      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15e>
 80038e4:	2b30      	cmp	r3, #48	@ 0x30
 80038e6:	d86b      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d060      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15e>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d867      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x170>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d05c      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15e>
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d05a      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15e>
 80038f8:	e062      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800390a:	f000 fc89 	bl	8004220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800391c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
      break;
 8003926:	e04f      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003938:	f000 fc72 	bl	8004220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800394a:	609a      	str	r2, [r3, #8]
      break;
 800394c:	e03c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	461a      	mov	r2, r3
 800395c:	f000 fbe6 	bl	800412c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2150      	movs	r1, #80	@ 0x50
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fc3f 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 800396c:	e02c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800397a:	461a      	mov	r2, r3
 800397c:	f000 fc05 	bl	800418a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2160      	movs	r1, #96	@ 0x60
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fc2f 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 800398c:	e01c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	461a      	mov	r2, r3
 800399c:	f000 fbc6 	bl	800412c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2140      	movs	r1, #64	@ 0x40
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fc1f 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 80039ac:	e00c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f000 fc16 	bl	80041ea <TIM_ITRx_SetConfig>
      break;
 80039be:	e003      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
      break;
 80039c4:	e000      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80039c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a42      	ldr	r2, [pc, #264]	@ (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <TIM_Base_SetConfig+0x38>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a66:	d00b      	beq.n	8003a80 <TIM_Base_SetConfig+0x38>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b68 <TIM_Base_SetConfig+0x120>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_Base_SetConfig+0x38>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a3e      	ldr	r2, [pc, #248]	@ (8003b6c <TIM_Base_SetConfig+0x124>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_Base_SetConfig+0x38>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b70 <TIM_Base_SetConfig+0x128>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d108      	bne.n	8003a92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a33      	ldr	r2, [pc, #204]	@ (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01b      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa0:	d017      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a30      	ldr	r2, [pc, #192]	@ (8003b68 <TIM_Base_SetConfig+0x120>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2f      	ldr	r2, [pc, #188]	@ (8003b6c <TIM_Base_SetConfig+0x124>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b70 <TIM_Base_SetConfig+0x128>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2d      	ldr	r2, [pc, #180]	@ (8003b74 <TIM_Base_SetConfig+0x12c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8003b78 <TIM_Base_SetConfig+0x130>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <TIM_Base_SetConfig+0x134>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a16      	ldr	r2, [pc, #88]	@ (8003b64 <TIM_Base_SetConfig+0x11c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00f      	beq.n	8003b30 <TIM_Base_SetConfig+0xe8>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <TIM_Base_SetConfig+0x128>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <TIM_Base_SetConfig+0xe8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a16      	ldr	r2, [pc, #88]	@ (8003b74 <TIM_Base_SetConfig+0x12c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <TIM_Base_SetConfig+0xe8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <TIM_Base_SetConfig+0x130>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_Base_SetConfig+0xe8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <TIM_Base_SetConfig+0x134>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d103      	bne.n	8003b38 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f023 0201 	bic.w	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	611a      	str	r2, [r3, #16]
  }
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40013400 	.word	0x40013400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800

08003b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 0201 	bic.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f023 0302 	bic.w	r3, r3, #2
 8003bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <TIM_OC1_SetConfig+0x10c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00f      	beq.n	8003c00 <TIM_OC1_SetConfig+0x80>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <TIM_OC1_SetConfig+0x110>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00b      	beq.n	8003c00 <TIM_OC1_SetConfig+0x80>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a2a      	ldr	r2, [pc, #168]	@ (8003c94 <TIM_OC1_SetConfig+0x114>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d007      	beq.n	8003c00 <TIM_OC1_SetConfig+0x80>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a29      	ldr	r2, [pc, #164]	@ (8003c98 <TIM_OC1_SetConfig+0x118>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d003      	beq.n	8003c00 <TIM_OC1_SetConfig+0x80>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a28      	ldr	r2, [pc, #160]	@ (8003c9c <TIM_OC1_SetConfig+0x11c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d10c      	bne.n	8003c1a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f023 0308 	bic.w	r3, r3, #8
 8003c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <TIM_OC1_SetConfig+0x10c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00f      	beq.n	8003c42 <TIM_OC1_SetConfig+0xc2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1a      	ldr	r2, [pc, #104]	@ (8003c90 <TIM_OC1_SetConfig+0x110>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00b      	beq.n	8003c42 <TIM_OC1_SetConfig+0xc2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	@ (8003c94 <TIM_OC1_SetConfig+0x114>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <TIM_OC1_SetConfig+0xc2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <TIM_OC1_SetConfig+0x118>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_OC1_SetConfig+0xc2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <TIM_OC1_SetConfig+0x11c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d111      	bne.n	8003c66 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f023 0210 	bic.w	r2, r3, #16
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f023 0320 	bic.w	r3, r3, #32
 8003cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a28      	ldr	r2, [pc, #160]	@ (8003da0 <TIM_OC2_SetConfig+0x100>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d003      	beq.n	8003d0c <TIM_OC2_SetConfig+0x6c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a27      	ldr	r2, [pc, #156]	@ (8003da4 <TIM_OC2_SetConfig+0x104>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10d      	bne.n	8003d28 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8003da0 <TIM_OC2_SetConfig+0x100>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00f      	beq.n	8003d50 <TIM_OC2_SetConfig+0xb0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a1c      	ldr	r2, [pc, #112]	@ (8003da4 <TIM_OC2_SetConfig+0x104>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d00b      	beq.n	8003d50 <TIM_OC2_SetConfig+0xb0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003da8 <TIM_OC2_SetConfig+0x108>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d007      	beq.n	8003d50 <TIM_OC2_SetConfig+0xb0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a1a      	ldr	r2, [pc, #104]	@ (8003dac <TIM_OC2_SetConfig+0x10c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d003      	beq.n	8003d50 <TIM_OC2_SetConfig+0xb0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a19      	ldr	r2, [pc, #100]	@ (8003db0 <TIM_OC2_SetConfig+0x110>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d113      	bne.n	8003d78 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d56:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d5e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40013400 	.word	0x40013400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40014400 	.word	0x40014400
 8003db0:	40014800 	.word	0x40014800

08003db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0303 	bic.w	r3, r3, #3
 8003dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a27      	ldr	r2, [pc, #156]	@ (8003eb0 <TIM_OC3_SetConfig+0xfc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_OC3_SetConfig+0x6a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a26      	ldr	r2, [pc, #152]	@ (8003eb4 <TIM_OC3_SetConfig+0x100>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d10d      	bne.n	8003e3a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e38:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003eb0 <TIM_OC3_SetConfig+0xfc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d00f      	beq.n	8003e62 <TIM_OC3_SetConfig+0xae>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <TIM_OC3_SetConfig+0x100>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00b      	beq.n	8003e62 <TIM_OC3_SetConfig+0xae>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003eb8 <TIM_OC3_SetConfig+0x104>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d007      	beq.n	8003e62 <TIM_OC3_SetConfig+0xae>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a19      	ldr	r2, [pc, #100]	@ (8003ebc <TIM_OC3_SetConfig+0x108>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d003      	beq.n	8003e62 <TIM_OC3_SetConfig+0xae>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a18      	ldr	r2, [pc, #96]	@ (8003ec0 <TIM_OC3_SetConfig+0x10c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d113      	bne.n	8003e8a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40013400 	.word	0x40013400
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40014400 	.word	0x40014400
 8003ec0:	40014800 	.word	0x40014800

08003ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a18      	ldr	r2, [pc, #96]	@ (8003f84 <TIM_OC4_SetConfig+0xc0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00f      	beq.n	8003f48 <TIM_OC4_SetConfig+0x84>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a17      	ldr	r2, [pc, #92]	@ (8003f88 <TIM_OC4_SetConfig+0xc4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00b      	beq.n	8003f48 <TIM_OC4_SetConfig+0x84>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a16      	ldr	r2, [pc, #88]	@ (8003f8c <TIM_OC4_SetConfig+0xc8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d007      	beq.n	8003f48 <TIM_OC4_SetConfig+0x84>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a15      	ldr	r2, [pc, #84]	@ (8003f90 <TIM_OC4_SetConfig+0xcc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d003      	beq.n	8003f48 <TIM_OC4_SetConfig+0x84>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a14      	ldr	r2, [pc, #80]	@ (8003f94 <TIM_OC4_SetConfig+0xd0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d109      	bne.n	8003f5c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	019b      	lsls	r3, r3, #6
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40013400 	.word	0x40013400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a17      	ldr	r2, [pc, #92]	@ (800404c <TIM_OC5_SetConfig+0xb4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00f      	beq.n	8004012 <TIM_OC5_SetConfig+0x7a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	@ (8004050 <TIM_OC5_SetConfig+0xb8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00b      	beq.n	8004012 <TIM_OC5_SetConfig+0x7a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a15      	ldr	r2, [pc, #84]	@ (8004054 <TIM_OC5_SetConfig+0xbc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d007      	beq.n	8004012 <TIM_OC5_SetConfig+0x7a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a14      	ldr	r2, [pc, #80]	@ (8004058 <TIM_OC5_SetConfig+0xc0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_OC5_SetConfig+0x7a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a13      	ldr	r2, [pc, #76]	@ (800405c <TIM_OC5_SetConfig+0xc4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d109      	bne.n	8004026 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	621a      	str	r2, [r3, #32]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40013400 	.word	0x40013400
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800

08004060 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	051b      	lsls	r3, r3, #20
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a18      	ldr	r2, [pc, #96]	@ (8004118 <TIM_OC6_SetConfig+0xb8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00f      	beq.n	80040dc <TIM_OC6_SetConfig+0x7c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a17      	ldr	r2, [pc, #92]	@ (800411c <TIM_OC6_SetConfig+0xbc>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_OC6_SetConfig+0x7c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a16      	ldr	r2, [pc, #88]	@ (8004120 <TIM_OC6_SetConfig+0xc0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_OC6_SetConfig+0x7c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a15      	ldr	r2, [pc, #84]	@ (8004124 <TIM_OC6_SetConfig+0xc4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_OC6_SetConfig+0x7c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a14      	ldr	r2, [pc, #80]	@ (8004128 <TIM_OC6_SetConfig+0xc8>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d109      	bne.n	80040f0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	029b      	lsls	r3, r3, #10
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800

0800412c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	f023 0201 	bic.w	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f023 030a 	bic.w	r3, r3, #10
 8004168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418a:	b480      	push	{r7}
 800418c:	b087      	sub	sp, #28
 800418e:	af00      	add	r7, sp, #0
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f023 0210 	bic.w	r2, r3, #16
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	031b      	lsls	r3, r3, #12
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	621a      	str	r2, [r3, #32]
}
 80041de:	bf00      	nop
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
 80041f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	f043 0307 	orr.w	r3, r3, #7
 800420c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	609a      	str	r2, [r3, #8]
}
 8004214:	bf00      	nop
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800423a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	021a      	lsls	r2, r3, #8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	431a      	orrs	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4313      	orrs	r3, r2
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2201      	movs	r2, #1
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1a      	ldr	r2, [r3, #32]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e063      	b.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2a      	ldr	r2, [pc, #168]	@ (800439c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d108      	bne.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80042fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a1b      	ldr	r2, [pc, #108]	@ (8004398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d018      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004336:	d013      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00e      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a17      	ldr	r2, [pc, #92]	@ (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a12      	ldr	r2, [pc, #72]	@ (800439c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d004      	beq.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a13      	ldr	r2, [pc, #76]	@ (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10c      	bne.n	800437a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004366:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	40012c00 	.word	0x40012c00
 800439c:	40013400 	.word	0x40013400
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40014000 	.word	0x40014000

080043ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e065      	b.n	8004494 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a16      	ldr	r2, [pc, #88]	@ (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d004      	beq.n	8004456 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a14      	ldr	r2, [pc, #80]	@ (80044a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d115      	bne.n	8004482 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	051b      	lsls	r3, r3, #20
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40013400 	.word	0x40013400

080044a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e040      	b.n	8004578 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc fae8 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	@ 0x24
 8004510:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f9fc 	bl	8004928 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f825 	bl	8004580 <UART_SetConfig>
 8004536:	4603      	mov	r3, r0
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e01b      	b.n	8004578 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800454e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800455e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fa7b 	bl	8004a6c <UART_CheckIdleState>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80045ae:	f023 030c 	bic.w	r3, r3, #12
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	6979      	ldr	r1, [r7, #20]
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4aa7      	ldr	r2, [pc, #668]	@ (8004898 <UART_SetConfig+0x318>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d120      	bne.n	8004642 <UART_SetConfig+0xc2>
 8004600:	4ba6      	ldr	r3, [pc, #664]	@ (800489c <UART_SetConfig+0x31c>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004604:	f003 0303 	and.w	r3, r3, #3
 8004608:	2b03      	cmp	r3, #3
 800460a:	d817      	bhi.n	800463c <UART_SetConfig+0xbc>
 800460c:	a201      	add	r2, pc, #4	@ (adr r2, 8004614 <UART_SetConfig+0x94>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004625 	.word	0x08004625
 8004618:	08004631 	.word	0x08004631
 800461c:	08004637 	.word	0x08004637
 8004620:	0800462b 	.word	0x0800462b
 8004624:	2301      	movs	r3, #1
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e0b5      	b.n	8004796 <UART_SetConfig+0x216>
 800462a:	2302      	movs	r3, #2
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e0b2      	b.n	8004796 <UART_SetConfig+0x216>
 8004630:	2304      	movs	r3, #4
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e0af      	b.n	8004796 <UART_SetConfig+0x216>
 8004636:	2308      	movs	r3, #8
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e0ac      	b.n	8004796 <UART_SetConfig+0x216>
 800463c:	2310      	movs	r3, #16
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e0a9      	b.n	8004796 <UART_SetConfig+0x216>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a96      	ldr	r2, [pc, #600]	@ (80048a0 <UART_SetConfig+0x320>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d124      	bne.n	8004696 <UART_SetConfig+0x116>
 800464c:	4b93      	ldr	r3, [pc, #588]	@ (800489c <UART_SetConfig+0x31c>)
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004654:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004658:	d011      	beq.n	800467e <UART_SetConfig+0xfe>
 800465a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800465e:	d817      	bhi.n	8004690 <UART_SetConfig+0x110>
 8004660:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004664:	d011      	beq.n	800468a <UART_SetConfig+0x10a>
 8004666:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800466a:	d811      	bhi.n	8004690 <UART_SetConfig+0x110>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <UART_SetConfig+0xf8>
 8004670:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004674:	d006      	beq.n	8004684 <UART_SetConfig+0x104>
 8004676:	e00b      	b.n	8004690 <UART_SetConfig+0x110>
 8004678:	2300      	movs	r3, #0
 800467a:	77fb      	strb	r3, [r7, #31]
 800467c:	e08b      	b.n	8004796 <UART_SetConfig+0x216>
 800467e:	2302      	movs	r3, #2
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e088      	b.n	8004796 <UART_SetConfig+0x216>
 8004684:	2304      	movs	r3, #4
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e085      	b.n	8004796 <UART_SetConfig+0x216>
 800468a:	2308      	movs	r3, #8
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e082      	b.n	8004796 <UART_SetConfig+0x216>
 8004690:	2310      	movs	r3, #16
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e07f      	b.n	8004796 <UART_SetConfig+0x216>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a82      	ldr	r2, [pc, #520]	@ (80048a4 <UART_SetConfig+0x324>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d124      	bne.n	80046ea <UART_SetConfig+0x16a>
 80046a0:	4b7e      	ldr	r3, [pc, #504]	@ (800489c <UART_SetConfig+0x31c>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80046a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046ac:	d011      	beq.n	80046d2 <UART_SetConfig+0x152>
 80046ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046b2:	d817      	bhi.n	80046e4 <UART_SetConfig+0x164>
 80046b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046b8:	d011      	beq.n	80046de <UART_SetConfig+0x15e>
 80046ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046be:	d811      	bhi.n	80046e4 <UART_SetConfig+0x164>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <UART_SetConfig+0x14c>
 80046c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046c8:	d006      	beq.n	80046d8 <UART_SetConfig+0x158>
 80046ca:	e00b      	b.n	80046e4 <UART_SetConfig+0x164>
 80046cc:	2300      	movs	r3, #0
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e061      	b.n	8004796 <UART_SetConfig+0x216>
 80046d2:	2302      	movs	r3, #2
 80046d4:	77fb      	strb	r3, [r7, #31]
 80046d6:	e05e      	b.n	8004796 <UART_SetConfig+0x216>
 80046d8:	2304      	movs	r3, #4
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e05b      	b.n	8004796 <UART_SetConfig+0x216>
 80046de:	2308      	movs	r3, #8
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e058      	b.n	8004796 <UART_SetConfig+0x216>
 80046e4:	2310      	movs	r3, #16
 80046e6:	77fb      	strb	r3, [r7, #31]
 80046e8:	e055      	b.n	8004796 <UART_SetConfig+0x216>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a6e      	ldr	r2, [pc, #440]	@ (80048a8 <UART_SetConfig+0x328>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d124      	bne.n	800473e <UART_SetConfig+0x1be>
 80046f4:	4b69      	ldr	r3, [pc, #420]	@ (800489c <UART_SetConfig+0x31c>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80046fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004700:	d011      	beq.n	8004726 <UART_SetConfig+0x1a6>
 8004702:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004706:	d817      	bhi.n	8004738 <UART_SetConfig+0x1b8>
 8004708:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800470c:	d011      	beq.n	8004732 <UART_SetConfig+0x1b2>
 800470e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004712:	d811      	bhi.n	8004738 <UART_SetConfig+0x1b8>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <UART_SetConfig+0x1a0>
 8004718:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471c:	d006      	beq.n	800472c <UART_SetConfig+0x1ac>
 800471e:	e00b      	b.n	8004738 <UART_SetConfig+0x1b8>
 8004720:	2300      	movs	r3, #0
 8004722:	77fb      	strb	r3, [r7, #31]
 8004724:	e037      	b.n	8004796 <UART_SetConfig+0x216>
 8004726:	2302      	movs	r3, #2
 8004728:	77fb      	strb	r3, [r7, #31]
 800472a:	e034      	b.n	8004796 <UART_SetConfig+0x216>
 800472c:	2304      	movs	r3, #4
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e031      	b.n	8004796 <UART_SetConfig+0x216>
 8004732:	2308      	movs	r3, #8
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e02e      	b.n	8004796 <UART_SetConfig+0x216>
 8004738:	2310      	movs	r3, #16
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e02b      	b.n	8004796 <UART_SetConfig+0x216>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a5a      	ldr	r2, [pc, #360]	@ (80048ac <UART_SetConfig+0x32c>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d124      	bne.n	8004792 <UART_SetConfig+0x212>
 8004748:	4b54      	ldr	r3, [pc, #336]	@ (800489c <UART_SetConfig+0x31c>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004750:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004754:	d011      	beq.n	800477a <UART_SetConfig+0x1fa>
 8004756:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800475a:	d817      	bhi.n	800478c <UART_SetConfig+0x20c>
 800475c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004760:	d011      	beq.n	8004786 <UART_SetConfig+0x206>
 8004762:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004766:	d811      	bhi.n	800478c <UART_SetConfig+0x20c>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <UART_SetConfig+0x1f4>
 800476c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004770:	d006      	beq.n	8004780 <UART_SetConfig+0x200>
 8004772:	e00b      	b.n	800478c <UART_SetConfig+0x20c>
 8004774:	2300      	movs	r3, #0
 8004776:	77fb      	strb	r3, [r7, #31]
 8004778:	e00d      	b.n	8004796 <UART_SetConfig+0x216>
 800477a:	2302      	movs	r3, #2
 800477c:	77fb      	strb	r3, [r7, #31]
 800477e:	e00a      	b.n	8004796 <UART_SetConfig+0x216>
 8004780:	2304      	movs	r3, #4
 8004782:	77fb      	strb	r3, [r7, #31]
 8004784:	e007      	b.n	8004796 <UART_SetConfig+0x216>
 8004786:	2308      	movs	r3, #8
 8004788:	77fb      	strb	r3, [r7, #31]
 800478a:	e004      	b.n	8004796 <UART_SetConfig+0x216>
 800478c:	2310      	movs	r3, #16
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e001      	b.n	8004796 <UART_SetConfig+0x216>
 8004792:	2310      	movs	r3, #16
 8004794:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800479e:	d15b      	bne.n	8004858 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d827      	bhi.n	80047f6 <UART_SetConfig+0x276>
 80047a6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <UART_SetConfig+0x22c>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047e1 	.word	0x080047e1
 80047b8:	080047f7 	.word	0x080047f7
 80047bc:	080047e7 	.word	0x080047e7
 80047c0:	080047f7 	.word	0x080047f7
 80047c4:	080047f7 	.word	0x080047f7
 80047c8:	080047f7 	.word	0x080047f7
 80047cc:	080047ef 	.word	0x080047ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d0:	f7fe f9d0 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80047d4:	61b8      	str	r0, [r7, #24]
        break;
 80047d6:	e013      	b.n	8004800 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047d8:	f7fe f9ee 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 80047dc:	61b8      	str	r0, [r7, #24]
        break;
 80047de:	e00f      	b.n	8004800 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e0:	4b33      	ldr	r3, [pc, #204]	@ (80048b0 <UART_SetConfig+0x330>)
 80047e2:	61bb      	str	r3, [r7, #24]
        break;
 80047e4:	e00c      	b.n	8004800 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047e6:	f7fe f965 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 80047ea:	61b8      	str	r0, [r7, #24]
        break;
 80047ec:	e008      	b.n	8004800 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047f2:	61bb      	str	r3, [r7, #24]
        break;
 80047f4:	e004      	b.n	8004800 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	77bb      	strb	r3, [r7, #30]
        break;
 80047fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8082 	beq.w	800490c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	005a      	lsls	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	441a      	add	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	2b0f      	cmp	r3, #15
 8004822:	d916      	bls.n	8004852 <UART_SetConfig+0x2d2>
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800482a:	d212      	bcs.n	8004852 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f023 030f 	bic.w	r3, r3, #15
 8004834:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	b29b      	uxth	r3, r3
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	b29a      	uxth	r2, r3
 8004842:	89fb      	ldrh	r3, [r7, #14]
 8004844:	4313      	orrs	r3, r2
 8004846:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	89fa      	ldrh	r2, [r7, #14]
 800484e:	60da      	str	r2, [r3, #12]
 8004850:	e05c      	b.n	800490c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	77bb      	strb	r3, [r7, #30]
 8004856:	e059      	b.n	800490c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004858:	7ffb      	ldrb	r3, [r7, #31]
 800485a:	2b08      	cmp	r3, #8
 800485c:	d835      	bhi.n	80048ca <UART_SetConfig+0x34a>
 800485e:	a201      	add	r2, pc, #4	@ (adr r2, 8004864 <UART_SetConfig+0x2e4>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004889 	.word	0x08004889
 8004868:	08004891 	.word	0x08004891
 800486c:	080048b5 	.word	0x080048b5
 8004870:	080048cb 	.word	0x080048cb
 8004874:	080048bb 	.word	0x080048bb
 8004878:	080048cb 	.word	0x080048cb
 800487c:	080048cb 	.word	0x080048cb
 8004880:	080048cb 	.word	0x080048cb
 8004884:	080048c3 	.word	0x080048c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004888:	f7fe f974 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 800488c:	61b8      	str	r0, [r7, #24]
        break;
 800488e:	e021      	b.n	80048d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004890:	f7fe f992 	bl	8002bb8 <HAL_RCC_GetPCLK2Freq>
 8004894:	61b8      	str	r0, [r7, #24]
        break;
 8004896:	e01d      	b.n	80048d4 <UART_SetConfig+0x354>
 8004898:	40013800 	.word	0x40013800
 800489c:	40021000 	.word	0x40021000
 80048a0:	40004400 	.word	0x40004400
 80048a4:	40004800 	.word	0x40004800
 80048a8:	40004c00 	.word	0x40004c00
 80048ac:	40005000 	.word	0x40005000
 80048b0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004924 <UART_SetConfig+0x3a4>)
 80048b6:	61bb      	str	r3, [r7, #24]
        break;
 80048b8:	e00c      	b.n	80048d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ba:	f7fe f8fb 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 80048be:	61b8      	str	r0, [r7, #24]
        break;
 80048c0:	e008      	b.n	80048d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048c6:	61bb      	str	r3, [r7, #24]
        break;
 80048c8:	e004      	b.n	80048d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	77bb      	strb	r3, [r7, #30]
        break;
 80048d2:	bf00      	nop
    }

    if (pclk != 0U)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d018      	beq.n	800490c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	085a      	lsrs	r2, r3, #1
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	441a      	add	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	2b0f      	cmp	r3, #15
 80048f2:	d909      	bls.n	8004908 <UART_SetConfig+0x388>
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fa:	d205      	bcs.n	8004908 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	e001      	b.n	800490c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004918:	7fbb      	ldrb	r3, [r7, #30]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	007a1200 	.word	0x007a1200

08004928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00a      	beq.n	8004952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01a      	beq.n	8004a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a26:	d10a      	bne.n	8004a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	605a      	str	r2, [r3, #4]
  }
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b098      	sub	sp, #96	@ 0x60
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a7c:	f7fc f9b6 	bl	8000dec <HAL_GetTick>
 8004a80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0308 	and.w	r3, r3, #8
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d12e      	bne.n	8004aee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f88c 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d021      	beq.n	8004aee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e6      	bne.n	8004aaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e062      	b.n	8004bb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d149      	bne.n	8004b90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f856 	bl	8004bbc <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d03c      	beq.n	8004b90 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	623b      	str	r3, [r7, #32]
   return(result);
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0301 	bic.w	r3, r3, #1
 8004b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b68:	61fa      	str	r2, [r7, #28]
 8004b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	69b9      	ldr	r1, [r7, #24]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	617b      	str	r3, [r7, #20]
   return(result);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e5      	bne.n	8004b48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e011      	b.n	8004bb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3758      	adds	r7, #88	@ 0x58
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	603b      	str	r3, [r7, #0]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bcc:	e04f      	b.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bd4:	d04b      	beq.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd6:	f7fc f909 	bl	8000dec <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <UART_WaitOnFlagUntilTimeout+0x30>
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e04e      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d037      	beq.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b80      	cmp	r3, #128	@ 0x80
 8004c02:	d034      	beq.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b40      	cmp	r3, #64	@ 0x40
 8004c08:	d031      	beq.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f003 0308 	and.w	r3, r3, #8
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d110      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f838 	bl	8004c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e029      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c48:	d111      	bne.n	8004c6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f81e 	bl	8004c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e00f      	b.n	8004c8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4013      	ands	r3, r2
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	bf0c      	ite	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	2300      	movne	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d0a0      	beq.n	8004bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b095      	sub	sp, #84	@ 0x54
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e6      	bne.n	8004c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3308      	adds	r3, #8
 8004cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3308      	adds	r3, #8
 8004cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e5      	bne.n	8004cd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d118      	bne.n	8004d3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f023 0310 	bic.w	r3, r3, #16
 8004d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6979      	ldr	r1, [r7, #20]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	613b      	str	r3, [r7, #16]
   return(result);
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e6      	bne.n	8004d0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d52:	bf00      	nop
 8004d54:	3754      	adds	r7, #84	@ 0x54
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d66:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004d6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <memset>:
 8004dd0:	4402      	add	r2, r0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d100      	bne.n	8004dda <memset+0xa>
 8004dd8:	4770      	bx	lr
 8004dda:	f803 1b01 	strb.w	r1, [r3], #1
 8004dde:	e7f9      	b.n	8004dd4 <memset+0x4>

08004de0 <__libc_init_array>:
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	4d0d      	ldr	r5, [pc, #52]	@ (8004e18 <__libc_init_array+0x38>)
 8004de4:	4c0d      	ldr	r4, [pc, #52]	@ (8004e1c <__libc_init_array+0x3c>)
 8004de6:	1b64      	subs	r4, r4, r5
 8004de8:	10a4      	asrs	r4, r4, #2
 8004dea:	2600      	movs	r6, #0
 8004dec:	42a6      	cmp	r6, r4
 8004dee:	d109      	bne.n	8004e04 <__libc_init_array+0x24>
 8004df0:	4d0b      	ldr	r5, [pc, #44]	@ (8004e20 <__libc_init_array+0x40>)
 8004df2:	4c0c      	ldr	r4, [pc, #48]	@ (8004e24 <__libc_init_array+0x44>)
 8004df4:	f000 f818 	bl	8004e28 <_init>
 8004df8:	1b64      	subs	r4, r4, r5
 8004dfa:	10a4      	asrs	r4, r4, #2
 8004dfc:	2600      	movs	r6, #0
 8004dfe:	42a6      	cmp	r6, r4
 8004e00:	d105      	bne.n	8004e0e <__libc_init_array+0x2e>
 8004e02:	bd70      	pop	{r4, r5, r6, pc}
 8004e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e08:	4798      	blx	r3
 8004e0a:	3601      	adds	r6, #1
 8004e0c:	e7ee      	b.n	8004dec <__libc_init_array+0xc>
 8004e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e12:	4798      	blx	r3
 8004e14:	3601      	adds	r6, #1
 8004e16:	e7f2      	b.n	8004dfe <__libc_init_array+0x1e>
 8004e18:	08004e78 	.word	0x08004e78
 8004e1c:	08004e78 	.word	0x08004e78
 8004e20:	08004e78 	.word	0x08004e78
 8004e24:	08004e7c 	.word	0x08004e7c

08004e28 <_init>:
 8004e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2a:	bf00      	nop
 8004e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2e:	bc08      	pop	{r3}
 8004e30:	469e      	mov	lr, r3
 8004e32:	4770      	bx	lr

08004e34 <_fini>:
 8004e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e36:	bf00      	nop
 8004e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3a:	bc08      	pop	{r3}
 8004e3c:	469e      	mov	lr, r3
 8004e3e:	4770      	bx	lr


Laser_Projector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005360  08005360  00006360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005398  08005398  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005398  08005398  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005398  08005398  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800539c  0800539c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080053a0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          000005f8  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000604  20000604  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017fae  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ded  00000000  00000000  0001efea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001520  00000000  00000000  00021dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109a  00000000  00000000  000232f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7f2  00000000  00000000  00024392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a644  00000000  00000000  00043b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf406  00000000  00000000  0005e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011d5ce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b20  00000000  00000000  0011d614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00123134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005348 	.word	0x08005348

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005348 	.word	0x08005348

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 feaf 	bl	8000f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f825 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fb29 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 fb09 	bl	80007f0 <MX_DMA_Init>
  MX_I2C1_Init();
 80001de:	f000 f8af 	bl	8000340 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001e2:	f000 f8ed 	bl	80003c0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e6:	f000 fae1 	bl	80007ac <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80001ea:	f000 f9f7 	bl	80005dc <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001ee:	f000 fa7d 	bl	80006ec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80001f2:	f000 f923 	bl	800043c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80001f6:	f000 faa9 	bl	800074c <MX_USART2_UART_Init>
  MX_DAC_Init();
 80001fa:	f000 f877 	bl	80002ec <MX_DAC_Init>
  MX_TIM7_Init();
 80001fe:	f000 fa3f 	bl	8000680 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000202:	2100      	movs	r1, #0
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <main+0x50>)
 8000206:	f003 fa9d 	bl	8003744 <HAL_TIM_PWM_Start>
  char value = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	71fb      	strb	r3, [r7, #7]
  TIM1->CCR1 = value;
 800020e:	4a03      	ldr	r2, [pc, #12]	@ (800021c <main+0x54>)
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	6353      	str	r3, [r2, #52]	@ 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000214:	bf00      	nop
 8000216:	e7fd      	b.n	8000214 <main+0x4c>
 8000218:	20000138 	.word	0x20000138
 800021c:	40012c00 	.word	0x40012c00

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b09e      	sub	sp, #120	@ 0x78
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800022a:	2228      	movs	r2, #40	@ 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f005 f85e 	bl	80052f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]
 8000242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000244:	463b      	mov	r3, r7
 8000246:	223c      	movs	r2, #60	@ 0x3c
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f005 f850 	bl	80052f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000250:	2303      	movs	r3, #3
 8000252:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000254:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000258:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000270:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000274:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800027a:	4618      	mov	r0, r3
 800027c:	f001 fcf0 	bl	8001c60 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000286:	f000 fb4f 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2302      	movs	r3, #2
 8000290:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800029a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fd18 	bl	8002cdc <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002b2:	f000 fb39 	bl	8000928 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80002b6:	4b0c      	ldr	r3, [pc, #48]	@ (80002e8 <SystemClock_Config+0xc8>)
 80002b8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002c2:	2300      	movs	r3, #0
 80002c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002c6:	2300      	movs	r3, #0
 80002c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002ca:	2300      	movs	r3, #0
 80002cc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ce:	463b      	mov	r3, r7
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 ff23 	bl	800311c <HAL_RCCEx_PeriphCLKConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80002dc:	f000 fb24 	bl	8000928 <Error_Handler>
  }
}
 80002e0:	bf00      	nop
 80002e2:	3778      	adds	r7, #120	@ 0x78
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	00021023 	.word	0x00021023

080002ec <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80002fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_DAC_Init+0x4c>)
 80002fe:	4a0f      	ldr	r2, [pc, #60]	@ (800033c <MX_DAC_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000302:	480d      	ldr	r0, [pc, #52]	@ (8000338 <MX_DAC_Init+0x4c>)
 8000304:	f000 ff8b 	bl	800121e <HAL_DAC_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800030e:	f000 fb0b 	bl	8000928 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8000312:	2314      	movs	r3, #20
 8000314:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	4619      	mov	r1, r3
 8000320:	4805      	ldr	r0, [pc, #20]	@ (8000338 <MX_DAC_Init+0x4c>)
 8000322:	f000 ff9e 	bl	8001262 <HAL_DAC_ConfigChannel>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 800032c:	f000 fafc 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000028 	.word	0x20000028
 800033c:	40007400 	.word	0x40007400

08000340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	@ (80003b8 <MX_I2C1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800034a:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800034c:	4a1b      	ldr	r2, [pc, #108]	@ (80003bc <MX_I2C1_Init+0x7c>)
 800034e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000350:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000356:	4b17      	ldr	r3, [pc, #92]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000358:	2201      	movs	r2, #1
 800035a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000362:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000368:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036e:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000374:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037a:	480e      	ldr	r0, [pc, #56]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800037c:	f001 fa76 	bl	800186c <HAL_I2C_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000386:	f000 facf 	bl	8000928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038a:	2100      	movs	r1, #0
 800038c:	4809      	ldr	r0, [pc, #36]	@ (80003b4 <MX_I2C1_Init+0x74>)
 800038e:	f001 fb08 	bl	80019a2 <HAL_I2CEx_ConfigAnalogFilter>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000398:	f000 fac6 	bl	8000928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800039c:	2100      	movs	r1, #0
 800039e:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_I2C1_Init+0x74>)
 80003a0:	f001 fb4a 	bl	8001a38 <HAL_I2CEx_ConfigDigitalFilter>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003aa:	f000 fabd 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000080 	.word	0x20000080
 80003b8:	40005400 	.word	0x40005400
 80003bc:	2000090e 	.word	0x2000090e

080003c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000438 <MX_SPI1_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d2:	4b18      	ldr	r3, [pc, #96]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003d8:	4b16      	ldr	r3, [pc, #88]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003da:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e0:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e6:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ec:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003f6:	2208      	movs	r2, #8
 80003f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000400:	4b0c      	ldr	r3, [pc, #48]	@ (8000434 <MX_SPI1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <MX_SPI1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800040c:	4b09      	ldr	r3, [pc, #36]	@ (8000434 <MX_SPI1_Init+0x74>)
 800040e:	2207      	movs	r2, #7
 8000410:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000412:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <MX_SPI1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000418:	4b06      	ldr	r3, [pc, #24]	@ (8000434 <MX_SPI1_Init+0x74>)
 800041a:	2208      	movs	r2, #8
 800041c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800041e:	4805      	ldr	r0, [pc, #20]	@ (8000434 <MX_SPI1_Init+0x74>)
 8000420:	f003 f82c 	bl	800347c <HAL_SPI_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800042a:	f000 fa7d 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000d4 	.word	0x200000d4
 8000438:	40013000 	.word	0x40013000

0800043c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b09a      	sub	sp, #104	@ 0x68
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000442:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000450:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800045c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
 800046c:	615a      	str	r2, [r3, #20]
 800046e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	222c      	movs	r2, #44	@ 0x2c
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f004 ff3a 	bl	80052f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800047c:	4b55      	ldr	r3, [pc, #340]	@ (80005d4 <MX_TIM1_Init+0x198>)
 800047e:	4a56      	ldr	r2, [pc, #344]	@ (80005d8 <MX_TIM1_Init+0x19c>)
 8000480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000482:	4b54      	ldr	r3, [pc, #336]	@ (80005d4 <MX_TIM1_Init+0x198>)
 8000484:	2247      	movs	r2, #71	@ 0x47
 8000486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000488:	4b52      	ldr	r3, [pc, #328]	@ (80005d4 <MX_TIM1_Init+0x198>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 800048e:	4b51      	ldr	r3, [pc, #324]	@ (80005d4 <MX_TIM1_Init+0x198>)
 8000490:	2201      	movs	r2, #1
 8000492:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000494:	4b4f      	ldr	r3, [pc, #316]	@ (80005d4 <MX_TIM1_Init+0x198>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800049a:	4b4e      	ldr	r3, [pc, #312]	@ (80005d4 <MX_TIM1_Init+0x198>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a0:	4b4c      	ldr	r3, [pc, #304]	@ (80005d4 <MX_TIM1_Init+0x198>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004a6:	484b      	ldr	r0, [pc, #300]	@ (80005d4 <MX_TIM1_Init+0x198>)
 80004a8:	f003 f893 	bl	80035d2 <HAL_TIM_Base_Init>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80004b2:	f000 fa39 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004ba:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004bc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004c0:	4619      	mov	r1, r3
 80004c2:	4844      	ldr	r0, [pc, #272]	@ (80005d4 <MX_TIM1_Init+0x198>)
 80004c4:	f003 fc54 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80004ce:	f000 fa2b 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d2:	4840      	ldr	r0, [pc, #256]	@ (80005d4 <MX_TIM1_Init+0x198>)
 80004d4:	f003 f8d4 	bl	8003680 <HAL_TIM_PWM_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80004de:	f000 fa23 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e2:	2300      	movs	r3, #0
 80004e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004e6:	2300      	movs	r3, #0
 80004e8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80004f2:	4619      	mov	r1, r3
 80004f4:	4837      	ldr	r0, [pc, #220]	@ (80005d4 <MX_TIM1_Init+0x198>)
 80004f6:	f004 f969 	bl	80047cc <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000500:	f000 fa12 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000504:	2360      	movs	r3, #96	@ 0x60
 8000506:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800050c:	2300      	movs	r3, #0
 800050e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000510:	2300      	movs	r3, #0
 8000512:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000518:	2300      	movs	r3, #0
 800051a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800051c:	2300      	movs	r3, #0
 800051e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000520:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000524:	2200      	movs	r2, #0
 8000526:	4619      	mov	r1, r3
 8000528:	482a      	ldr	r0, [pc, #168]	@ (80005d4 <MX_TIM1_Init+0x198>)
 800052a:	f003 fb0d 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000534:	f000 f9f8 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000538:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800053c:	2204      	movs	r2, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4824      	ldr	r0, [pc, #144]	@ (80005d4 <MX_TIM1_Init+0x198>)
 8000542:	f003 fb01 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800054c:	f000 f9ec 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000550:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000554:	2208      	movs	r2, #8
 8000556:	4619      	mov	r1, r3
 8000558:	481e      	ldr	r0, [pc, #120]	@ (80005d4 <MX_TIM1_Init+0x198>)
 800055a:	f003 faf5 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000564:	f000 f9e0 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000568:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800056c:	220c      	movs	r2, #12
 800056e:	4619      	mov	r1, r3
 8000570:	4818      	ldr	r0, [pc, #96]	@ (80005d4 <MX_TIM1_Init+0x198>)
 8000572:	f003 fae9 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800057c:	f000 f9d4 	bl	8000928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000598:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4619      	mov	r1, r3
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <MX_TIM1_Init+0x198>)
 80005b6:	f004 f989 	bl	80048cc <HAL_TIMEx_ConfigBreakDeadTime>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80005c0:	f000 f9b2 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <MX_TIM1_Init+0x198>)
 80005c6:	f000 fb43 	bl	8000c50 <HAL_TIM_MspPostInit>

}
 80005ca:	bf00      	nop
 80005cc:	3768      	adds	r7, #104	@ 0x68
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000138 	.word	0x20000138
 80005d8:	40012c00 	.word	0x40012c00

080005dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005fa:	4b20      	ldr	r3, [pc, #128]	@ (800067c <MX_TIM2_Init+0xa0>)
 80005fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000600:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000602:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <MX_TIM2_Init+0xa0>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <MX_TIM2_Init+0xa0>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <MX_TIM2_Init+0xa0>)
 8000610:	2214      	movs	r2, #20
 8000612:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <MX_TIM2_Init+0xa0>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061a:	4b18      	ldr	r3, [pc, #96]	@ (800067c <MX_TIM2_Init+0xa0>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000620:	4816      	ldr	r0, [pc, #88]	@ (800067c <MX_TIM2_Init+0xa0>)
 8000622:	f002 ffd6 	bl	80035d2 <HAL_TIM_Base_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800062c:	f000 f97c 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000634:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 15;
 800063e:	230f      	movs	r3, #15
 8000640:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	480c      	ldr	r0, [pc, #48]	@ (800067c <MX_TIM2_Init+0xa0>)
 800064a:	f003 fb91 	bl	8003d70 <HAL_TIM_ConfigClockSource>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000654:	f000 f968 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_TIM2_Init+0xa0>)
 8000666:	f004 f8b1 	bl	80047cc <HAL_TIMEx_MasterConfigSynchronization>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000670:	f000 f95a 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000184 	.word	0x20000184

08000680 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_TIM7_Init+0x64>)
 8000692:	4a15      	ldr	r2, [pc, #84]	@ (80006e8 <MX_TIM7_Init+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 8000696:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <MX_TIM7_Init+0x64>)
 8000698:	2247      	movs	r2, #71	@ 0x47
 800069a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_TIM7_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1 ;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_TIM7_Init+0x64>)
 80006a4:	2209      	movs	r2, #9
 80006a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <MX_TIM7_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006ae:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <MX_TIM7_Init+0x64>)
 80006b0:	f002 ff8f 	bl	80035d2 <HAL_TIM_Base_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80006ba:	f000 f935 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80006be:	2320      	movs	r3, #32
 80006c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <MX_TIM7_Init+0x64>)
 80006cc:	f004 f87e 	bl	80047cc <HAL_TIMEx_MasterConfigSynchronization>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80006d6:	f000 f927 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200001d0 	.word	0x200001d0
 80006e8:	40001400 	.word	0x40001400

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <MX_USART1_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 80006f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_USART1_UART_Init+0x58>)
 8000730:	f004 f968 	bl	8004a04 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f8f5 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000021c 	.word	0x2000021c
 8000748:	40013800 	.word	0x40013800

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <MX_USART2_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000758:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000790:	f004 f938 	bl	8004a04 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 f8c5 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002a4 	.word	0x200002a4
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <MX_USB_PCD_Init+0x3c>)
 80007b2:	4a0e      	ldr	r2, [pc, #56]	@ (80007ec <MX_USB_PCD_Init+0x40>)
 80007b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USB_PCD_Init+0x3c>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <MX_USB_PCD_Init+0x3c>)
 80007be:	2202      	movs	r2, #2
 80007c0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007c2:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USB_PCD_Init+0x3c>)
 80007c4:	2202      	movs	r2, #2
 80007c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007c8:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <MX_USB_PCD_Init+0x3c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007ce:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USB_PCD_Init+0x3c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <MX_USB_PCD_Init+0x3c>)
 80007d6:	f001 f97b 	bl	8001ad0 <HAL_PCD_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80007e0:	f000 f8a2 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000032c 	.word	0x2000032c
 80007ec:	40005c00 	.word	0x40005c00

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_DMA_Init+0x38>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000828 <MX_DMA_Init+0x38>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_DMA_Init+0x38>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	200d      	movs	r0, #13
 8000814:	f000 fccd 	bl	80011b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000818:	200d      	movs	r0, #13
 800081a:	f000 fce6 	bl	80011ea <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	4b37      	ldr	r3, [pc, #220]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a36      	ldr	r2, [pc, #216]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000848:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800084c:	6153      	str	r3, [r2, #20]
 800084e:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <MX_GPIO_Init+0xf4>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a30      	ldr	r2, [pc, #192]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000860:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000872:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a2a      	ldr	r2, [pc, #168]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000878:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <MX_GPIO_Init+0xf4>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a24      	ldr	r2, [pc, #144]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <MX_GPIO_Init+0xf4>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000920 <MX_GPIO_Init+0xf4>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000920 <MX_GPIO_Init+0xf4>)
 80008a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_GPIO_Init+0xf4>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD5_Pin|LD9_Pin
 80008ba:	2200      	movs	r2, #0
 80008bc:	f249 5108 	movw	r1, #38152	@ 0x9508
 80008c0:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_GPIO_Init+0xf8>)
 80008c2:	f000 ffbb 	bl	800183c <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80008c6:	2337      	movs	r3, #55	@ 0x37
 80008c8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	@ (8000924 <MX_GPIO_Init+0xf8>)
 80008dc:	f000 fe34 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD5_Pin LD9_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD5_Pin|LD9_Pin
 80008e0:	f249 5308 	movw	r3, #38152	@ 0x9508
 80008e4:	617b      	str	r3, [r7, #20]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	480a      	ldr	r0, [pc, #40]	@ (8000924 <MX_GPIO_Init+0xf8>)
 80008fa:	f000 fe25 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000914:	f000 fe18 	bl	8001548 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	@ 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40021000 	.word	0x40021000
 8000924:	48001000 	.word	0x48001000

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <Error_Handler+0x8>

08000934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <HAL_MspInit+0x44>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	4a0e      	ldr	r2, [pc, #56]	@ (8000978 <HAL_MspInit+0x44>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6193      	str	r3, [r2, #24]
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <HAL_MspInit+0x44>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x44>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x44>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	61d3      	str	r3, [r2, #28]
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x44>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 fc16 	bl	800119c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000

0800097c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a2c      	ldr	r2, [pc, #176]	@ (8000a4c <HAL_DAC_MspInit+0xd0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d152      	bne.n	8000a44 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800099e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a50 <HAL_DAC_MspInit+0xd4>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000a50 <HAL_DAC_MspInit+0xd4>)
 80009a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <HAL_DAC_MspInit+0xd4>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	4b26      	ldr	r3, [pc, #152]	@ (8000a50 <HAL_DAC_MspInit+0xd4>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a25      	ldr	r2, [pc, #148]	@ (8000a50 <HAL_DAC_MspInit+0xd4>)
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <HAL_DAC_MspInit+0xd4>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009ce:	2310      	movs	r3, #16
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e4:	f000 fdb0 	bl	8001548 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 80009ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <HAL_DAC_MspInit+0xdc>)
 80009ec:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 80009f0:	2210      	movs	r2, #16
 80009f2:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 8000a02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a06:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 8000a0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a0e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000a10:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 8000a12:	2220      	movs	r2, #32
 8000a14:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a16:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000a1c:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 8000a1e:	f000 fc6d 	bl	80012fc <HAL_DMA_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8000a28:	f7ff ff7e 	bl	8000928 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_DAC_MspInit+0xe0>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_DAC_MspInit+0xe0>)
 8000a32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a36:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a06      	ldr	r2, [pc, #24]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	4a05      	ldr	r2, [pc, #20]	@ (8000a54 <HAL_DAC_MspInit+0xd8>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	@ 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40007400 	.word	0x40007400
 8000a50:	40021000 	.word	0x40021000
 8000a54:	2000003c 	.word	0x2000003c
 8000a58:	40020030 	.word	0x40020030
 8000a5c:	40010000 	.word	0x40010000

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	@ 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <HAL_I2C_MspInit+0x7c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d127      	bne.n	8000ad2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a16      	ldr	r2, [pc, #88]	@ (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a9a:	23c0      	movs	r3, #192	@ 0xc0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480b      	ldr	r0, [pc, #44]	@ (8000ae4 <HAL_I2C_MspInit+0x84>)
 8000ab6:	f000 fd47 	bl	8001548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a08      	ldr	r2, [pc, #32]	@ (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000ac0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	@ 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	48000400 	.word	0x48000400

08000ae8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <HAL_SPI_MspInit+0x7c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d128      	bne.n	8000b5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b0a:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4a16      	ldr	r2, [pc, #88]	@ (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b14:	6193      	str	r3, [r2, #24]
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000b3a:	23e0      	movs	r3, #224	@ 0xe0
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b58:	f000 fcf6 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40013000 	.word	0x40013000
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a2e      	ldr	r2, [pc, #184]	@ (8000c44 <HAL_TIM_Base_MspInit+0xd8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d10c      	bne.n	8000ba8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	4a2d      	ldr	r2, [pc, #180]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000b94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b98:	6193      	str	r3, [r2, #24]
 8000b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000ba6:	e048      	b.n	8000c3a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb0:	d132      	bne.n	8000c18 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb2:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a24      	ldr	r2, [pc, #144]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b22      	ldr	r3, [pc, #136]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a1e      	ldr	r2, [pc, #120]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000be2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c02:	f000 fca1 	bl	8001548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	201c      	movs	r0, #28
 8000c0c:	f000 fad1 	bl	80011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c10:	201c      	movs	r0, #28
 8000c12:	f000 faea 	bl	80011ea <HAL_NVIC_EnableIRQ>
}
 8000c16:	e010      	b.n	8000c3a <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM7)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c4c <HAL_TIM_Base_MspInit+0xe0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10b      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_TIM_Base_MspInit+0xdc>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 0320 	and.w	r3, r3, #32
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
}
 8000c3a:	bf00      	nop
 8000c3c:	3730      	adds	r7, #48	@ 0x30
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40012c00 	.word	0x40012c00
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40001400 	.word	0x40001400

08000c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a11      	ldr	r2, [pc, #68]	@ (8000cb4 <HAL_TIM_MspPostInit+0x64>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d11c      	bne.n	8000cac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_TIM_MspPostInit+0x68>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000c8a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8000c8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <HAL_TIM_MspPostInit+0x6c>)
 8000ca8:	f000 fc4e 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40012c00 	.word	0x40012c00
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	48001000 	.word	0x48001000

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	@ 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8000d98 <HAL_UART_MspInit+0xd8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d128      	bne.n	8000d34 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cec:	6193      	str	r3, [r2, #24]
 8000cee:	4b2b      	ldr	r3, [pc, #172]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	4b28      	ldr	r3, [pc, #160]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a27      	ldr	r2, [pc, #156]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000d00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000d04:	6153      	str	r3, [r2, #20]
 8000d06:	4b25      	ldr	r3, [pc, #148]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	2330      	movs	r3, #48	@ 0x30
 8000d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d22:	2307      	movs	r3, #7
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481c      	ldr	r0, [pc, #112]	@ (8000da0 <HAL_UART_MspInit+0xe0>)
 8000d2e:	f000 fc0b 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d32:	e02d      	b.n	8000d90 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1a      	ldr	r2, [pc, #104]	@ (8000da4 <HAL_UART_MspInit+0xe4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a16      	ldr	r2, [pc, #88]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	4a10      	ldr	r2, [pc, #64]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d60:	6153      	str	r3, [r2, #20]
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_UART_MspInit+0xdc>)
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6e:	230c      	movs	r3, #12
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7e:	2307      	movs	r3, #7
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8c:	f000 fbdc 	bl	8001548 <HAL_GPIO_Init>
}
 8000d90:	bf00      	nop
 8000d92:	3730      	adds	r7, #48	@ 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40013800 	.word	0x40013800
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000800 	.word	0x48000800
 8000da4:	40004400 	.word	0x40004400

08000da8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	@ 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a18      	ldr	r2, [pc, #96]	@ (8000e28 <HAL_PCD_MspInit+0x80>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d129      	bne.n	8000e1e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b18      	ldr	r3, [pc, #96]	@ (8000e2c <HAL_PCD_MspInit+0x84>)
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	4a17      	ldr	r2, [pc, #92]	@ (8000e2c <HAL_PCD_MspInit+0x84>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd4:	6153      	str	r3, [r2, #20]
 8000dd6:	4b15      	ldr	r3, [pc, #84]	@ (8000e2c <HAL_PCD_MspInit+0x84>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000de2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000df4:	230e      	movs	r3, #14
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e02:	f000 fba1 	bl	8001548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_PCD_MspInit+0x84>)
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <HAL_PCD_MspInit+0x84>)
 8000e0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e10:	61d3      	str	r3, [r2, #28]
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_PCD_MspInit+0x84>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40005c00 	.word	0x40005c00
 8000e2c:	40021000 	.word	0x40021000

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <NMI_Handler+0x4>

08000e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <HardFault_Handler+0x4>

08000e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <MemManage_Handler+0x4>

08000e48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e86:	f000 f899 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <DMA1_Channel3_IRQHandler+0x10>)
 8000e96:	f000 fa78 	bl	800138a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000003c 	.word	0x2000003c

08000ea4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM2_IRQHandler+0x10>)
 8000eaa:	f002 fd4b 	bl	8003944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000184 	.word	0x20000184

08000eb8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <SystemInit+0x20>)
 8000ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec2:	4a05      	ldr	r2, [pc, #20]	@ (8000ed8 <SystemInit+0x20>)
 8000ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f14 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee0:	f7ff ffea 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ee6:	490d      	ldr	r1, [pc, #52]	@ (8000f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <LoopForever+0xe>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000efc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f28 <LoopForever+0x16>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0a:	f004 f9f9 	bl	8005300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f0e:	f7ff f95b 	bl	80001c8 <main>

08000f12 <LoopForever>:

LoopForever:
    b LoopForever
 8000f12:	e7fe      	b.n	8000f12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f14:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f20:	080053a0 	.word	0x080053a0
  ldr r2, =_sbss
 8000f24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f28:	20000604 	.word	0x20000604

08000f2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f2c:	e7fe      	b.n	8000f2c <ADC1_2_IRQHandler>
	...

08000f30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <HAL_Init+0x28>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	@ (8000f58 <HAL_Init+0x28>)
 8000f3a:	f043 0310 	orr.w	r3, r3, #16
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f92b 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fcf2 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	@ (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f943 	bl	8001206 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f98:	f000 f90b 	bl	80011b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	@ (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000600 	.word	0x20000600

08000fe4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000600 	.word	0x20000600

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4907      	ldr	r1, [pc, #28]	@ (8001098 <__NVIC_EnableIRQ+0x38>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	@ (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	@ 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	@ (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff29 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff3e 	bl	8001044 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff8e 	bl	80010f0 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5d 	bl	800109c <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff31 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffa2 	bl	8001158 <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e014      	b.n	800125a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	791b      	ldrb	r3, [r3, #4]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d105      	bne.n	8001246 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fb9b 	bl	800097c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2202      	movs	r2, #2
 800124a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001262:	b480      	push	{r7}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	60b9      	str	r1, [r7, #8]
 800126c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	795b      	ldrb	r3, [r3, #5]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d101      	bne.n	8001282 <HAL_DAC_ConfigChannel+0x20>
 800127e:	2302      	movs	r3, #2
 8001280:	e036      	b.n	80012f0 <HAL_DAC_ConfigChannel+0x8e>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2201      	movs	r2, #1
 8001286:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2202      	movs	r2, #2
 800128c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001296:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4013      	ands	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	4313      	orrs	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	22c0      	movs	r2, #192	@ 0xc0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43da      	mvns	r2, r3
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	400a      	ands	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e037      	b.n	8001382 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2202      	movs	r2, #2
 8001316:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001328:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800132c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f8b3 	bl	80014d0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	2204      	movs	r2, #4
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d024      	beq.n	80013fc <HAL_DMA_IRQHandler+0x72>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01f      	beq.n	80013fc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d107      	bne.n	80013da <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0204 	bic.w	r2, r2, #4
 80013d8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013e2:	2104      	movs	r1, #4
 80013e4:	fa01 f202 	lsl.w	r2, r1, r2
 80013e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d06a      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80013fa:	e065      	b.n	80014c8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	2202      	movs	r2, #2
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02c      	beq.n	8001466 <HAL_DMA_IRQHandler+0xdc>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d027      	beq.n	8001466 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0320 	and.w	r3, r3, #32
 8001420:	2b00      	cmp	r3, #0
 8001422:	d10b      	bne.n	800143c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 020a 	bic.w	r2, r2, #10
 8001432:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001444:	2102      	movs	r1, #2
 8001446:	fa01 f202 	lsl.w	r2, r1, r2
 800144a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001458:	2b00      	cmp	r3, #0
 800145a:	d035      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001464:	e030      	b.n	80014c8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	2208      	movs	r2, #8
 800146c:	409a      	lsls	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d028      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x13e>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f003 0308 	and.w	r3, r3, #8
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 020e 	bic.w	r2, r2, #14
 800148e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001498:	2101      	movs	r1, #1
 800149a:	fa01 f202 	lsl.w	r2, r1, r2
 800149e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	4798      	blx	r3
    }
  }
}
 80014c6:	e7ff      	b.n	80014c8 <HAL_DMA_IRQHandler+0x13e>
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <DMA_CalcBaseAndBitshift+0x60>)
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d80f      	bhi.n	8001504 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <DMA_CalcBaseAndBitshift+0x64>)
 80014ec:	4413      	add	r3, r2
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <DMA_CalcBaseAndBitshift+0x68>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	009a      	lsls	r2, r3, #2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a0f      	ldr	r2, [pc, #60]	@ (800153c <DMA_CalcBaseAndBitshift+0x6c>)
 8001500:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001502:	e00e      	b.n	8001522 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <DMA_CalcBaseAndBitshift+0x70>)
 800150c:	4413      	add	r3, r2
 800150e:	4a0a      	ldr	r2, [pc, #40]	@ (8001538 <DMA_CalcBaseAndBitshift+0x68>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	091b      	lsrs	r3, r3, #4
 8001516:	009a      	lsls	r2, r3, #2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a09      	ldr	r2, [pc, #36]	@ (8001544 <DMA_CalcBaseAndBitshift+0x74>)
 8001520:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40020407 	.word	0x40020407
 8001534:	bffdfff8 	.word	0xbffdfff8
 8001538:	cccccccd 	.word	0xcccccccd
 800153c:	40020000 	.word	0x40020000
 8001540:	bffdfbf8 	.word	0xbffdfbf8
 8001544:	40020400 	.word	0x40020400

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e154      	b.n	8001802 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2101      	movs	r1, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa01 f303 	lsl.w	r3, r1, r3
 8001564:	4013      	ands	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8146 	beq.w	80017fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d005      	beq.n	8001588 <HAL_GPIO_Init+0x40>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d130      	bne.n	80015ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	2203      	movs	r2, #3
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015be:	2201      	movs	r2, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	f003 0201 	and.w	r2, r3, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d017      	beq.n	8001626 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d123      	bne.n	800167a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	220f      	movs	r2, #15
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f003 0307 	and.w	r3, r3, #7
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3208      	adds	r2, #8
 8001674:	6939      	ldr	r1, [r7, #16]
 8001676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4013      	ands	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0203 	and.w	r2, r3, #3
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80a0 	beq.w	80017fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016bc:	4b58      	ldr	r3, [pc, #352]	@ (8001820 <HAL_GPIO_Init+0x2d8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a57      	ldr	r2, [pc, #348]	@ (8001820 <HAL_GPIO_Init+0x2d8>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b55      	ldr	r3, [pc, #340]	@ (8001820 <HAL_GPIO_Init+0x2d8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016d4:	4a53      	ldr	r2, [pc, #332]	@ (8001824 <HAL_GPIO_Init+0x2dc>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80016fe:	d019      	beq.n	8001734 <HAL_GPIO_Init+0x1ec>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a49      	ldr	r2, [pc, #292]	@ (8001828 <HAL_GPIO_Init+0x2e0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_GPIO_Init+0x1e8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a48      	ldr	r2, [pc, #288]	@ (800182c <HAL_GPIO_Init+0x2e4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_Init+0x1e4>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a47      	ldr	r2, [pc, #284]	@ (8001830 <HAL_GPIO_Init+0x2e8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x1e0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a46      	ldr	r2, [pc, #280]	@ (8001834 <HAL_GPIO_Init+0x2ec>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_Init+0x1dc>
 8001720:	2304      	movs	r3, #4
 8001722:	e008      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001724:	2305      	movs	r3, #5
 8001726:	e006      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001728:	2303      	movs	r3, #3
 800172a:	e004      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 800172c:	2302      	movs	r3, #2
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_GPIO_Init+0x1ee>
 8001734:	2300      	movs	r3, #0
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	f002 0203 	and.w	r2, r2, #3
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	4093      	lsls	r3, r2
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001746:	4937      	ldr	r1, [pc, #220]	@ (8001824 <HAL_GPIO_Init+0x2dc>)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001754:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	43db      	mvns	r3, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	4313      	orrs	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001778:	4a2f      	ldr	r2, [pc, #188]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800177e:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017a2:	4a25      	ldr	r2, [pc, #148]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017a8:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017f6:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <HAL_GPIO_Init+0x2f0>)
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3301      	adds	r3, #1
 8001800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	f47f aea3 	bne.w	8001558 <HAL_GPIO_Init+0x10>
  }
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	371c      	adds	r7, #28
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40021000 	.word	0x40021000
 8001824:	40010000 	.word	0x40010000
 8001828:	48000400 	.word	0x48000400
 800182c:	48000800 	.word	0x48000800
 8001830:	48000c00 	.word	0x48000c00
 8001834:	48001000 	.word	0x48001000
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001858:	e002      	b.n	8001860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e08d      	b.n	800199a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff f8e4 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2224      	movs	r2, #36	@ 0x24
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80018bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d107      	bne.n	80018e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e006      	b.n	80018f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80018f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d108      	bne.n	800190e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	e007      	b.n	800191e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800192c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001930:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001940:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691a      	ldr	r2, [r3, #16]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	69d9      	ldr	r1, [r3, #28]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1a      	ldr	r2, [r3, #32]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2220      	movs	r2, #32
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d138      	bne.n	8001a2a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e032      	b.n	8001a2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2224      	movs	r2, #36	@ 0x24
 80019d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80019f4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2220      	movs	r2, #32
 8001a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a2a:	2302      	movs	r3, #2
  }
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d139      	bne.n	8001ac2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e033      	b.n	8001ac4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2224      	movs	r2, #36	@ 0x24
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0201 	orr.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e000      	b.n	8001ac4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ac2:	2302      	movs	r3, #2
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0b9      	b.n	8001c56 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff f956 	bl	8000da8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2203      	movs	r2, #3
 8001b00:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 fbb8 	bl	800527e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	e03e      	b.n	8001b92 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3311      	adds	r3, #17
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	3310      	adds	r3, #16
 8001b38:	7bfa      	ldrb	r2, [r7, #15]
 8001b3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b3c:	7bfa      	ldrb	r2, [r7, #15]
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3313      	adds	r3, #19
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b50:	7bfa      	ldrb	r2, [r7, #15]
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3320      	adds	r3, #32
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3324      	adds	r3, #36	@ 0x24
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	791b      	ldrb	r3, [r3, #4]
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d3bb      	bcc.n	8001b14 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e044      	b.n	8001c2c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bfa:	7bfa      	ldrb	r2, [r7, #15]
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	791b      	ldrb	r3, [r3, #4]
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3b5      	bcc.n	8001ba2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c42:	f003 fb37 	bl	80052b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c70:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	f001 b823 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 817d 	beq.w	8001f96 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c9c:	4bbc      	ldr	r3, [pc, #752]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ca8:	4bb9      	ldr	r3, [pc, #740]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d15c      	bne.n	8001d6e <HAL_RCC_OscConfig+0x10e>
 8001cb4:	4bb6      	ldr	r3, [pc, #728]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc0:	d155      	bne.n	8001d6e <HAL_RCC_OscConfig+0x10e>
 8001cc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cc6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cd6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	095b      	lsrs	r3, r3, #5
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d102      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x94>
 8001cee:	4ba8      	ldr	r3, [pc, #672]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	e015      	b.n	8001d20 <HAL_RCC_OscConfig+0xc0>
 8001cf4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d0c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d10:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d24:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d28:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d2c:	fa92 f2a2 	rbit	r2, r2
 8001d30:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001d34:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d38:	fab2 f282 	clz	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f042 0220 	orr.w	r2, r2, #32
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	f002 021f 	and.w	r2, r2, #31
 8001d48:	2101      	movs	r1, #1
 8001d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 811f 	beq.w	8001f94 <HAL_RCC_OscConfig+0x334>
 8001d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 8116 	bne.w	8001f94 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f000 bfaf 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x12e>
 8001d80:	4b83      	ldr	r3, [pc, #524]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a82      	ldr	r2, [pc, #520]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e036      	b.n	8001dfc <HAL_RCC_OscConfig+0x19c>
 8001d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x158>
 8001d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7b      	ldr	r2, [pc, #492]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b79      	ldr	r3, [pc, #484]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a78      	ldr	r2, [pc, #480]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001db0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e021      	b.n	8001dfc <HAL_RCC_OscConfig+0x19c>
 8001db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x184>
 8001dca:	4b71      	ldr	r3, [pc, #452]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a70      	ldr	r2, [pc, #448]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6d      	ldr	r2, [pc, #436]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0x19c>
 8001de4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a69      	ldr	r2, [pc, #420]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b67      	ldr	r3, [pc, #412]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a66      	ldr	r2, [pc, #408]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dfc:	4b64      	ldr	r3, [pc, #400]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	f023 020f 	bic.w	r2, r3, #15
 8001e04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	495f      	ldr	r1, [pc, #380]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d059      	beq.n	8001eda <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7ff f8dd 	bl	8000fe4 <HAL_GetTick>
 8001e2a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff f8d8 	bl	8000fe4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	@ 0x64
 8001e3e:	d902      	bls.n	8001e46 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	f000 bf43 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>
 8001e46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e4a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e5a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_OscConfig+0x218>
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e015      	b.n	8001ea4 <HAL_RCC_OscConfig+0x244>
 8001e78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e7c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001e8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e90:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001e94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ea8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001eac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001eb0:	fa92 f2a2 	rbit	r2, r2
 8001eb4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001eb8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f042 0220 	orr.w	r2, r2, #32
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f002 021f 	and.w	r2, r2, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ab      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1d0>
 8001ed8:	e05d      	b.n	8001f96 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff f883 	bl	8000fe4 <HAL_GetTick>
 8001ede:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	e00a      	b.n	8001efa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f87e 	bl	8000fe4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	@ 0x64
 8001ef2:	d902      	bls.n	8001efa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	f000 bee9 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>
 8001efa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001efe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001f0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_OscConfig+0x2cc>
 8001f26:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	e015      	b.n	8001f58 <HAL_RCC_OscConfig+0x2f8>
 8001f2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f30:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f44:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f48:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <HAL_RCC_OscConfig+0x330>)
 8001f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f5c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f60:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f6c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f70:	fab2 f282 	clz	r2, r2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f042 0220 	orr.w	r2, r2, #32
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f002 021f 	and.w	r2, r2, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1ab      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x284>
 8001f8c:	e003      	b.n	8001f96 <HAL_RCC_OscConfig+0x336>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 817d 	beq.w	80022a6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fac:	4ba6      	ldr	r3, [pc, #664]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fb8:	4ba3      	ldr	r3, [pc, #652]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d172      	bne.n	80020aa <HAL_RCC_OscConfig+0x44a>
 8001fc4:	4ba0      	ldr	r3, [pc, #640]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d16c      	bne.n	80020aa <HAL_RCC_OscConfig+0x44a>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001fe2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	fab3 f383 	clz	r3, r3
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	095b      	lsrs	r3, r3, #5
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d102      	bne.n	8002000 <HAL_RCC_OscConfig+0x3a0>
 8001ffa:	4b93      	ldr	r3, [pc, #588]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e013      	b.n	8002028 <HAL_RCC_OscConfig+0x3c8>
 8002000:	2302      	movs	r3, #2
 8002002:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002012:	2302      	movs	r3, #2
 8002014:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002018:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002024:	4b88      	ldr	r3, [pc, #544]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	2202      	movs	r2, #2
 800202a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800202e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002032:	fa92 f2a2 	rbit	r2, r2
 8002036:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800203a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800203e:	fab2 f282 	clz	r2, r2
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f042 0220 	orr.w	r2, r2, #32
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	f002 021f 	and.w	r2, r2, #31
 800204e:	2101      	movs	r1, #1
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCC_OscConfig+0x410>
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d002      	beq.n	8002070 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f000 be2e 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b75      	ldr	r3, [pc, #468]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002078:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800207c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	21f8      	movs	r1, #248	@ 0xf8
 8002086:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800208e:	fa91 f1a1 	rbit	r1, r1
 8002092:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002096:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800209a:	fab1 f181 	clz	r1, r1
 800209e:	b2c9      	uxtb	r1, r1
 80020a0:	408b      	lsls	r3, r1
 80020a2:	4969      	ldr	r1, [pc, #420]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a8:	e0fd      	b.n	80022a6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8088 	beq.w	80021cc <HAL_RCC_OscConfig+0x56c>
 80020bc:	2301      	movs	r3, #1
 80020be:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020c6:	fa93 f3a3 	rbit	r3, r3
 80020ca:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80020ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	461a      	mov	r2, r3
 80020e4:	2301      	movs	r3, #1
 80020e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe ff7c 	bl	8000fe4 <HAL_GetTick>
 80020ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e00a      	b.n	8002108 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f2:	f7fe ff77 	bl	8000fe4 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d902      	bls.n	8002108 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	f000 bde2 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800211a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	b2db      	uxtb	r3, r3
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d102      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d8>
 8002132:	4b45      	ldr	r3, [pc, #276]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x500>
 8002138:	2302      	movs	r3, #2
 800213a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800214a:	2302      	movs	r3, #2
 800214c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002150:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800215c:	4b3a      	ldr	r3, [pc, #232]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	2202      	movs	r2, #2
 8002162:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002166:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800216a:	fa92 f2a2 	rbit	r2, r2
 800216e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002172:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002176:	fab2 f282 	clz	r2, r2
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	f002 021f 	and.w	r2, r2, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	4013      	ands	r3, r2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0af      	beq.n	80020f2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b2d      	ldr	r3, [pc, #180]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800219a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	21f8      	movs	r1, #248	@ 0xf8
 80021a8:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021b0:	fa91 f1a1 	rbit	r1, r1
 80021b4:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80021b8:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80021bc:	fab1 f181 	clz	r1, r1
 80021c0:	b2c9      	uxtb	r1, r1
 80021c2:	408b      	lsls	r3, r1
 80021c4:	4920      	ldr	r1, [pc, #128]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
 80021ca:	e06c      	b.n	80022a6 <HAL_RCC_OscConfig+0x646>
 80021cc:	2301      	movs	r3, #1
 80021ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80021de:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021ec:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	461a      	mov	r2, r3
 80021f4:	2300      	movs	r3, #0
 80021f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fef4 	bl	8000fe4 <HAL_GetTick>
 80021fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002202:	f7fe feef 	bl	8000fe4 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d902      	bls.n	8002218 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	f000 bd5a 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>
 8002218:	2302      	movs	r3, #2
 800221a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002222:	fa93 f3a3 	rbit	r3, r3
 8002226:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800222a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d104      	bne.n	800224c <HAL_RCC_OscConfig+0x5ec>
 8002242:	4b01      	ldr	r3, [pc, #4]	@ (8002248 <HAL_RCC_OscConfig+0x5e8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e015      	b.n	8002274 <HAL_RCC_OscConfig+0x614>
 8002248:	40021000 	.word	0x40021000
 800224c:	2302      	movs	r3, #2
 800224e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002264:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002270:	4bc8      	ldr	r3, [pc, #800]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	2202      	movs	r2, #2
 8002276:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800227a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800227e:	fa92 f2a2 	rbit	r2, r2
 8002282:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002286:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800228a:	fab2 f282 	clz	r2, r2
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	f042 0220 	orr.w	r2, r2, #32
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f002 021f 	and.w	r2, r2, #31
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f202 	lsl.w	r2, r1, r2
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ad      	bne.n	8002202 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8110 	beq.w	80024dc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d079      	beq.n	80023c0 <HAL_RCC_OscConfig+0x760>
 80022cc:	2301      	movs	r3, #1
 80022ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80022de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4bab      	ldr	r3, [pc, #684]	@ (8002598 <HAL_RCC_OscConfig+0x938>)
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	461a      	mov	r2, r3
 80022f2:	2301      	movs	r3, #1
 80022f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fe75 	bl	8000fe4 <HAL_GetTick>
 80022fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe fe70 	bl	8000fe4 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d902      	bls.n	8002316 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	f000 bcdb 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>
 8002316:	2302      	movs	r3, #2
 8002318:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002330:	2202      	movs	r2, #2
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002338:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fa93 f2a3 	rbit	r2, r3
 8002342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002346:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002354:	2202      	movs	r2, #2
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fa93 f2a3 	rbit	r2, r3
 8002366:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800236e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002370:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 8002372:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002378:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800237c:	2102      	movs	r1, #2
 800237e:	6019      	str	r1, [r3, #0]
 8002380:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002384:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f1a3 	rbit	r1, r3
 800238e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002392:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002396:	6019      	str	r1, [r3, #0]
  return result;
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	2101      	movs	r1, #1
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0a0      	beq.n	8002300 <HAL_RCC_OscConfig+0x6a0>
 80023be:	e08d      	b.n	80024dc <HAL_RCC_OscConfig+0x87c>
 80023c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023c8:	2201      	movs	r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023e2:	601a      	str	r2, [r3, #0]
  return result;
 80023e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80023ec:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4b68      	ldr	r3, [pc, #416]	@ (8002598 <HAL_RCC_OscConfig+0x938>)
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	461a      	mov	r2, r3
 80023fe:	2300      	movs	r3, #0
 8002400:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe fdef 	bl	8000fe4 <HAL_GetTick>
 8002406:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240c:	f7fe fdea 	bl	8000fe4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d902      	bls.n	8002422 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	f000 bc55 	b.w	8002ccc <HAL_RCC_OscConfig+0x106c>
 8002422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002426:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800242a:	2202      	movs	r2, #2
 800242c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002432:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	fa93 f2a3 	rbit	r2, r3
 800243c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002440:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800244e:	2202      	movs	r2, #2
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002456:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002464:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002472:	2202      	movs	r2, #2
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002488:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800248c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248e:	4b41      	ldr	r3, [pc, #260]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 8002490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800249a:	2102      	movs	r1, #2
 800249c:	6019      	str	r1, [r3, #0]
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	fa93 f1a3 	rbit	r1, r3
 80024ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024b4:	6019      	str	r1, [r3, #0]
  return result;
 80024b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	2101      	movs	r1, #1
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d197      	bne.n	800240c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 81a1 	beq.w	8002834 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f8:	4b26      	ldr	r3, [pc, #152]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d116      	bne.n	8002532 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002504:	4b23      	ldr	r3, [pc, #140]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	4a22      	ldr	r2, [pc, #136]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800250e:	61d3      	str	r3, [r2, #28]
 8002510:	4b20      	ldr	r3, [pc, #128]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002526:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800252a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800252c:	2301      	movs	r3, #1
 800252e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b1a      	ldr	r3, [pc, #104]	@ (800259c <HAL_RCC_OscConfig+0x93c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d11a      	bne.n	8002574 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b17      	ldr	r3, [pc, #92]	@ (800259c <HAL_RCC_OscConfig+0x93c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a16      	ldr	r2, [pc, #88]	@ (800259c <HAL_RCC_OscConfig+0x93c>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002548:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7fe fd4b 	bl	8000fe4 <HAL_GetTick>
 800254e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	e009      	b.n	8002568 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002554:	f7fe fd46 	bl	8000fe4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	@ 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e3b1      	b.n	8002ccc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <HAL_RCC_OscConfig+0x93c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ef      	beq.n	8002554 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d10d      	bne.n	80025a0 <HAL_RCC_OscConfig+0x940>
 8002584:	4b03      	ldr	r3, [pc, #12]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a02      	ldr	r2, [pc, #8]	@ (8002594 <HAL_RCC_OscConfig+0x934>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	e03c      	b.n	800260c <HAL_RCC_OscConfig+0x9ac>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	10908120 	.word	0x10908120
 800259c:	40007000 	.word	0x40007000
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0x96a>
 80025b0:	4bc1      	ldr	r3, [pc, #772]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4ac0      	ldr	r2, [pc, #768]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	4bbe      	ldr	r3, [pc, #760]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4abd      	ldr	r2, [pc, #756]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	e020      	b.n	800260c <HAL_RCC_OscConfig+0x9ac>
 80025ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b05      	cmp	r3, #5
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x994>
 80025da:	4bb7      	ldr	r3, [pc, #732]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4ab6      	ldr	r2, [pc, #728]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	4bb4      	ldr	r3, [pc, #720]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4ab3      	ldr	r2, [pc, #716]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	e00b      	b.n	800260c <HAL_RCC_OscConfig+0x9ac>
 80025f4:	4bb0      	ldr	r3, [pc, #704]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	4aaf      	ldr	r2, [pc, #700]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	6213      	str	r3, [r2, #32]
 8002600:	4bad      	ldr	r3, [pc, #692]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4aac      	ldr	r2, [pc, #688]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8081 	beq.w	8002720 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fe fce1 	bl	8000fe4 <HAL_GetTick>
 8002622:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	e00b      	b.n	8002640 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fcdc 	bl	8000fe4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e345      	b.n	8002ccc <HAL_RCC_OscConfig+0x106c>
 8002640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002644:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002648:	2202      	movs	r2, #2
 800264a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002650:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800266c:	2202      	movs	r2, #2
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	fa93 f2a3 	rbit	r2, r3
 800267e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002682:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002686:	601a      	str	r2, [r3, #0]
  return result;
 8002688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002690:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_OscConfig+0xa4c>
 80026a6:	4b84      	ldr	r3, [pc, #528]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	e013      	b.n	80026d4 <HAL_RCC_OscConfig+0xa74>
 80026ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026b4:	2202      	movs	r2, #2
 80026b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026bc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	fa93 f2a3 	rbit	r2, r3
 80026c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	4b79      	ldr	r3, [pc, #484]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026d8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026dc:	2102      	movs	r1, #2
 80026de:	6011      	str	r1, [r2, #0]
 80026e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026e4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	fa92 f1a2 	rbit	r1, r2
 80026ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80026f6:	6011      	str	r1, [r2, #0]
  return result;
 80026f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026fc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	fab2 f282 	clz	r2, r2
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	f002 021f 	and.w	r2, r2, #31
 8002712:	2101      	movs	r1, #1
 8002714:	fa01 f202 	lsl.w	r2, r1, r2
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d084      	beq.n	8002628 <HAL_RCC_OscConfig+0x9c8>
 800271e:	e07f      	b.n	8002820 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002720:	f7fe fc60 	bl	8000fe4 <HAL_GetTick>
 8002724:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002728:	e00b      	b.n	8002742 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7fe fc5b 	bl	8000fe4 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e2c4      	b.n	8002ccc <HAL_RCC_OscConfig+0x106c>
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800274a:	2202      	movs	r2, #2
 800274c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002752:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	fa93 f2a3 	rbit	r2, r3
 800275c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002760:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800276e:	2202      	movs	r2, #2
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002776:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f2a3 	rbit	r2, r3
 8002780:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002784:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002788:	601a      	str	r2, [r3, #0]
  return result;
 800278a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002792:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	b2db      	uxtb	r3, r3
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d102      	bne.n	80027ae <HAL_RCC_OscConfig+0xb4e>
 80027a8:	4b43      	ldr	r3, [pc, #268]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	e013      	b.n	80027d6 <HAL_RCC_OscConfig+0xb76>
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027b6:	2202      	movs	r2, #2
 80027b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	fa93 f2a3 	rbit	r2, r3
 80027c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027cc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	4b39      	ldr	r3, [pc, #228]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027da:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027de:	2102      	movs	r1, #2
 80027e0:	6011      	str	r1, [r2, #0]
 80027e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027e6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	fa92 f1a2 	rbit	r1, r2
 80027f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027f4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80027f8:	6011      	str	r1, [r2, #0]
  return result;
 80027fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80027fe:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	fab2 f282 	clz	r2, r2
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	f002 021f 	and.w	r2, r2, #31
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f202 	lsl.w	r2, r1, r2
 800281a:	4013      	ands	r3, r2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d184      	bne.n	800272a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002820:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b23      	ldr	r3, [pc, #140]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	4a22      	ldr	r2, [pc, #136]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002832:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002838:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8242 	beq.w	8002cca <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002846:	4b1c      	ldr	r3, [pc, #112]	@ (80028b8 <HAL_RCC_OscConfig+0xc58>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b08      	cmp	r3, #8
 8002850:	f000 8213 	beq.w	8002c7a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002858:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	2b02      	cmp	r3, #2
 8002862:	f040 8162 	bne.w	8002b2a <HAL_RCC_OscConfig+0xeca>
 8002866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800286e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002878:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002886:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800288a:	601a      	str	r2, [r3, #0]
  return result;
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002894:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	461a      	mov	r2, r3
 80028a8:	2300      	movs	r3, #0
 80028aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fb9a 	bl	8000fe4 <HAL_GetTick>
 80028b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	e00c      	b.n	80028d0 <HAL_RCC_OscConfig+0xc70>
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fb92 	bl	8000fe4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e1fd      	b.n	8002ccc <HAL_RCC_OscConfig+0x106c>
 80028d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	fa93 f2a3 	rbit	r2, r3
 80028ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028f4:	601a      	str	r2, [r3, #0]
  return result;
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80028fe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b01      	cmp	r3, #1
 8002912:	d102      	bne.n	800291a <HAL_RCC_OscConfig+0xcba>
 8002914:	4bb0      	ldr	r3, [pc, #704]	@ (8002bd8 <HAL_RCC_OscConfig+0xf78>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	e027      	b.n	800296a <HAL_RCC_OscConfig+0xd0a>
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	fa93 f2a3 	rbit	r2, r3
 8002936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800293a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002944:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002948:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002952:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	fa93 f2a3 	rbit	r2, r3
 800295c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002960:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	4b9c      	ldr	r3, [pc, #624]	@ (8002bd8 <HAL_RCC_OscConfig+0xf78>)
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800296e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002972:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002976:	6011      	str	r1, [r2, #0]
 8002978:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800297c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002980:	6812      	ldr	r2, [r2, #0]
 8002982:	fa92 f1a2 	rbit	r1, r2
 8002986:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800298a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800298e:	6011      	str	r1, [r2, #0]
  return result;
 8002990:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002994:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f042 0220 	orr.w	r2, r2, #32
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f002 021f 	and.w	r2, r2, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d182      	bne.n	80028bc <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b6:	4b88      	ldr	r3, [pc, #544]	@ (8002bd8 <HAL_RCC_OscConfig+0xf78>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	430b      	orrs	r3, r1
 80029d8:	497f      	ldr	r1, [pc, #508]	@ (8002bd8 <HAL_RCC_OscConfig+0xf78>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
 80029de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	fa93 f2a3 	rbit	r2, r3
 80029fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fe:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a02:	601a      	str	r2, [r3, #0]
  return result;
 8002a04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a08:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a0c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a18:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2301      	movs	r3, #1
 8002a22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe fade 	bl	8000fe4 <HAL_GetTick>
 8002a28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a2c:	e009      	b.n	8002a42 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe fad9 	bl	8000fe4 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e144      	b.n	8002ccc <HAL_RCC_OscConfig+0x106c>
 8002a42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a46:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a54:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	fa93 f2a3 	rbit	r2, r3
 8002a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a62:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a66:	601a      	str	r2, [r3, #0]
  return result;
 8002a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a6c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	095b      	lsrs	r3, r3, #5
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d102      	bne.n	8002a8c <HAL_RCC_OscConfig+0xe2c>
 8002a86:	4b54      	ldr	r3, [pc, #336]	@ (8002bd8 <HAL_RCC_OscConfig+0xf78>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	e027      	b.n	8002adc <HAL_RCC_OscConfig+0xe7c>
 8002a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a90:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002a94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	fa93 f2a3 	rbit	r2, r3
 8002aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002aba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ac4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	fa93 f2a3 	rbit	r2, r3
 8002ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8002bd8 <HAL_RCC_OscConfig+0xf78>)
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ae0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ae4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ae8:	6011      	str	r1, [r2, #0]
 8002aea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002aee:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	fa92 f1a2 	rbit	r1, r2
 8002af8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002afc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b00:	6011      	str	r1, [r2, #0]
  return result;
 8002b02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b06:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	fab2 f282 	clz	r2, r2
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f042 0220 	orr.w	r2, r2, #32
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	f002 021f 	and.w	r2, r2, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d082      	beq.n	8002a2e <HAL_RCC_OscConfig+0xdce>
 8002b28:	e0cf      	b.n	8002cca <HAL_RCC_OscConfig+0x106a>
 8002b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b2e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	fa93 f2a3 	rbit	r2, r3
 8002b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b4e:	601a      	str	r2, [r3, #0]
  return result;
 8002b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b54:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b58:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	fab3 f383 	clz	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b64:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7fe fa38 	bl	8000fe4 <HAL_GetTick>
 8002b74:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b78:	e009      	b.n	8002b8e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe fa33 	bl	8000fe4 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e09e      	b.n	8002ccc <HAL_RCC_OscConfig+0x106c>
 8002b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b92:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002b96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	fa93 f2a3 	rbit	r2, r3
 8002baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bae:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bb2:	601a      	str	r2, [r3, #0]
  return result;
 8002bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bbe:	fab3 f383 	clz	r3, r3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d104      	bne.n	8002bdc <HAL_RCC_OscConfig+0xf7c>
 8002bd2:	4b01      	ldr	r3, [pc, #4]	@ (8002bd8 <HAL_RCC_OscConfig+0xf78>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	e029      	b.n	8002c2c <HAL_RCC_OscConfig+0xfcc>
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002be4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bee:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	fa93 f2a3 	rbit	r2, r3
 8002bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c06:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c14:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c22:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	4b2b      	ldr	r3, [pc, #172]	@ (8002cd8 <HAL_RCC_OscConfig+0x1078>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c30:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c34:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c38:	6011      	str	r1, [r2, #0]
 8002c3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c3e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	fa92 f1a2 	rbit	r1, r2
 8002c48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c4c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c50:	6011      	str	r1, [r2, #0]
  return result;
 8002c52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c56:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	fab2 f282 	clz	r2, r2
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	f042 0220 	orr.w	r2, r2, #32
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	f002 021f 	and.w	r2, r2, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d180      	bne.n	8002b7a <HAL_RCC_OscConfig+0xf1a>
 8002c78:	e027      	b.n	8002cca <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01e      	b.n	8002ccc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c8e:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <HAL_RCC_OscConfig+0x1078>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002c9a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d10b      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cb2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000

08002cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b09e      	sub	sp, #120	@ 0x78
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e162      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b90      	ldr	r3, [pc, #576]	@ (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d910      	bls.n	8002d24 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b8d      	ldr	r3, [pc, #564]	@ (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 0207 	bic.w	r2, r3, #7
 8002d0a:	498b      	ldr	r1, [pc, #556]	@ (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d12:	4b89      	ldr	r3, [pc, #548]	@ (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e14a      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b82      	ldr	r3, [pc, #520]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	497f      	ldr	r1, [pc, #508]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 80dc 	beq.w	8002f08 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d13c      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xf6>
 8002d58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d5c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d102      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xa6>
 8002d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	e00f      	b.n	8002da2 <HAL_RCC_ClockConfig+0xc6>
 8002d82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d9e:	4b67      	ldr	r3, [pc, #412]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002da6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002da8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002daa:	fa92 f2a2 	rbit	r2, r2
 8002dae:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002db0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002db2:	fab2 f282 	clz	r2, r2
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	f042 0220 	orr.w	r2, r2, #32
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	f002 021f 	and.w	r2, r2, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d17b      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0f3      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d13c      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x178>
 8002dda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dde:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002de8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x128>
 8002dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	e00f      	b.n	8002e24 <HAL_RCC_ClockConfig+0x148>
 8002e04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e08:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e0c:	fa93 f3a3 	rbit	r3, r3
 8002e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e16:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e20:	4b46      	ldr	r3, [pc, #280]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e28:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e2c:	fa92 f2a2 	rbit	r2, r2
 8002e30:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e34:	fab2 f282 	clz	r2, r2
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f042 0220 	orr.w	r2, r2, #32
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f002 021f 	and.w	r2, r2, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d13a      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0b2      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
 8002e54:	2302      	movs	r3, #2
 8002e56:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	095b      	lsrs	r3, r3, #5
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x1a0>
 8002e76:	4b31      	ldr	r3, [pc, #196]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	e00d      	b.n	8002e98 <HAL_RCC_ClockConfig+0x1bc>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e88:	2302      	movs	r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	4b29      	ldr	r3, [pc, #164]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	2202      	movs	r2, #2
 8002e9a:	61ba      	str	r2, [r7, #24]
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	617a      	str	r2, [r7, #20]
  return result;
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	fab2 f282 	clz	r2, r2
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f042 0220 	orr.w	r2, r2, #32
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	f002 021f 	and.w	r2, r2, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e079      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	491a      	ldr	r1, [pc, #104]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe f884 	bl	8000fe4 <HAL_GetTick>
 8002edc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fe f880 	bl	8000fe4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e061      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_RCC_ClockConfig+0x260>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d214      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f023 0207 	bic.w	r2, r3, #7
 8002f1e:	4906      	ldr	r1, [pc, #24]	@ (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f26:	4b04      	ldr	r3, [pc, #16]	@ (8002f38 <HAL_RCC_ClockConfig+0x25c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e040      	b.n	8002fba <HAL_RCC_ClockConfig+0x2de>
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	491a      	ldr	r1, [pc, #104]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b16      	ldr	r3, [pc, #88]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4912      	ldr	r1, [pc, #72]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f7e:	f000 f829 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4601      	mov	r1, r0
 8002f84:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc4 <HAL_RCC_ClockConfig+0x2e8>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8c:	22f0      	movs	r2, #240	@ 0xf0
 8002f8e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	fa92 f2a2 	rbit	r2, r2
 8002f96:	60fa      	str	r2, [r7, #12]
  return result;
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	fab2 f282 	clz	r2, r2
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	40d3      	lsrs	r3, r2
 8002fa2:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <HAL_RCC_ClockConfig+0x2ec>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8002faa:	4a08      	ldr	r2, [pc, #32]	@ (8002fcc <HAL_RCC_ClockConfig+0x2f0>)
 8002fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fae:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_RCC_ClockConfig+0x2f4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd ffd2 	bl	8000f5c <HAL_InitTick>
  
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3778      	adds	r7, #120	@ 0x78
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	08005360 	.word	0x08005360
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002fee:	4b1e      	ldr	r3, [pc, #120]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x30>
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x36>
 8003002:	e026      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003004:	4b19      	ldr	r3, [pc, #100]	@ (800306c <HAL_RCC_GetSysClockFreq+0x98>)
 8003006:	613b      	str	r3, [r7, #16]
      break;
 8003008:	e026      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	0c9b      	lsrs	r3, r3, #18
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	4a17      	ldr	r2, [pc, #92]	@ (8003070 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003018:	4b13      	ldr	r3, [pc, #76]	@ (8003068 <HAL_RCC_GetSysClockFreq+0x94>)
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	4a14      	ldr	r2, [pc, #80]	@ (8003074 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003030:	4a0e      	ldr	r2, [pc, #56]	@ (800306c <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	fbb2 f2f3 	udiv	r2, r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	fb02 f303 	mul.w	r3, r2, r3
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	e004      	b.n	800304c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a0c      	ldr	r2, [pc, #48]	@ (8003078 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	613b      	str	r3, [r7, #16]
      break;
 8003050:	e002      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_RCC_GetSysClockFreq+0x98>)
 8003054:	613b      	str	r3, [r7, #16]
      break;
 8003056:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003058:	693b      	ldr	r3, [r7, #16]
}
 800305a:	4618      	mov	r0, r3
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	007a1200 	.word	0x007a1200
 8003070:	08005378 	.word	0x08005378
 8003074:	08005388 	.word	0x08005388
 8003078:	003d0900 	.word	0x003d0900

0800307c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_RCC_GetHCLKFreq+0x14>)
 8003082:	681b      	ldr	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20000000 	.word	0x20000000

08003094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800309a:	f7ff ffef 	bl	800307c <HAL_RCC_GetHCLKFreq>
 800309e:	4601      	mov	r1, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030a8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	fa92 f2a2 	rbit	r2, r2
 80030b4:	603a      	str	r2, [r7, #0]
  return result;
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	fab2 f282 	clz	r2, r2
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	40d3      	lsrs	r3, r2
 80030c0:	4a04      	ldr	r2, [pc, #16]	@ (80030d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030c2:	5cd3      	ldrb	r3, [r2, r3]
 80030c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	08005370 	.word	0x08005370

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030de:	f7ff ffcd 	bl	800307c <HAL_RCC_GetHCLKFreq>
 80030e2:	4601      	mov	r1, r0
 80030e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80030ec:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80030f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	fa92 f2a2 	rbit	r2, r2
 80030f8:	603a      	str	r2, [r7, #0]
  return result;
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	fab2 f282 	clz	r2, r2
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	40d3      	lsrs	r3, r2
 8003104:	4a04      	ldr	r2, [pc, #16]	@ (8003118 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	08005370 	.word	0x08005370

0800311c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b092      	sub	sp, #72	@ 0x48
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80d4 	beq.w	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003140:	4b4e      	ldr	r3, [pc, #312]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10e      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314c:	4b4b      	ldr	r3, [pc, #300]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	4a4a      	ldr	r2, [pc, #296]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003156:	61d3      	str	r3, [r2, #28]
 8003158:	4b48      	ldr	r3, [pc, #288]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b45      	ldr	r3, [pc, #276]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d118      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b42      	ldr	r3, [pc, #264]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a41      	ldr	r2, [pc, #260]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003180:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7fd ff2f 	bl	8000fe4 <HAL_GetTick>
 8003186:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	e008      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318a:	f7fd ff2b 	bl	8000fe4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b64      	cmp	r3, #100	@ 0x64
 8003196:	d901      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e169      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	4b38      	ldr	r3, [pc, #224]	@ (8003280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a8:	4b34      	ldr	r3, [pc, #208]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 8084 	beq.w	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d07c      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c8:	4b2c      	ldr	r3, [pc, #176]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80031e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b26      	ldr	r3, [pc, #152]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	461a      	mov	r2, r3
 80031f2:	2301      	movs	r3, #1
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	461a      	mov	r2, r3
 8003216:	2300      	movs	r3, #0
 8003218:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800321a:	4a18      	ldr	r2, [pc, #96]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800321e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04b      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7fd fedb 	bl	8000fe4 <HAL_GetTick>
 800322e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fd fed7 	bl	8000fe4 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e113      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003248:	2302      	movs	r3, #2
 800324a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	627b      	str	r3, [r7, #36]	@ 0x24
 8003254:	2302      	movs	r3, #2
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	61fb      	str	r3, [r7, #28]
  return result;
 8003260:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	095b      	lsrs	r3, r3, #5
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d108      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003276:	4b01      	ldr	r3, [pc, #4]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	e00d      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800327c:	40021000 	.word	0x40021000
 8003280:	40007000 	.word	0x40007000
 8003284:	10908100 	.word	0x10908100
 8003288:	2302      	movs	r3, #2
 800328a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	4b78      	ldr	r3, [pc, #480]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	2202      	movs	r2, #2
 800329a:	613a      	str	r2, [r7, #16]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	fa92 f2a2 	rbit	r2, r2
 80032a2:	60fa      	str	r2, [r7, #12]
  return result;
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	fab2 f282 	clz	r2, r2
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f002 021f 	and.w	r2, r2, #31
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0b7      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	496a      	ldr	r1, [pc, #424]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d105      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032dc:	4b66      	ldr	r3, [pc, #408]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	4a65      	ldr	r2, [pc, #404]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d008      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032f4:	4b60      	ldr	r3, [pc, #384]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f8:	f023 0203 	bic.w	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	495d      	ldr	r1, [pc, #372]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003302:	4313      	orrs	r3, r2
 8003304:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d008      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003312:	4b59      	ldr	r3, [pc, #356]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003316:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	4956      	ldr	r1, [pc, #344]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003320:	4313      	orrs	r3, r2
 8003322:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003330:	4b51      	ldr	r3, [pc, #324]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	494e      	ldr	r1, [pc, #312]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800333e:	4313      	orrs	r3, r2
 8003340:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0320 	and.w	r3, r3, #32
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800334e:	4b4a      	ldr	r3, [pc, #296]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	f023 0210 	bic.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4947      	ldr	r1, [pc, #284]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800336c:	4b42      	ldr	r3, [pc, #264]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	493f      	ldr	r1, [pc, #252]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800338a:	4b3b      	ldr	r3, [pc, #236]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f023 0220 	bic.w	r2, r3, #32
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4938      	ldr	r1, [pc, #224]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003398:	4313      	orrs	r3, r2
 800339a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033a8:	4b33      	ldr	r3, [pc, #204]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	4930      	ldr	r1, [pc, #192]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	4929      	ldr	r1, [pc, #164]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	4921      	ldr	r1, [pc, #132]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003406:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	491a      	ldr	r1, [pc, #104]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003410:	4313      	orrs	r3, r2
 8003412:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003420:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003424:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342c:	4912      	ldr	r1, [pc, #72]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800343e:	4b0e      	ldr	r3, [pc, #56]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	490b      	ldr	r1, [pc, #44]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800345c:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003468:	4903      	ldr	r1, [pc, #12]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800346a:	4313      	orrs	r3, r2
 800346c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3748      	adds	r7, #72	@ 0x48
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40021000 	.word	0x40021000

0800347c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e09d      	b.n	80035ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349e:	d009      	beq.n	80034b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]
 80034a6:	e005      	b.n	80034b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fb0a 	bl	8000ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80034f4:	d902      	bls.n	80034fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	e002      	b.n	8003502 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003500:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800350a:	d007      	beq.n	800351c <HAL_SPI_Init+0xa0>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003514:	d002      	beq.n	800351c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800352c:	431a      	orrs	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	431a      	orrs	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800355e:	ea42 0103 	orr.w	r1, r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	f003 0204 	and.w	r2, r3, #4
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003598:	ea42 0103 	orr.w	r1, r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e049      	b.n	8003678 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fd fab7 	bl	8000b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f000 fca9 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e049      	b.n	8003726 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f841 	bl	800372e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fc52 	bl	8003f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_TIM_PWM_Start+0x24>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	e03c      	b.n	80037e2 <HAL_TIM_PWM_Start+0x9e>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b04      	cmp	r3, #4
 800376c:	d109      	bne.n	8003782 <HAL_TIM_PWM_Start+0x3e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e02f      	b.n	80037e2 <HAL_TIM_PWM_Start+0x9e>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d109      	bne.n	800379c <HAL_TIM_PWM_Start+0x58>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b01      	cmp	r3, #1
 8003792:	bf14      	ite	ne
 8003794:	2301      	movne	r3, #1
 8003796:	2300      	moveq	r3, #0
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e022      	b.n	80037e2 <HAL_TIM_PWM_Start+0x9e>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d109      	bne.n	80037b6 <HAL_TIM_PWM_Start+0x72>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	bf14      	ite	ne
 80037ae:	2301      	movne	r3, #1
 80037b0:	2300      	moveq	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	e015      	b.n	80037e2 <HAL_TIM_PWM_Start+0x9e>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d109      	bne.n	80037d0 <HAL_TIM_PWM_Start+0x8c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e008      	b.n	80037e2 <HAL_TIM_PWM_Start+0x9e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e097      	b.n	800391a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d104      	bne.n	80037fa <HAL_TIM_PWM_Start+0xb6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f8:	e023      	b.n	8003842 <HAL_TIM_PWM_Start+0xfe>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d104      	bne.n	800380a <HAL_TIM_PWM_Start+0xc6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2202      	movs	r2, #2
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003808:	e01b      	b.n	8003842 <HAL_TIM_PWM_Start+0xfe>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d104      	bne.n	800381a <HAL_TIM_PWM_Start+0xd6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003818:	e013      	b.n	8003842 <HAL_TIM_PWM_Start+0xfe>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b0c      	cmp	r3, #12
 800381e:	d104      	bne.n	800382a <HAL_TIM_PWM_Start+0xe6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003828:	e00b      	b.n	8003842 <HAL_TIM_PWM_Start+0xfe>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b10      	cmp	r3, #16
 800382e:	d104      	bne.n	800383a <HAL_TIM_PWM_Start+0xf6>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003838:	e003      	b.n	8003842 <HAL_TIM_PWM_Start+0xfe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2202      	movs	r2, #2
 800383e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2201      	movs	r2, #1
 8003848:	6839      	ldr	r1, [r7, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 ff98 	bl	8004780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a33      	ldr	r2, [pc, #204]	@ (8003924 <HAL_TIM_PWM_Start+0x1e0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_TIM_PWM_Start+0x13e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a32      	ldr	r2, [pc, #200]	@ (8003928 <HAL_TIM_PWM_Start+0x1e4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00e      	beq.n	8003882 <HAL_TIM_PWM_Start+0x13e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a30      	ldr	r2, [pc, #192]	@ (800392c <HAL_TIM_PWM_Start+0x1e8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d009      	beq.n	8003882 <HAL_TIM_PWM_Start+0x13e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2f      	ldr	r2, [pc, #188]	@ (8003930 <HAL_TIM_PWM_Start+0x1ec>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_TIM_PWM_Start+0x13e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2d      	ldr	r2, [pc, #180]	@ (8003934 <HAL_TIM_PWM_Start+0x1f0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d101      	bne.n	8003886 <HAL_TIM_PWM_Start+0x142>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <HAL_TIM_PWM_Start+0x144>
 8003886:	2300      	movs	r3, #0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a20      	ldr	r2, [pc, #128]	@ (8003924 <HAL_TIM_PWM_Start+0x1e0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d018      	beq.n	80038d8 <HAL_TIM_PWM_Start+0x194>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ae:	d013      	beq.n	80038d8 <HAL_TIM_PWM_Start+0x194>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a20      	ldr	r2, [pc, #128]	@ (8003938 <HAL_TIM_PWM_Start+0x1f4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00e      	beq.n	80038d8 <HAL_TIM_PWM_Start+0x194>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1f      	ldr	r2, [pc, #124]	@ (800393c <HAL_TIM_PWM_Start+0x1f8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_TIM_PWM_Start+0x194>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a17      	ldr	r2, [pc, #92]	@ (8003928 <HAL_TIM_PWM_Start+0x1e4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_PWM_Start+0x194>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a16      	ldr	r2, [pc, #88]	@ (800392c <HAL_TIM_PWM_Start+0x1e8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d115      	bne.n	8003904 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	4b18      	ldr	r3, [pc, #96]	@ (8003940 <HAL_TIM_PWM_Start+0x1fc>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d015      	beq.n	8003916 <HAL_TIM_PWM_Start+0x1d2>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f0:	d011      	beq.n	8003916 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0201 	orr.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	e008      	b.n	8003916 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e000      	b.n	8003918 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003916:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40013400 	.word	0x40013400
 800392c:	40014000 	.word	0x40014000
 8003930:	40014400 	.word	0x40014400
 8003934:	40014800 	.word	0x40014800
 8003938:	40000400 	.word	0x40000400
 800393c:	40000800 	.word	0x40000800
 8003940:	00010007 	.word	0x00010007

08003944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d020      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01b      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f06f 0202 	mvn.w	r2, #2
 8003978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 facb 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003994:	e005      	b.n	80039a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fabd 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 face 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d020      	beq.n	80039f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0204 	mvn.w	r2, #4
 80039c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 faa5 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 80039e0:	e005      	b.n	80039ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa97 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 faa8 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d020      	beq.n	8003a40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0208 	mvn.w	r2, #8
 8003a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2204      	movs	r2, #4
 8003a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa7f 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003a2c:	e005      	b.n	8003a3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fa71 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 fa82 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d020      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01b      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0210 	mvn.w	r2, #16
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2208      	movs	r2, #8
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa59 	bl	8003f2a <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa4b 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fa5c 	bl	8003f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d007      	beq.n	8003ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0201 	mvn.w	r2, #1
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fa29 	bl	8003f02 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 ff84 	bl	80049dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 ff7c 	bl	80049f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00c      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fa1b 	bl	8003f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0220 	mvn.w	r2, #32
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 ff44 	bl	80049c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e0ff      	b.n	8003d66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b14      	cmp	r3, #20
 8003b72:	f200 80f0 	bhi.w	8003d56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003b76:	a201      	add	r2, pc, #4	@ (adr r2, 8003b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003bd1 	.word	0x08003bd1
 8003b80:	08003d57 	.word	0x08003d57
 8003b84:	08003d57 	.word	0x08003d57
 8003b88:	08003d57 	.word	0x08003d57
 8003b8c:	08003c11 	.word	0x08003c11
 8003b90:	08003d57 	.word	0x08003d57
 8003b94:	08003d57 	.word	0x08003d57
 8003b98:	08003d57 	.word	0x08003d57
 8003b9c:	08003c53 	.word	0x08003c53
 8003ba0:	08003d57 	.word	0x08003d57
 8003ba4:	08003d57 	.word	0x08003d57
 8003ba8:	08003d57 	.word	0x08003d57
 8003bac:	08003c93 	.word	0x08003c93
 8003bb0:	08003d57 	.word	0x08003d57
 8003bb4:	08003d57 	.word	0x08003d57
 8003bb8:	08003d57 	.word	0x08003d57
 8003bbc:	08003cd5 	.word	0x08003cd5
 8003bc0:	08003d57 	.word	0x08003d57
 8003bc4:	08003d57 	.word	0x08003d57
 8003bc8:	08003d57 	.word	0x08003d57
 8003bcc:	08003d15 	.word	0x08003d15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fa62 	bl	80040a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699a      	ldr	r2, [r3, #24]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0208 	orr.w	r2, r2, #8
 8003bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0204 	bic.w	r2, r2, #4
 8003bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6999      	ldr	r1, [r3, #24]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	619a      	str	r2, [r3, #24]
      break;
 8003c0e:	e0a5      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fad2 	bl	80041c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]
      break;
 8003c50:	e084      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68b9      	ldr	r1, [r7, #8]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fb3b 	bl	80042d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0208 	orr.w	r2, r2, #8
 8003c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69da      	ldr	r2, [r3, #28]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0204 	bic.w	r2, r2, #4
 8003c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	69d9      	ldr	r1, [r3, #28]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	61da      	str	r2, [r3, #28]
      break;
 8003c90:	e064      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fba3 	bl	80043e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69d9      	ldr	r1, [r3, #28]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	021a      	lsls	r2, r3, #8
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	61da      	str	r2, [r3, #28]
      break;
 8003cd2:	e043      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 fbec 	bl	80044b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0208 	orr.w	r2, r2, #8
 8003cee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	691a      	ldr	r2, [r3, #16]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d12:	e023      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fc30 	bl	8004580 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003d54:	e002      	b.n	8003d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop

08003d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_TIM_ConfigClockSource+0x1c>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e0b6      	b.n	8003efa <HAL_TIM_ConfigClockSource+0x18a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003daa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dc8:	d03e      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0xd8>
 8003dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dce:	f200 8087 	bhi.w	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd6:	f000 8086 	beq.w	8003ee6 <HAL_TIM_ConfigClockSource+0x176>
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dde:	d87f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003de0:	2b70      	cmp	r3, #112	@ 0x70
 8003de2:	d01a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xaa>
 8003de4:	2b70      	cmp	r3, #112	@ 0x70
 8003de6:	d87b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003de8:	2b60      	cmp	r3, #96	@ 0x60
 8003dea:	d050      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x11e>
 8003dec:	2b60      	cmp	r3, #96	@ 0x60
 8003dee:	d877      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003df0:	2b50      	cmp	r3, #80	@ 0x50
 8003df2:	d03c      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0xfe>
 8003df4:	2b50      	cmp	r3, #80	@ 0x50
 8003df6:	d873      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003df8:	2b40      	cmp	r3, #64	@ 0x40
 8003dfa:	d058      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x13e>
 8003dfc:	2b40      	cmp	r3, #64	@ 0x40
 8003dfe:	d86f      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003e00:	2b30      	cmp	r3, #48	@ 0x30
 8003e02:	d064      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15e>
 8003e04:	2b30      	cmp	r3, #48	@ 0x30
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15e>
 8003e0c:	2b20      	cmp	r3, #32
 8003e0e:	d867      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05c      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15e>
 8003e14:	2b10      	cmp	r3, #16
 8003e16:	d05a      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x15e>
 8003e18:	e062      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e2a:	f000 fc89 	bl	8004740 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
      break;
 8003e46:	e04f      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e58:	f000 fc72 	bl	8004740 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 fbe6 	bl	800464c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	@ 0x50
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fc3f 	bl	800470a <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f000 fc05 	bl	80046aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	@ 0x60
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fc2f 	bl	800470a <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f000 fbc6 	bl	800464c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	@ 0x40
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 fc1f 	bl	800470a <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f000 fc16 	bl	800470a <TIM_ITRx_SetConfig>
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a42      	ldr	r2, [pc, #264]	@ (8004084 <TIM_Base_SetConfig+0x11c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00f      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f86:	d00b      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8004088 <TIM_Base_SetConfig+0x120>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a3e      	ldr	r2, [pc, #248]	@ (800408c <TIM_Base_SetConfig+0x124>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_Base_SetConfig+0x38>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8004090 <TIM_Base_SetConfig+0x128>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d108      	bne.n	8003fb2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a33      	ldr	r2, [pc, #204]	@ (8004084 <TIM_Base_SetConfig+0x11c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d01b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc0:	d017      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a30      	ldr	r2, [pc, #192]	@ (8004088 <TIM_Base_SetConfig+0x120>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800408c <TIM_Base_SetConfig+0x124>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004090 <TIM_Base_SetConfig+0x128>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004094 <TIM_Base_SetConfig+0x12c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8004098 <TIM_Base_SetConfig+0x130>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_Base_SetConfig+0x8a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2b      	ldr	r2, [pc, #172]	@ (800409c <TIM_Base_SetConfig+0x134>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d108      	bne.n	8004004 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a16      	ldr	r2, [pc, #88]	@ (8004084 <TIM_Base_SetConfig+0x11c>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00f      	beq.n	8004050 <TIM_Base_SetConfig+0xe8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a17      	ldr	r2, [pc, #92]	@ (8004090 <TIM_Base_SetConfig+0x128>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00b      	beq.n	8004050 <TIM_Base_SetConfig+0xe8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a16      	ldr	r2, [pc, #88]	@ (8004094 <TIM_Base_SetConfig+0x12c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d007      	beq.n	8004050 <TIM_Base_SetConfig+0xe8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a15      	ldr	r2, [pc, #84]	@ (8004098 <TIM_Base_SetConfig+0x130>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0xe8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a14      	ldr	r2, [pc, #80]	@ (800409c <TIM_Base_SetConfig+0x134>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b01      	cmp	r3, #1
 8004068:	d105      	bne.n	8004076 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f023 0201 	bic.w	r2, r3, #1
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	611a      	str	r2, [r3, #16]
  }
}
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40012c00 	.word	0x40012c00
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40013400 	.word	0x40013400
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800

080040a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f023 0201 	bic.w	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f023 0302 	bic.w	r3, r3, #2
 80040ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a2c      	ldr	r2, [pc, #176]	@ (80041ac <TIM_OC1_SetConfig+0x10c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00f      	beq.n	8004120 <TIM_OC1_SetConfig+0x80>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a2b      	ldr	r2, [pc, #172]	@ (80041b0 <TIM_OC1_SetConfig+0x110>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00b      	beq.n	8004120 <TIM_OC1_SetConfig+0x80>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a2a      	ldr	r2, [pc, #168]	@ (80041b4 <TIM_OC1_SetConfig+0x114>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <TIM_OC1_SetConfig+0x80>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a29      	ldr	r2, [pc, #164]	@ (80041b8 <TIM_OC1_SetConfig+0x118>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d003      	beq.n	8004120 <TIM_OC1_SetConfig+0x80>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a28      	ldr	r2, [pc, #160]	@ (80041bc <TIM_OC1_SetConfig+0x11c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10c      	bne.n	800413a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0308 	bic.w	r3, r3, #8
 8004126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1b      	ldr	r2, [pc, #108]	@ (80041ac <TIM_OC1_SetConfig+0x10c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00f      	beq.n	8004162 <TIM_OC1_SetConfig+0xc2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1a      	ldr	r2, [pc, #104]	@ (80041b0 <TIM_OC1_SetConfig+0x110>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_OC1_SetConfig+0xc2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <TIM_OC1_SetConfig+0x114>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_OC1_SetConfig+0xc2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <TIM_OC1_SetConfig+0x118>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_OC1_SetConfig+0xc2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a17      	ldr	r2, [pc, #92]	@ (80041bc <TIM_OC1_SetConfig+0x11c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d111      	bne.n	8004186 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]
}
 80041a0:	bf00      	nop
 80041a2:	371c      	adds	r7, #28
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	40012c00 	.word	0x40012c00
 80041b0:	40013400 	.word	0x40013400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40014400 	.word	0x40014400
 80041bc:	40014800 	.word	0x40014800

080041c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f023 0210 	bic.w	r2, r3, #16
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0320 	bic.w	r3, r3, #32
 800420e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a28      	ldr	r2, [pc, #160]	@ (80042c0 <TIM_OC2_SetConfig+0x100>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC2_SetConfig+0x6c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a27      	ldr	r2, [pc, #156]	@ (80042c4 <TIM_OC2_SetConfig+0x104>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10d      	bne.n	8004248 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a1d      	ldr	r2, [pc, #116]	@ (80042c0 <TIM_OC2_SetConfig+0x100>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00f      	beq.n	8004270 <TIM_OC2_SetConfig+0xb0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a1c      	ldr	r2, [pc, #112]	@ (80042c4 <TIM_OC2_SetConfig+0x104>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00b      	beq.n	8004270 <TIM_OC2_SetConfig+0xb0>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a1b      	ldr	r2, [pc, #108]	@ (80042c8 <TIM_OC2_SetConfig+0x108>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_OC2_SetConfig+0xb0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <TIM_OC2_SetConfig+0x10c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_OC2_SetConfig+0xb0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a19      	ldr	r2, [pc, #100]	@ (80042d0 <TIM_OC2_SetConfig+0x110>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d113      	bne.n	8004298 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004276:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800427e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	621a      	str	r2, [r3, #32]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800

080042d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004302:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a27      	ldr	r2, [pc, #156]	@ (80043d0 <TIM_OC3_SetConfig+0xfc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d003      	beq.n	800433e <TIM_OC3_SetConfig+0x6a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a26      	ldr	r2, [pc, #152]	@ (80043d4 <TIM_OC3_SetConfig+0x100>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d10d      	bne.n	800435a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004358:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a1c      	ldr	r2, [pc, #112]	@ (80043d0 <TIM_OC3_SetConfig+0xfc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00f      	beq.n	8004382 <TIM_OC3_SetConfig+0xae>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a1b      	ldr	r2, [pc, #108]	@ (80043d4 <TIM_OC3_SetConfig+0x100>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00b      	beq.n	8004382 <TIM_OC3_SetConfig+0xae>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a1a      	ldr	r2, [pc, #104]	@ (80043d8 <TIM_OC3_SetConfig+0x104>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d007      	beq.n	8004382 <TIM_OC3_SetConfig+0xae>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a19      	ldr	r2, [pc, #100]	@ (80043dc <TIM_OC3_SetConfig+0x108>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d003      	beq.n	8004382 <TIM_OC3_SetConfig+0xae>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a18      	ldr	r2, [pc, #96]	@ (80043e0 <TIM_OC3_SetConfig+0x10c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d113      	bne.n	80043aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	621a      	str	r2, [r3, #32]
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40013400 	.word	0x40013400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800

080043e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	021b      	lsls	r3, r3, #8
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	031b      	lsls	r3, r3, #12
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a18      	ldr	r2, [pc, #96]	@ (80044a4 <TIM_OC4_SetConfig+0xc0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00f      	beq.n	8004468 <TIM_OC4_SetConfig+0x84>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a17      	ldr	r2, [pc, #92]	@ (80044a8 <TIM_OC4_SetConfig+0xc4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00b      	beq.n	8004468 <TIM_OC4_SetConfig+0x84>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a16      	ldr	r2, [pc, #88]	@ (80044ac <TIM_OC4_SetConfig+0xc8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_OC4_SetConfig+0x84>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a15      	ldr	r2, [pc, #84]	@ (80044b0 <TIM_OC4_SetConfig+0xcc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC4_SetConfig+0x84>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a14      	ldr	r2, [pc, #80]	@ (80044b4 <TIM_OC4_SetConfig+0xd0>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d109      	bne.n	800447c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800446e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	019b      	lsls	r3, r3, #6
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40013400 	.word	0x40013400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800

080044b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80044fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a17      	ldr	r2, [pc, #92]	@ (800456c <TIM_OC5_SetConfig+0xb4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_OC5_SetConfig+0x7a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a16      	ldr	r2, [pc, #88]	@ (8004570 <TIM_OC5_SetConfig+0xb8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_OC5_SetConfig+0x7a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a15      	ldr	r2, [pc, #84]	@ (8004574 <TIM_OC5_SetConfig+0xbc>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_OC5_SetConfig+0x7a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a14      	ldr	r2, [pc, #80]	@ (8004578 <TIM_OC5_SetConfig+0xc0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_OC5_SetConfig+0x7a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a13      	ldr	r2, [pc, #76]	@ (800457c <TIM_OC5_SetConfig+0xc4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d109      	bne.n	8004546 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004538:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	621a      	str	r2, [r3, #32]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40012c00 	.word	0x40012c00
 8004570:	40013400 	.word	0x40013400
 8004574:	40014000 	.word	0x40014000
 8004578:	40014400 	.word	0x40014400
 800457c:	40014800 	.word	0x40014800

08004580 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	051b      	lsls	r3, r3, #20
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a18      	ldr	r2, [pc, #96]	@ (8004638 <TIM_OC6_SetConfig+0xb8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d00f      	beq.n	80045fc <TIM_OC6_SetConfig+0x7c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a17      	ldr	r2, [pc, #92]	@ (800463c <TIM_OC6_SetConfig+0xbc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00b      	beq.n	80045fc <TIM_OC6_SetConfig+0x7c>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a16      	ldr	r2, [pc, #88]	@ (8004640 <TIM_OC6_SetConfig+0xc0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d007      	beq.n	80045fc <TIM_OC6_SetConfig+0x7c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a15      	ldr	r2, [pc, #84]	@ (8004644 <TIM_OC6_SetConfig+0xc4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_OC6_SetConfig+0x7c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a14      	ldr	r2, [pc, #80]	@ (8004648 <TIM_OC6_SetConfig+0xc8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d109      	bne.n	8004610 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004602:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	029b      	lsls	r3, r3, #10
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	621a      	str	r2, [r3, #32]
}
 800462a:	bf00      	nop
 800462c:	371c      	adds	r7, #28
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40012c00 	.word	0x40012c00
 800463c:	40013400 	.word	0x40013400
 8004640:	40014000 	.word	0x40014000
 8004644:	40014400 	.word	0x40014400
 8004648:	40014800 	.word	0x40014800

0800464c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f023 0201 	bic.w	r2, r3, #1
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 030a 	bic.w	r3, r3, #10
 8004688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b087      	sub	sp, #28
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	60f8      	str	r0, [r7, #12]
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f023 0210 	bic.w	r2, r3, #16
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	031b      	lsls	r3, r3, #12
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	f043 0307 	orr.w	r3, r3, #7
 800472c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	609a      	str	r2, [r3, #8]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800475a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	021a      	lsls	r2, r3, #8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	431a      	orrs	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4313      	orrs	r3, r2
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 031f 	and.w	r3, r3, #31
 8004792:	2201      	movs	r2, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1a      	ldr	r2, [r3, #32]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1a      	ldr	r2, [r3, #32]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 031f 	and.w	r3, r3, #31
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	431a      	orrs	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e063      	b.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2b      	ldr	r2, [pc, #172]	@ (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2a      	ldr	r2, [pc, #168]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d108      	bne.n	800482a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800481e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004830:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1b      	ldr	r2, [pc, #108]	@ (80048b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d018      	beq.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004856:	d013      	beq.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a17      	ldr	r2, [pc, #92]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d009      	beq.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a12      	ldr	r2, [pc, #72]	@ (80048bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d004      	beq.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a13      	ldr	r2, [pc, #76]	@ (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d10c      	bne.n	800489a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	4313      	orrs	r3, r2
 8004890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40013400 	.word	0x40013400
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40014000 	.word	0x40014000

080048cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e065      	b.n	80049b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a16      	ldr	r2, [pc, #88]	@ (80049c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d004      	beq.n	8004976 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a14      	ldr	r2, [pc, #80]	@ (80049c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d115      	bne.n	80049a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	051b      	lsls	r3, r3, #20
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40013400 	.word	0x40013400

080049c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e040      	b.n	8004a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc f94a 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	@ 0x24
 8004a30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0201 	bic.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f9fc 	bl	8004e48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f825 	bl	8004aa0 <UART_SetConfig>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e01b      	b.n	8004a98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fa7b 	bl	8004f8c <UART_CheckIdleState>
 8004a96:	4603      	mov	r3, r0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004ace:	f023 030c 	bic.w	r3, r3, #12
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	6979      	ldr	r1, [r7, #20]
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4aa7      	ldr	r2, [pc, #668]	@ (8004db8 <UART_SetConfig+0x318>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d120      	bne.n	8004b62 <UART_SetConfig+0xc2>
 8004b20:	4ba6      	ldr	r3, [pc, #664]	@ (8004dbc <UART_SetConfig+0x31c>)
 8004b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b24:	f003 0303 	and.w	r3, r3, #3
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d817      	bhi.n	8004b5c <UART_SetConfig+0xbc>
 8004b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <UART_SetConfig+0x94>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b51 	.word	0x08004b51
 8004b3c:	08004b57 	.word	0x08004b57
 8004b40:	08004b4b 	.word	0x08004b4b
 8004b44:	2301      	movs	r3, #1
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e0b5      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e0b2      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004b50:	2304      	movs	r3, #4
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e0af      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004b56:	2308      	movs	r3, #8
 8004b58:	77fb      	strb	r3, [r7, #31]
 8004b5a:	e0ac      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004b5c:	2310      	movs	r3, #16
 8004b5e:	77fb      	strb	r3, [r7, #31]
 8004b60:	e0a9      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a96      	ldr	r2, [pc, #600]	@ (8004dc0 <UART_SetConfig+0x320>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d124      	bne.n	8004bb6 <UART_SetConfig+0x116>
 8004b6c:	4b93      	ldr	r3, [pc, #588]	@ (8004dbc <UART_SetConfig+0x31c>)
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b78:	d011      	beq.n	8004b9e <UART_SetConfig+0xfe>
 8004b7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b7e:	d817      	bhi.n	8004bb0 <UART_SetConfig+0x110>
 8004b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b84:	d011      	beq.n	8004baa <UART_SetConfig+0x10a>
 8004b86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b8a:	d811      	bhi.n	8004bb0 <UART_SetConfig+0x110>
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <UART_SetConfig+0xf8>
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b94:	d006      	beq.n	8004ba4 <UART_SetConfig+0x104>
 8004b96:	e00b      	b.n	8004bb0 <UART_SetConfig+0x110>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e08b      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e088      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e085      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004baa:	2308      	movs	r3, #8
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e082      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004bb0:	2310      	movs	r3, #16
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e07f      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a82      	ldr	r2, [pc, #520]	@ (8004dc4 <UART_SetConfig+0x324>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d124      	bne.n	8004c0a <UART_SetConfig+0x16a>
 8004bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8004dbc <UART_SetConfig+0x31c>)
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004bc8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bcc:	d011      	beq.n	8004bf2 <UART_SetConfig+0x152>
 8004bce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bd2:	d817      	bhi.n	8004c04 <UART_SetConfig+0x164>
 8004bd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bd8:	d011      	beq.n	8004bfe <UART_SetConfig+0x15e>
 8004bda:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bde:	d811      	bhi.n	8004c04 <UART_SetConfig+0x164>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <UART_SetConfig+0x14c>
 8004be4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004be8:	d006      	beq.n	8004bf8 <UART_SetConfig+0x158>
 8004bea:	e00b      	b.n	8004c04 <UART_SetConfig+0x164>
 8004bec:	2300      	movs	r3, #0
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e061      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e05e      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004bf8:	2304      	movs	r3, #4
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e05b      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004bfe:	2308      	movs	r3, #8
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e058      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c04:	2310      	movs	r3, #16
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e055      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8004dc8 <UART_SetConfig+0x328>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d124      	bne.n	8004c5e <UART_SetConfig+0x1be>
 8004c14:	4b69      	ldr	r3, [pc, #420]	@ (8004dbc <UART_SetConfig+0x31c>)
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004c1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c20:	d011      	beq.n	8004c46 <UART_SetConfig+0x1a6>
 8004c22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c26:	d817      	bhi.n	8004c58 <UART_SetConfig+0x1b8>
 8004c28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c2c:	d011      	beq.n	8004c52 <UART_SetConfig+0x1b2>
 8004c2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c32:	d811      	bhi.n	8004c58 <UART_SetConfig+0x1b8>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <UART_SetConfig+0x1a0>
 8004c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c3c:	d006      	beq.n	8004c4c <UART_SetConfig+0x1ac>
 8004c3e:	e00b      	b.n	8004c58 <UART_SetConfig+0x1b8>
 8004c40:	2300      	movs	r3, #0
 8004c42:	77fb      	strb	r3, [r7, #31]
 8004c44:	e037      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c46:	2302      	movs	r3, #2
 8004c48:	77fb      	strb	r3, [r7, #31]
 8004c4a:	e034      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e031      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c52:	2308      	movs	r3, #8
 8004c54:	77fb      	strb	r3, [r7, #31]
 8004c56:	e02e      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c58:	2310      	movs	r3, #16
 8004c5a:	77fb      	strb	r3, [r7, #31]
 8004c5c:	e02b      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a5a      	ldr	r2, [pc, #360]	@ (8004dcc <UART_SetConfig+0x32c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d124      	bne.n	8004cb2 <UART_SetConfig+0x212>
 8004c68:	4b54      	ldr	r3, [pc, #336]	@ (8004dbc <UART_SetConfig+0x31c>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004c70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c74:	d011      	beq.n	8004c9a <UART_SetConfig+0x1fa>
 8004c76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c7a:	d817      	bhi.n	8004cac <UART_SetConfig+0x20c>
 8004c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c80:	d011      	beq.n	8004ca6 <UART_SetConfig+0x206>
 8004c82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c86:	d811      	bhi.n	8004cac <UART_SetConfig+0x20c>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <UART_SetConfig+0x1f4>
 8004c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c90:	d006      	beq.n	8004ca0 <UART_SetConfig+0x200>
 8004c92:	e00b      	b.n	8004cac <UART_SetConfig+0x20c>
 8004c94:	2300      	movs	r3, #0
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e00d      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e00a      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004ca0:	2304      	movs	r3, #4
 8004ca2:	77fb      	strb	r3, [r7, #31]
 8004ca4:	e007      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e004      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004cac:	2310      	movs	r3, #16
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e001      	b.n	8004cb6 <UART_SetConfig+0x216>
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cbe:	d15b      	bne.n	8004d78 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004cc0:	7ffb      	ldrb	r3, [r7, #31]
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d827      	bhi.n	8004d16 <UART_SetConfig+0x276>
 8004cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <UART_SetConfig+0x22c>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	08004d17 	.word	0x08004d17
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d17 	.word	0x08004d17
 8004ce4:	08004d17 	.word	0x08004d17
 8004ce8:	08004d17 	.word	0x08004d17
 8004cec:	08004d0f 	.word	0x08004d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe f9d0 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	61b8      	str	r0, [r7, #24]
        break;
 8004cf6:	e013      	b.n	8004d20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe f9ee 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 8004cfc:	61b8      	str	r0, [r7, #24]
        break;
 8004cfe:	e00f      	b.n	8004d20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d00:	4b33      	ldr	r3, [pc, #204]	@ (8004dd0 <UART_SetConfig+0x330>)
 8004d02:	61bb      	str	r3, [r7, #24]
        break;
 8004d04:	e00c      	b.n	8004d20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d06:	f7fe f965 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8004d0a:	61b8      	str	r0, [r7, #24]
        break;
 8004d0c:	e008      	b.n	8004d20 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d12:	61bb      	str	r3, [r7, #24]
        break;
 8004d14:	e004      	b.n	8004d20 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8082 	beq.w	8004e2c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	005a      	lsls	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	441a      	add	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b0f      	cmp	r3, #15
 8004d42:	d916      	bls.n	8004d72 <UART_SetConfig+0x2d2>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4a:	d212      	bcs.n	8004d72 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f023 030f 	bic.w	r3, r3, #15
 8004d54:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	89fb      	ldrh	r3, [r7, #14]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	89fa      	ldrh	r2, [r7, #14]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	e05c      	b.n	8004e2c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	77bb      	strb	r3, [r7, #30]
 8004d76:	e059      	b.n	8004e2c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d835      	bhi.n	8004dea <UART_SetConfig+0x34a>
 8004d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <UART_SetConfig+0x2e4>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004dd5 	.word	0x08004dd5
 8004d90:	08004deb 	.word	0x08004deb
 8004d94:	08004ddb 	.word	0x08004ddb
 8004d98:	08004deb 	.word	0x08004deb
 8004d9c:	08004deb 	.word	0x08004deb
 8004da0:	08004deb 	.word	0x08004deb
 8004da4:	08004de3 	.word	0x08004de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fe f974 	bl	8003094 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61b8      	str	r0, [r7, #24]
        break;
 8004dae:	e021      	b.n	8004df4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db0:	f7fe f992 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 8004db4:	61b8      	str	r0, [r7, #24]
        break;
 8004db6:	e01d      	b.n	8004df4 <UART_SetConfig+0x354>
 8004db8:	40013800 	.word	0x40013800
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	40004400 	.word	0x40004400
 8004dc4:	40004800 	.word	0x40004800
 8004dc8:	40004c00 	.word	0x40004c00
 8004dcc:	40005000 	.word	0x40005000
 8004dd0:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e44 <UART_SetConfig+0x3a4>)
 8004dd6:	61bb      	str	r3, [r7, #24]
        break;
 8004dd8:	e00c      	b.n	8004df4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dda:	f7fe f8fb 	bl	8002fd4 <HAL_RCC_GetSysClockFreq>
 8004dde:	61b8      	str	r0, [r7, #24]
        break;
 8004de0:	e008      	b.n	8004df4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004de6:	61bb      	str	r3, [r7, #24]
        break;
 8004de8:	e004      	b.n	8004df4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	77bb      	strb	r3, [r7, #30]
        break;
 8004df2:	bf00      	nop
    }

    if (pclk != 0U)
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	085a      	lsrs	r2, r3, #1
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	441a      	add	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b0f      	cmp	r3, #15
 8004e12:	d909      	bls.n	8004e28 <UART_SetConfig+0x388>
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e1a:	d205      	bcs.n	8004e28 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60da      	str	r2, [r3, #12]
 8004e26:	e001      	b.n	8004e2c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e38:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	007a1200 	.word	0x007a1200

08004e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f46:	d10a      	bne.n	8004f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b098      	sub	sp, #96	@ 0x60
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f9c:	f7fc f822 	bl	8000fe4 <HAL_GetTick>
 8004fa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d12e      	bne.n	800500e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f88c 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d021      	beq.n	800500e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd2:	e853 3f00 	ldrex	r3, [r3]
 8004fd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fde:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fe8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ff0:	e841 2300 	strex	r3, r2, [r1]
 8004ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1e6      	bne.n	8004fca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e062      	b.n	80050d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d149      	bne.n	80050b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800501c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f856 	bl	80050dc <UART_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d03c      	beq.n	80050b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	623b      	str	r3, [r7, #32]
   return(result);
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800504a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005054:	633b      	str	r3, [r7, #48]	@ 0x30
 8005056:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800505a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e6      	bne.n	8005036 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	60fb      	str	r3, [r7, #12]
   return(result);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	3308      	adds	r3, #8
 8005086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005088:	61fa      	str	r2, [r7, #28]
 800508a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	617b      	str	r3, [r7, #20]
   return(result);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e5      	bne.n	8005068 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e011      	b.n	80050d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3758      	adds	r7, #88	@ 0x58
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	603b      	str	r3, [r7, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ec:	e04f      	b.n	800518e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050f4:	d04b      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fb ff75 	bl	8000fe4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <UART_WaitOnFlagUntilTimeout+0x30>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e04e      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	d037      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0xb2>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b80      	cmp	r3, #128	@ 0x80
 8005122:	d034      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d031      	beq.n	800518e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b08      	cmp	r3, #8
 8005136:	d110      	bne.n	800515a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2208      	movs	r2, #8
 800513e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f838 	bl	80051b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2208      	movs	r2, #8
 800514a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e029      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005168:	d111      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f81e 	bl	80051b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e00f      	b.n	80051ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69da      	ldr	r2, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4013      	ands	r3, r2
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	429a      	cmp	r2, r3
 800519c:	bf0c      	ite	eq
 800519e:	2301      	moveq	r3, #1
 80051a0:	2300      	movne	r3, #0
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d0a0      	beq.n	80050ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b095      	sub	sp, #84	@ 0x54
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e6      	bne.n	80051be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3308      	adds	r3, #8
 80051f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005210:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005228:	2b01      	cmp	r3, #1
 800522a:	d118      	bne.n	800525e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	60bb      	str	r3, [r7, #8]
   return(result);
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	f023 0310 	bic.w	r3, r3, #16
 8005240:	647b      	str	r3, [r7, #68]	@ 0x44
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6979      	ldr	r1, [r7, #20]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	613b      	str	r3, [r7, #16]
   return(result);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e6      	bne.n	800522c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005272:	bf00      	nop
 8005274:	3754      	adds	r7, #84	@ 0x54
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800527e:	b480      	push	{r7}
 8005280:	b085      	sub	sp, #20
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005286:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800528a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	b29b      	uxth	r3, r3
 8005298:	43db      	mvns	r3, r3
 800529a:	b29b      	uxth	r3, r3
 800529c:	4013      	ands	r3, r2
 800529e:	b29a      	uxth	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	1d3b      	adds	r3, r7, #4
 80052be:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <memset>:
 80052f0:	4402      	add	r2, r0
 80052f2:	4603      	mov	r3, r0
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d100      	bne.n	80052fa <memset+0xa>
 80052f8:	4770      	bx	lr
 80052fa:	f803 1b01 	strb.w	r1, [r3], #1
 80052fe:	e7f9      	b.n	80052f4 <memset+0x4>

08005300 <__libc_init_array>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4d0d      	ldr	r5, [pc, #52]	@ (8005338 <__libc_init_array+0x38>)
 8005304:	4c0d      	ldr	r4, [pc, #52]	@ (800533c <__libc_init_array+0x3c>)
 8005306:	1b64      	subs	r4, r4, r5
 8005308:	10a4      	asrs	r4, r4, #2
 800530a:	2600      	movs	r6, #0
 800530c:	42a6      	cmp	r6, r4
 800530e:	d109      	bne.n	8005324 <__libc_init_array+0x24>
 8005310:	4d0b      	ldr	r5, [pc, #44]	@ (8005340 <__libc_init_array+0x40>)
 8005312:	4c0c      	ldr	r4, [pc, #48]	@ (8005344 <__libc_init_array+0x44>)
 8005314:	f000 f818 	bl	8005348 <_init>
 8005318:	1b64      	subs	r4, r4, r5
 800531a:	10a4      	asrs	r4, r4, #2
 800531c:	2600      	movs	r6, #0
 800531e:	42a6      	cmp	r6, r4
 8005320:	d105      	bne.n	800532e <__libc_init_array+0x2e>
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	f855 3b04 	ldr.w	r3, [r5], #4
 8005328:	4798      	blx	r3
 800532a:	3601      	adds	r6, #1
 800532c:	e7ee      	b.n	800530c <__libc_init_array+0xc>
 800532e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005332:	4798      	blx	r3
 8005334:	3601      	adds	r6, #1
 8005336:	e7f2      	b.n	800531e <__libc_init_array+0x1e>
 8005338:	08005398 	.word	0x08005398
 800533c:	08005398 	.word	0x08005398
 8005340:	08005398 	.word	0x08005398
 8005344:	0800539c 	.word	0x0800539c

08005348 <_init>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr

08005354 <_fini>:
 8005354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005356:	bf00      	nop
 8005358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535a:	bc08      	pop	{r3}
 800535c:	469e      	mov	lr, r3
 800535e:	4770      	bx	lr

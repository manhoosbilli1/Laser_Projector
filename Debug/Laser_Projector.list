
Laser_Projector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000583c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080059cc  080059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a58  08005a58  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a58  08005a58  00006a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a60  08005a60  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a64  08005a64  00006a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005a68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000006a0  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006fc  200006fc  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016108  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000285d  00000000  00000000  0001d194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  0001f9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1d  00000000  00000000  00020d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7c8  00000000  00000000  00021c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018294  00000000  00000000  00040405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbf56  00000000  00000000  00058699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001145ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057b4  00000000  00000000  00114634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00119de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059b4 	.word	0x080059b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080059b4 	.word	0x080059b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b08a      	sub	sp, #40	@ 0x28
 8000274:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000276:	f000 fe03 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027a:	f000 f851 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027e:	f000 fad7 	bl	8000830 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000282:	f000 f8b3 	bl	80003ec <MX_I2C1_Init>
  MX_SPI1_Init();
 8000286:	f000 f8f1 	bl	800046c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800028a:	f000 faaf 	bl	80007ec <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800028e:	f000 f9fb 	bl	8000688 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000292:	f000 fa4b 	bl	800072c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000296:	f000 f927 	bl	80004e8 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800029a:	f000 fa77 	bl	800078c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 10;
 800029e:	4b1c      	ldr	r3, [pc, #112]	@ (8000310 <main+0xa0>)
 80002a0:	220a      	movs	r2, #10
 80002a2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 80;
 80002a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000310 <main+0xa0>)
 80002a6:	2250      	movs	r2, #80	@ 0x50
 80002a8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR4 = 80;
 80002aa:	4b19      	ldr	r3, [pc, #100]	@ (8000310 <main+0xa0>)
 80002ac:	2250      	movs	r2, #80	@ 0x50
 80002ae:	641a      	str	r2, [r3, #64]	@ 0x40
  uint8_t MSG[35] = {'\0'};
 80002b0:	2300      	movs	r3, #0
 80002b2:	607b      	str	r3, [r7, #4]
 80002b4:	f107 0308 	add.w	r3, r7, #8
 80002b8:	221f      	movs	r2, #31
 80002ba:	2100      	movs	r1, #0
 80002bc:	4618      	mov	r0, r3
 80002be:	f004 fef9 	bl	80050b4 <memset>
  uint8_t X = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80002c8:	2100      	movs	r1, #0
 80002ca:	4812      	ldr	r0, [pc, #72]	@ (8000314 <main+0xa4>)
 80002cc:	f003 f872 	bl	80033b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80002d0:	2104      	movs	r1, #4
 80002d2:	4810      	ldr	r0, [pc, #64]	@ (8000314 <main+0xa4>)
 80002d4:	f003 f86e 	bl	80033b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80002d8:	210c      	movs	r1, #12
 80002da:	480e      	ldr	r0, [pc, #56]	@ (8000314 <main+0xa4>)
 80002dc:	f003 f86a 	bl	80033b4 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	     sprintf(MSG, "Hello Dudes! Tracing X = %d\r\n", X);
 80002e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	490c      	ldr	r1, [pc, #48]	@ (8000318 <main+0xa8>)
 80002e8:	4618      	mov	r0, r3
 80002ea:	f004 fec3 	bl	8005074 <siprintf>
	     HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 80002ee:	1d39      	adds	r1, r7, #4
 80002f0:	2364      	movs	r3, #100	@ 0x64
 80002f2:	2223      	movs	r2, #35	@ 0x23
 80002f4:	4809      	ldr	r0, [pc, #36]	@ (800031c <main+0xac>)
 80002f6:	f004 fa0b 	bl	8004710 <HAL_UART_Transmit>
	     HAL_Delay(500);
 80002fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002fe:	f000 fe25 	bl	8000f4c <HAL_Delay>
	     X++;
 8000302:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000306:	3301      	adds	r3, #1
 8000308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  {
 800030c:	bf00      	nop
 800030e:	e7e7      	b.n	80002e0 <main+0x70>
 8000310:	40012c00 	.word	0x40012c00
 8000314:	20000130 	.word	0x20000130
 8000318:	080059cc 	.word	0x080059cc
 800031c:	200001c8 	.word	0x200001c8

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b09e      	sub	sp, #120	@ 0x78
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800032a:	2228      	movs	r2, #40	@ 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f004 fec0 	bl	80050b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000344:	463b      	mov	r3, r7
 8000346:	223c      	movs	r2, #60	@ 0x3c
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f004 feb2 	bl	80050b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000350:	2303      	movs	r3, #3
 8000352:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000354:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000358:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000362:	2310      	movs	r3, #16
 8000364:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000366:	2302      	movs	r3, #2
 8000368:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800036e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000370:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000374:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800037a:	4618      	mov	r0, r3
 800037c:	f001 faa8 	bl	80018d0 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000386:	f000 fad1 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000396:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800039a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 fad0 	bl	800294c <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003b2:	f000 fabb 	bl	800092c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <SystemClock_Config+0xc8>)
 80003b8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003c6:	2300      	movs	r3, #0
 80003c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003ca:	2300      	movs	r3, #0
 80003cc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	463b      	mov	r3, r7
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fcdb 	bl	8002d8c <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80003dc:	f000 faa6 	bl	800092c <Error_Handler>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3778      	adds	r7, #120	@ 0x78
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	00021023 	.word	0x00021023

080003ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000460 <MX_I2C1_Init+0x74>)
 80003f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000464 <MX_I2C1_Init+0x78>)
 80003f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000460 <MX_I2C1_Init+0x74>)
 80003f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000468 <MX_I2C1_Init+0x7c>)
 80003fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003fc:	4b18      	ldr	r3, [pc, #96]	@ (8000460 <MX_I2C1_Init+0x74>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000402:	4b17      	ldr	r3, [pc, #92]	@ (8000460 <MX_I2C1_Init+0x74>)
 8000404:	2201      	movs	r2, #1
 8000406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000408:	4b15      	ldr	r3, [pc, #84]	@ (8000460 <MX_I2C1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800040e:	4b14      	ldr	r3, [pc, #80]	@ (8000460 <MX_I2C1_Init+0x74>)
 8000410:	2200      	movs	r2, #0
 8000412:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <MX_I2C1_Init+0x74>)
 8000416:	2200      	movs	r2, #0
 8000418:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800041a:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <MX_I2C1_Init+0x74>)
 800041c:	2200      	movs	r2, #0
 800041e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000420:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_I2C1_Init+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000426:	480e      	ldr	r0, [pc, #56]	@ (8000460 <MX_I2C1_Init+0x74>)
 8000428:	f001 f858 	bl	80014dc <HAL_I2C_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000432:	f000 fa7b 	bl	800092c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000436:	2100      	movs	r1, #0
 8000438:	4809      	ldr	r0, [pc, #36]	@ (8000460 <MX_I2C1_Init+0x74>)
 800043a:	f001 f8ea 	bl	8001612 <HAL_I2CEx_ConfigAnalogFilter>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000444:	f000 fa72 	bl	800092c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000448:	2100      	movs	r1, #0
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <MX_I2C1_Init+0x74>)
 800044c:	f001 f92c 	bl	80016a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000456:	f000 fa69 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000078 	.word	0x20000078
 8000464:	40005400 	.word	0x40005400
 8000468:	2000090e 	.word	0x2000090e

0800046c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <MX_SPI1_Init+0x74>)
 8000472:	4a1c      	ldr	r2, [pc, #112]	@ (80004e4 <MX_SPI1_Init+0x78>)
 8000474:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000476:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <MX_SPI1_Init+0x74>)
 8000478:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800047c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800047e:	4b18      	ldr	r3, [pc, #96]	@ (80004e0 <MX_SPI1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000484:	4b16      	ldr	r3, [pc, #88]	@ (80004e0 <MX_SPI1_Init+0x74>)
 8000486:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800048a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800048c:	4b14      	ldr	r3, [pc, #80]	@ (80004e0 <MX_SPI1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000492:	4b13      	ldr	r3, [pc, #76]	@ (80004e0 <MX_SPI1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000498:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <MX_SPI1_Init+0x74>)
 800049a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800049e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <MX_SPI1_Init+0x74>)
 80004a2:	2208      	movs	r2, #8
 80004a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004a6:	4b0e      	ldr	r3, [pc, #56]	@ (80004e0 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <MX_SPI1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	@ (80004e0 <MX_SPI1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004b8:	4b09      	ldr	r3, [pc, #36]	@ (80004e0 <MX_SPI1_Init+0x74>)
 80004ba:	2207      	movs	r2, #7
 80004bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004be:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <MX_SPI1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <MX_SPI1_Init+0x74>)
 80004c6:	2208      	movs	r2, #8
 80004c8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ca:	4805      	ldr	r0, [pc, #20]	@ (80004e0 <MX_SPI1_Init+0x74>)
 80004cc:	f002 fe0e 	bl	80030ec <HAL_SPI_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004d6:	f000 fa29 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200000cc 	.word	0x200000cc
 80004e4:	40013000 	.word	0x40013000

080004e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09a      	sub	sp, #104	@ 0x68
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000508:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]
 8000518:	615a      	str	r2, [r3, #20]
 800051a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	222c      	movs	r2, #44	@ 0x2c
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f004 fdc6 	bl	80050b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000528:	4b55      	ldr	r3, [pc, #340]	@ (8000680 <MX_TIM1_Init+0x198>)
 800052a:	4a56      	ldr	r2, [pc, #344]	@ (8000684 <MX_TIM1_Init+0x19c>)
 800052c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800052e:	4b54      	ldr	r3, [pc, #336]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000530:	2247      	movs	r2, #71	@ 0x47
 8000532:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	4b52      	ldr	r3, [pc, #328]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800053a:	4b51      	ldr	r3, [pc, #324]	@ (8000680 <MX_TIM1_Init+0x198>)
 800053c:	2263      	movs	r2, #99	@ 0x63
 800053e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000540:	4b4f      	ldr	r3, [pc, #316]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000546:	4b4e      	ldr	r3, [pc, #312]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000548:	2200      	movs	r2, #0
 800054a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054c:	4b4c      	ldr	r3, [pc, #304]	@ (8000680 <MX_TIM1_Init+0x198>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000552:	484b      	ldr	r0, [pc, #300]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000554:	f002 fe75 	bl	8003242 <HAL_TIM_Base_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800055e:	f000 f9e5 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000566:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000568:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800056c:	4619      	mov	r1, r3
 800056e:	4844      	ldr	r0, [pc, #272]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000570:	f003 fa36 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800057a:	f000 f9d7 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800057e:	4840      	ldr	r0, [pc, #256]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000580:	f002 feb6 	bl	80032f0 <HAL_TIM_PWM_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800058a:	f000 f9cf 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800058e:	2300      	movs	r3, #0
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000592:	2300      	movs	r3, #0
 8000594:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000596:	2300      	movs	r3, #0
 8000598:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800059a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800059e:	4619      	mov	r1, r3
 80005a0:	4837      	ldr	r0, [pc, #220]	@ (8000680 <MX_TIM1_Init+0x198>)
 80005a2:	f003 ff4b 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80005ac:	f000 f9be 	bl	800092c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b0:	2360      	movs	r3, #96	@ 0x60
 80005b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005bc:	2300      	movs	r3, #0
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005c8:	2300      	movs	r3, #0
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	482a      	ldr	r0, [pc, #168]	@ (8000680 <MX_TIM1_Init+0x198>)
 80005d6:	f003 f8ef 	bl	80037b8 <HAL_TIM_PWM_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80005e0:	f000 f9a4 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005e4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005e8:	2204      	movs	r2, #4
 80005ea:	4619      	mov	r1, r3
 80005ec:	4824      	ldr	r0, [pc, #144]	@ (8000680 <MX_TIM1_Init+0x198>)
 80005ee:	f003 f8e3 	bl	80037b8 <HAL_TIM_PWM_ConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80005f8:	f000 f998 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000600:	2208      	movs	r2, #8
 8000602:	4619      	mov	r1, r3
 8000604:	481e      	ldr	r0, [pc, #120]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000606:	f003 f8d7 	bl	80037b8 <HAL_TIM_PWM_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000610:	f000 f98c 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000614:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000618:	220c      	movs	r2, #12
 800061a:	4619      	mov	r1, r3
 800061c:	4818      	ldr	r0, [pc, #96]	@ (8000680 <MX_TIM1_Init+0x198>)
 800061e:	f003 f8cb 	bl	80037b8 <HAL_TIM_PWM_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000628:	f000 f980 	bl	800092c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000644:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800064e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4807      	ldr	r0, [pc, #28]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000662:	f003 ff6b 	bl	800453c <HAL_TIMEx_ConfigBreakDeadTime>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 800066c:	f000 f95e 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000670:	4803      	ldr	r0, [pc, #12]	@ (8000680 <MX_TIM1_Init+0x198>)
 8000672:	f000 fa69 	bl	8000b48 <HAL_TIM_MspPostInit>

}
 8000676:	bf00      	nop
 8000678:	3768      	adds	r7, #104	@ 0x68
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000130 	.word	0x20000130
 8000684:	40012c00 	.word	0x40012c00

08000688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <MX_TIM2_Init+0xa0>)
 80006a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <MX_TIM2_Init+0xa0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000728 <MX_TIM2_Init+0xa0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <MX_TIM2_Init+0xa0>)
 80006bc:	2214      	movs	r2, #20
 80006be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c0:	4b19      	ldr	r3, [pc, #100]	@ (8000728 <MX_TIM2_Init+0xa0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <MX_TIM2_Init+0xa0>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006cc:	4816      	ldr	r0, [pc, #88]	@ (8000728 <MX_TIM2_Init+0xa0>)
 80006ce:	f002 fdb8 	bl	8003242 <HAL_TIM_Base_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006d8:	f000 f928 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80006dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e0:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 15;
 80006ea:	230f      	movs	r3, #15
 80006ec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ee:	f107 0310 	add.w	r3, r7, #16
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <MX_TIM2_Init+0xa0>)
 80006f6:	f003 f973 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000700:	f000 f914 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	@ (8000728 <MX_TIM2_Init+0xa0>)
 8000712:	f003 fe93 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800071c:	f000 f906 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000017c 	.word	0x2000017c

0800072c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <MX_USART1_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 8000738:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_USART1_UART_Init+0x58>)
 8000770:	f003 ff80 	bl	8004674 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f8d7 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200001c8 	.word	0x200001c8
 8000788:	40013800 	.word	0x40013800

0800078c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	@ (80007e8 <MX_USART2_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 8000798:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800079c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_USART2_UART_Init+0x58>)
 80007d0:	f003 ff50 	bl	8004674 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 f8a7 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000250 	.word	0x20000250
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_USB_PCD_Init+0x3c>)
 80007f2:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <MX_USB_PCD_Init+0x40>)
 80007f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USB_PCD_Init+0x3c>)
 80007f8:	2208      	movs	r2, #8
 80007fa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_USB_PCD_Init+0x3c>)
 80007fe:	2202      	movs	r2, #2
 8000800:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USB_PCD_Init+0x3c>)
 8000804:	2202      	movs	r2, #2
 8000806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_USB_PCD_Init+0x3c>)
 800080a:	2200      	movs	r2, #0
 800080c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USB_PCD_Init+0x3c>)
 8000810:	2200      	movs	r2, #0
 8000812:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_USB_PCD_Init+0x3c>)
 8000816:	f000 ff93 	bl	8001740 <HAL_PCD_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000820:	f000 f884 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200002d8 	.word	0x200002d8
 800082c:	40005c00 	.word	0x40005c00

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <MX_GPIO_Init+0xf4>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a36      	ldr	r2, [pc, #216]	@ (8000924 <MX_GPIO_Init+0xf4>)
 800084c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <MX_GPIO_Init+0xf4>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_GPIO_Init+0xf4>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a30      	ldr	r2, [pc, #192]	@ (8000924 <MX_GPIO_Init+0xf4>)
 8000864:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b2e      	ldr	r3, [pc, #184]	@ (8000924 <MX_GPIO_Init+0xf4>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_GPIO_Init+0xf4>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a2a      	ldr	r2, [pc, #168]	@ (8000924 <MX_GPIO_Init+0xf4>)
 800087c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <MX_GPIO_Init+0xf4>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <MX_GPIO_Init+0xf4>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	4a24      	ldr	r2, [pc, #144]	@ (8000924 <MX_GPIO_Init+0xf4>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000898:	6153      	str	r3, [r2, #20]
 800089a:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <MX_GPIO_Init+0xf4>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000924 <MX_GPIO_Init+0xf4>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000924 <MX_GPIO_Init+0xf4>)
 80008ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_GPIO_Init+0xf4>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD5_Pin|LD9_Pin
 80008be:	2200      	movs	r2, #0
 80008c0:	f249 5108 	movw	r1, #38152	@ 0x9508
 80008c4:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_GPIO_Init+0xf8>)
 80008c6:	f000 fdf1 	bl	80014ac <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80008ca:	2337      	movs	r3, #55	@ 0x37
 80008cc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <MX_GPIO_Init+0xf8>)
 80008e0:	f000 fc6a 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD5_Pin LD9_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD5_Pin|LD9_Pin
 80008e4:	f249 5308 	movw	r3, #38152	@ 0x9508
 80008e8:	617b      	str	r3, [r7, #20]
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	480a      	ldr	r0, [pc, #40]	@ (8000928 <MX_GPIO_Init+0xf8>)
 80008fe:	f000 fc5b 	bl	80011b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000902:	2301      	movs	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000918:	f000 fc4e 	bl	80011b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	@ 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	48001000 	.word	0x48001000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <HAL_MspInit+0x44>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a0e      	ldr	r2, [pc, #56]	@ (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <HAL_MspInit+0x44>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x44>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	61d3      	str	r3, [r2, #28]
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x44>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 fbe0 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a17      	ldr	r2, [pc, #92]	@ (80009fc <HAL_I2C_MspInit+0x7c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d127      	bne.n	80009f2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <HAL_I2C_MspInit+0x80>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a16      	ldr	r2, [pc, #88]	@ (8000a00 <HAL_I2C_MspInit+0x80>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <HAL_I2C_MspInit+0x80>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80009ba:	23c0      	movs	r3, #192	@ 0xc0
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009be:	2312      	movs	r3, #18
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ca:	2304      	movs	r3, #4
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	480b      	ldr	r0, [pc, #44]	@ (8000a04 <HAL_I2C_MspInit+0x84>)
 80009d6:	f000 fbef 	bl	80011b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009da:	4b09      	ldr	r3, [pc, #36]	@ (8000a00 <HAL_I2C_MspInit+0x80>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <HAL_I2C_MspInit+0x80>)
 80009e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <HAL_I2C_MspInit+0x80>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40005400 	.word	0x40005400
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000400 	.word	0x48000400

08000a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <HAL_SPI_MspInit+0x7c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d128      	bne.n	8000a7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <HAL_SPI_MspInit+0x80>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4a16      	ldr	r2, [pc, #88]	@ (8000a88 <HAL_SPI_MspInit+0x80>)
 8000a30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a34:	6193      	str	r3, [r2, #24]
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <HAL_SPI_MspInit+0x80>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <HAL_SPI_MspInit+0x80>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <HAL_SPI_MspInit+0x80>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <HAL_SPI_MspInit+0x80>)
 8000a50:	695b      	ldr	r3, [r3, #20]
 8000a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000a5a:	23e0      	movs	r3, #224	@ 0xe0
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6a:	2305      	movs	r3, #5
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f000 fb9e 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	@ 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40013000 	.word	0x40013000
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a25      	ldr	r2, [pc, #148]	@ (8000b40 <HAL_TIM_Base_MspInit+0xb4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d10c      	bne.n	8000ac8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a24      	ldr	r2, [pc, #144]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000ab4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b22      	ldr	r3, [pc, #136]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ac6:	e036      	b.n	8000b36 <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ad0:	d131      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	61d3      	str	r3, [r2, #28]
 8000ade:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b16      	ldr	r3, [pc, #88]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b13      	ldr	r3, [pc, #76]	@ (8000b44 <HAL_TIM_Base_MspInit+0xb8>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b14:	2301      	movs	r3, #1
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b22:	f000 fb49 	bl	80011b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	201c      	movs	r0, #28
 8000b2c:	f000 fb0d 	bl	800114a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b30:	201c      	movs	r0, #28
 8000b32:	f000 fb26 	bl	8001182 <HAL_NVIC_EnableIRQ>
}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	@ 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40012c00 	.word	0x40012c00
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a11      	ldr	r2, [pc, #68]	@ (8000bac <HAL_TIM_MspPostInit+0x64>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d11c      	bne.n	8000ba4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <HAL_TIM_MspPostInit+0x68>)
 8000b6c:	695b      	ldr	r3, [r3, #20]
 8000b6e:	4a10      	ldr	r2, [pc, #64]	@ (8000bb0 <HAL_TIM_MspPostInit+0x68>)
 8000b70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b74:	6153      	str	r3, [r2, #20]
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_TIM_MspPostInit+0x68>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000b82:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8000b86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <HAL_TIM_MspPostInit+0x6c>)
 8000ba0:	f000 fb0a 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40012c00 	.word	0x40012c00
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48001000 	.word	0x48001000

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	@ 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a2e      	ldr	r2, [pc, #184]	@ (8000c90 <HAL_UART_MspInit+0xd8>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d128      	bne.n	8000c2c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bda:	4b2e      	ldr	r3, [pc, #184]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a2d      	ldr	r2, [pc, #180]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bee:	61bb      	str	r3, [r7, #24]
 8000bf0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a27      	ldr	r2, [pc, #156]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000bf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b25      	ldr	r3, [pc, #148]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c0a:	2330      	movs	r3, #48	@ 0x30
 8000c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	481c      	ldr	r0, [pc, #112]	@ (8000c98 <HAL_UART_MspInit+0xe0>)
 8000c26:	f000 fac7 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2a:	e02d      	b.n	8000c88 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	@ (8000c9c <HAL_UART_MspInit+0xe4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d128      	bne.n	8000c88 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a16      	ldr	r2, [pc, #88]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a10      	ldr	r2, [pc, #64]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_UART_MspInit+0xdc>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c66:	230c      	movs	r3, #12
 8000c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c76:	2307      	movs	r3, #7
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c84:	f000 fa98 	bl	80011b8 <HAL_GPIO_Init>
}
 8000c88:	bf00      	nop
 8000c8a:	3730      	adds	r7, #48	@ 0x30
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40013800 	.word	0x40013800
 8000c94:	40021000 	.word	0x40021000
 8000c98:	48000800 	.word	0x48000800
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <HAL_PCD_MspInit+0x80>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d129      	bne.n	8000d16 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <HAL_PCD_MspInit+0x84>)
 8000cc4:	695b      	ldr	r3, [r3, #20]
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_PCD_MspInit+0x84>)
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	6153      	str	r3, [r2, #20]
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_PCD_MspInit+0x84>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000cda:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000cec:	230e      	movs	r3, #14
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cfa:	f000 fa5d 	bl	80011b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_PCD_MspInit+0x84>)
 8000d00:	69db      	ldr	r3, [r3, #28]
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_PCD_MspInit+0x84>)
 8000d04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d08:	61d3      	str	r3, [r2, #28]
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_PCD_MspInit+0x84>)
 8000d0c:	69db      	ldr	r3, [r3, #28]
 8000d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d16:	bf00      	nop
 8000d18:	3728      	adds	r7, #40	@ 0x28
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40005c00 	.word	0x40005c00
 8000d24:	40021000 	.word	0x40021000

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f8c5 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <TIM2_IRQHandler+0x10>)
 8000d8e:	f002 fc11 	bl	80035b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2000017c 	.word	0x2000017c

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f004 f97a 	bl	80050c4 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000a000 	.word	0x2000a000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	200005ac 	.word	0x200005ac
 8000e04:	20000700 	.word	0x20000700

08000e08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e30:	f7ff ffea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f004 f939 	bl	80050d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5e:	f7ff fa07 	bl	8000270 <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e64:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e70:	08005a68 	.word	0x08005a68
  ldr r2, =_sbss
 8000e74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e78:	200006fc 	.word	0x200006fc

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_Init+0x28>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_Init+0x28>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f94f 	bl	8001134 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fd4c 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f967 	bl	800119e <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ee8:	f000 f92f 	bl	800114a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	200005b0 	.word	0x200005b0

08000f34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200005b0 	.word	0x200005b0

08000f4c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff ffee 	bl	8000f34 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_Delay+0x44>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffde 	bl	8000f34 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4907      	ldr	r1, [pc, #28]	@ (8001030 <__NVIC_EnableIRQ+0x38>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	2b00      	cmp	r3, #0
 8001046:	db0a      	blt.n	800105e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	b2da      	uxtb	r2, r3
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <__NVIC_SetPriority+0x4c>)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	0112      	lsls	r2, r2, #4
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	440b      	add	r3, r1
 8001058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800105c:	e00a      	b.n	8001074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4908      	ldr	r1, [pc, #32]	@ (8001084 <__NVIC_SetPriority+0x50>)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	3b04      	subs	r3, #4
 800106c:	0112      	lsls	r2, r2, #4
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	440b      	add	r3, r1
 8001072:	761a      	strb	r2, [r3, #24]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000e100 	.word	0xe000e100
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f1c3 0307 	rsb	r3, r3, #7
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	bf28      	it	cs
 80010a6:	2304      	movcs	r3, #4
 80010a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3304      	adds	r3, #4
 80010ae:	2b06      	cmp	r3, #6
 80010b0:	d902      	bls.n	80010b8 <NVIC_EncodePriority+0x30>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3b03      	subs	r3, #3
 80010b6:	e000      	b.n	80010ba <NVIC_EncodePriority+0x32>
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	43d9      	mvns	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	4313      	orrs	r3, r2
         );
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3724      	adds	r7, #36	@ 0x24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001100:	d301      	bcc.n	8001106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001102:	2301      	movs	r3, #1
 8001104:	e00f      	b.n	8001126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <SysTick_Config+0x40>)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800110e:	210f      	movs	r1, #15
 8001110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001114:	f7ff ff8e 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <SysTick_Config+0x40>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111e:	4b04      	ldr	r3, [pc, #16]	@ (8001130 <SysTick_Config+0x40>)
 8001120:	2207      	movs	r2, #7
 8001122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	e000e010 	.word	0xe000e010

08001134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff29 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b086      	sub	sp, #24
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800115c:	f7ff ff3e 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	6978      	ldr	r0, [r7, #20]
 8001168:	f7ff ff8e 	bl	8001088 <NVIC_EncodePriority>
 800116c:	4602      	mov	r2, r0
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff5d 	bl	8001034 <__NVIC_SetPriority>
}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff31 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffa2 	bl	80010f0 <SysTick_Config>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e154      	b.n	8001472 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 8146 	beq.w	800146c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d005      	beq.n	80011f8 <HAL_GPIO_Init+0x40>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d130      	bne.n	800125a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800122e:	2201      	movs	r2, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	f003 0201 	and.w	r2, r3, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b03      	cmp	r3, #3
 8001264:	d017      	beq.n	8001296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d123      	bne.n	80012ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	6939      	ldr	r1, [r7, #16]
 80012e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0203 	and.w	r2, r3, #3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 80a0 	beq.w	800146c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b58      	ldr	r3, [pc, #352]	@ (8001490 <HAL_GPIO_Init+0x2d8>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a57      	ldr	r2, [pc, #348]	@ (8001490 <HAL_GPIO_Init+0x2d8>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6193      	str	r3, [r2, #24]
 8001338:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <HAL_GPIO_Init+0x2d8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001344:	4a53      	ldr	r2, [pc, #332]	@ (8001494 <HAL_GPIO_Init+0x2dc>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800136e:	d019      	beq.n	80013a4 <HAL_GPIO_Init+0x1ec>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a49      	ldr	r2, [pc, #292]	@ (8001498 <HAL_GPIO_Init+0x2e0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d013      	beq.n	80013a0 <HAL_GPIO_Init+0x1e8>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a48      	ldr	r2, [pc, #288]	@ (800149c <HAL_GPIO_Init+0x2e4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00d      	beq.n	800139c <HAL_GPIO_Init+0x1e4>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a47      	ldr	r2, [pc, #284]	@ (80014a0 <HAL_GPIO_Init+0x2e8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d007      	beq.n	8001398 <HAL_GPIO_Init+0x1e0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a46      	ldr	r2, [pc, #280]	@ (80014a4 <HAL_GPIO_Init+0x2ec>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_GPIO_Init+0x1dc>
 8001390:	2304      	movs	r3, #4
 8001392:	e008      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 8001394:	2305      	movs	r3, #5
 8001396:	e006      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 8001398:	2303      	movs	r3, #3
 800139a:	e004      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 800139c:	2302      	movs	r3, #2
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_GPIO_Init+0x1ee>
 80013a4:	2300      	movs	r3, #0
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4093      	lsls	r3, r2
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013b6:	4937      	ldr	r1, [pc, #220]	@ (8001494 <HAL_GPIO_Init+0x2dc>)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c4:	4b38      	ldr	r3, [pc, #224]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013e8:	4a2f      	ldr	r2, [pc, #188]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ee:	4b2e      	ldr	r3, [pc, #184]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001412:	4a25      	ldr	r2, [pc, #148]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001418:	4b23      	ldr	r3, [pc, #140]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800143c:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_GPIO_Init+0x2f0>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	3301      	adds	r3, #1
 8001470:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa22 f303 	lsr.w	r3, r2, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	f47f aea3 	bne.w	80011c8 <HAL_GPIO_Init+0x10>
  }
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	48000400 	.word	0x48000400
 800149c:	48000800 	.word	0x48000800
 80014a0:	48000c00 	.word	0x48000c00
 80014a4:	48001000 	.word	0x48001000
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c8:	e002      	b.n	80014d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e08d      	b.n	800160a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fa3c 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	@ 0x24
 800150c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800152c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800153c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d107      	bne.n	8001556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	e006      	b.n	8001564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b02      	cmp	r3, #2
 800156a:	d108      	bne.n	800157e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	e007      	b.n	800158e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800158c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800159c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80015b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	69d9      	ldr	r1, [r3, #28]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a1a      	ldr	r2, [r3, #32]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b20      	cmp	r3, #32
 8001626:	d138      	bne.n	800169a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001632:	2302      	movs	r3, #2
 8001634:	e032      	b.n	800169c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2224      	movs	r2, #36	@ 0x24
 8001642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0201 	bic.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001664:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6819      	ldr	r1, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0201 	orr.w	r2, r2, #1
 8001684:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001696:	2300      	movs	r3, #0
 8001698:	e000      	b.n	800169c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800169a:	2302      	movs	r3, #2
  }
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	d139      	bne.n	8001732 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d101      	bne.n	80016cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016c8:	2302      	movs	r3, #2
 80016ca:	e033      	b.n	8001734 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2224      	movs	r2, #36	@ 0x24
 80016d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80016fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0201 	orr.w	r2, r2, #1
 800171c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2220      	movs	r2, #32
 8001722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e000      	b.n	8001734 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001732:	2302      	movs	r3, #2
  }
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0b9      	b.n	80018c6 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fa9a 	bl	8000ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2203      	movs	r2, #3
 8001770:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f003 fc42 	bl	8005002 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
 8001782:	e03e      	b.n	8001802 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001784:	7bfa      	ldrb	r2, [r7, #15]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	3311      	adds	r3, #17
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3310      	adds	r3, #16
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3313      	adds	r3, #19
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	3320      	adds	r3, #32
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017d4:	7bfa      	ldrb	r2, [r7, #15]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	3324      	adds	r3, #36	@ 0x24
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	3301      	adds	r3, #1
 8001800:	73fb      	strb	r3, [r7, #15]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	791b      	ldrb	r3, [r3, #4]
 8001806:	7bfa      	ldrb	r2, [r7, #15]
 8001808:	429a      	cmp	r2, r3
 800180a:	d3bb      	bcc.n	8001784 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]
 8001810:	e044      	b.n	800189c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001812:	7bfa      	ldrb	r2, [r7, #15]
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	440b      	add	r3, r1
 8001862:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001880:	7bfa      	ldrb	r2, [r7, #15]
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	3301      	adds	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	791b      	ldrb	r3, [r3, #4]
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d3b5      	bcc.n	8001812 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3304      	adds	r3, #4
 80018ae:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018b2:	f003 fbc1 	bl	8005038 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f001 b823 	b.w	800293c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 817d 	beq.w	8001c06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800190c:	4bbc      	ldr	r3, [pc, #752]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b04      	cmp	r3, #4
 8001916:	d00c      	beq.n	8001932 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001918:	4bb9      	ldr	r3, [pc, #740]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d15c      	bne.n	80019de <HAL_RCC_OscConfig+0x10e>
 8001924:	4bb6      	ldr	r3, [pc, #728]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001930:	d155      	bne.n	80019de <HAL_RCC_OscConfig+0x10e>
 8001932:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001936:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001946:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	095b      	lsrs	r3, r3, #5
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d102      	bne.n	8001964 <HAL_RCC_OscConfig+0x94>
 800195e:	4ba8      	ldr	r3, [pc, #672]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	e015      	b.n	8001990 <HAL_RCC_OscConfig+0xc0>
 8001964:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001968:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001978:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800197c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001980:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001984:	fa93 f3a3 	rbit	r3, r3
 8001988:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800198c:	4b9c      	ldr	r3, [pc, #624]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001994:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001998:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800199c:	fa92 f2a2 	rbit	r2, r2
 80019a0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80019a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80019a8:	fab2 f282 	clz	r2, r2
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f042 0220 	orr.w	r2, r2, #32
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	f002 021f 	and.w	r2, r2, #31
 80019b8:	2101      	movs	r1, #1
 80019ba:	fa01 f202 	lsl.w	r2, r1, r2
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 811f 	beq.w	8001c04 <HAL_RCC_OscConfig+0x334>
 80019c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 8116 	bne.w	8001c04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	f000 bfaf 	b.w	800293c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x12e>
 80019f0:	4b83      	ldr	r3, [pc, #524]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a82      	ldr	r2, [pc, #520]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 80019f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	e036      	b.n	8001a6c <HAL_RCC_OscConfig+0x19c>
 80019fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x158>
 8001a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7b      	ldr	r2, [pc, #492]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	4b79      	ldr	r3, [pc, #484]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a78      	ldr	r2, [pc, #480]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	e021      	b.n	8001a6c <HAL_RCC_OscConfig+0x19c>
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x184>
 8001a3a:	4b71      	ldr	r3, [pc, #452]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a70      	ldr	r2, [pc, #448]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b6e      	ldr	r3, [pc, #440]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6d      	ldr	r2, [pc, #436]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0x19c>
 8001a54:	4b6a      	ldr	r3, [pc, #424]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a69      	ldr	r2, [pc, #420]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b67      	ldr	r3, [pc, #412]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a66      	ldr	r2, [pc, #408]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a6c:	4b64      	ldr	r3, [pc, #400]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a70:	f023 020f 	bic.w	r2, r3, #15
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	495f      	ldr	r1, [pc, #380]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d059      	beq.n	8001b4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fa4d 	bl	8000f34 <HAL_GetTick>
 8001a9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fa48 	bl	8000f34 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b64      	cmp	r3, #100	@ 0x64
 8001aae:	d902      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f000 bf43 	b.w	800293c <HAL_RCC_OscConfig+0x106c>
 8001ab6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001ac2:	fa93 f3a3 	rbit	r3, r3
 8001ac6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001aca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	095b      	lsrs	r3, r3, #5
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x218>
 8001ae2:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	e015      	b.n	8001b14 <HAL_RCC_OscConfig+0x244>
 8001ae8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001afc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b00:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001b04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001b08:	fa93 f3a3 	rbit	r3, r3
 8001b0c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001b10:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b18:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001b1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001b20:	fa92 f2a2 	rbit	r2, r2
 8001b24:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001b28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001b2c:	fab2 f282 	clz	r2, r2
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f042 0220 	orr.w	r2, r2, #32
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f002 021f 	and.w	r2, r2, #31
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0ab      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x1d0>
 8001b48:	e05d      	b.n	8001c06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f9f3 	bl	8000f34 <HAL_GetTick>
 8001b4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff f9ee 	bl	8000f34 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b64      	cmp	r3, #100	@ 0x64
 8001b62:	d902      	bls.n	8001b6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	f000 bee9 	b.w	800293c <HAL_RCC_OscConfig+0x106c>
 8001b6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b6e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001b7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	095b      	lsrs	r3, r3, #5
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2cc>
 8001b96:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	e015      	b.n	8001bc8 <HAL_RCC_OscConfig+0x2f8>
 8001b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ba0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001bb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bb4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001bb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_RCC_OscConfig+0x330>)
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bcc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001bd0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001bd4:	fa92 f2a2 	rbit	r2, r2
 8001bd8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001bdc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001be0:	fab2 f282 	clz	r2, r2
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	f042 0220 	orr.w	r2, r2, #32
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	f002 021f 	and.w	r2, r2, #31
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ab      	bne.n	8001b54 <HAL_RCC_OscConfig+0x284>
 8001bfc:	e003      	b.n	8001c06 <HAL_RCC_OscConfig+0x336>
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 817d 	beq.w	8001f16 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c1c:	4ba6      	ldr	r3, [pc, #664]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00b      	beq.n	8001c40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c28:	4ba3      	ldr	r3, [pc, #652]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d172      	bne.n	8001d1a <HAL_RCC_OscConfig+0x44a>
 8001c34:	4ba0      	ldr	r3, [pc, #640]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d16c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x44a>
 8001c40:	2302      	movs	r3, #2
 8001c42:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c4a:	fa93 f3a3 	rbit	r3, r3
 8001c4e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001c52:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	095b      	lsrs	r3, r3, #5
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_RCC_OscConfig+0x3a0>
 8001c6a:	4b93      	ldr	r3, [pc, #588]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e013      	b.n	8001c98 <HAL_RCC_OscConfig+0x3c8>
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001c88:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001c94:	4b88      	ldr	r3, [pc, #544]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c98:	2202      	movs	r2, #2
 8001c9a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001c9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001caa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001cae:	fab2 f282 	clz	r2, r2
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f042 0220 	orr.w	r2, r2, #32
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	f002 021f 	and.w	r2, r2, #31
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x410>
 8001cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	f000 be2e 	b.w	800293c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b75      	ldr	r3, [pc, #468]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	21f8      	movs	r1, #248	@ 0xf8
 8001cf6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001cfe:	fa91 f1a1 	rbit	r1, r1
 8001d02:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001d06:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001d0a:	fab1 f181 	clz	r1, r1
 8001d0e:	b2c9      	uxtb	r1, r1
 8001d10:	408b      	lsls	r3, r1
 8001d12:	4969      	ldr	r1, [pc, #420]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d18:	e0fd      	b.n	8001f16 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8088 	beq.w	8001e3c <HAL_RCC_OscConfig+0x56c>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001d3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	461a      	mov	r2, r3
 8001d54:	2301      	movs	r3, #1
 8001d56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff f8ec 	bl	8000f34 <HAL_GetTick>
 8001d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d62:	f7ff f8e7 	bl	8000f34 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d902      	bls.n	8001d78 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	f000 bde2 	b.w	800293c <HAL_RCC_OscConfig+0x106c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001d8a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	095b      	lsrs	r3, r3, #5
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4d8>
 8001da2:	4b45      	ldr	r3, [pc, #276]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	e013      	b.n	8001dd0 <HAL_RCC_OscConfig+0x500>
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001dc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001dd6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001dda:	fa92 f2a2 	rbit	r2, r2
 8001dde:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001de2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	f042 0220 	orr.w	r2, r2, #32
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	f002 021f 	and.w	r2, r2, #31
 8001df6:	2101      	movs	r1, #1
 8001df8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0af      	beq.n	8001d62 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e02:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	21f8      	movs	r1, #248	@ 0xf8
 8001e18:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001e20:	fa91 f1a1 	rbit	r1, r1
 8001e24:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001e28:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001e2c:	fab1 f181 	clz	r1, r1
 8001e30:	b2c9      	uxtb	r1, r1
 8001e32:	408b      	lsls	r3, r1
 8001e34:	4920      	ldr	r1, [pc, #128]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]
 8001e3a:	e06c      	b.n	8001f16 <HAL_RCC_OscConfig+0x646>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001e4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e5c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	461a      	mov	r2, r3
 8001e64:	2300      	movs	r3, #0
 8001e66:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7ff f864 	bl	8000f34 <HAL_GetTick>
 8001e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e70:	e00a      	b.n	8001e88 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e72:	f7ff f85f 	bl	8000f34 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d902      	bls.n	8001e88 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	f000 bd5a 	b.w	800293c <HAL_RCC_OscConfig+0x106c>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9e:	fab3 f383 	clz	r3, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	095b      	lsrs	r3, r3, #5
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d104      	bne.n	8001ebc <HAL_RCC_OscConfig+0x5ec>
 8001eb2:	4b01      	ldr	r3, [pc, #4]	@ (8001eb8 <HAL_RCC_OscConfig+0x5e8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	e015      	b.n	8001ee4 <HAL_RCC_OscConfig+0x614>
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ece:	2302      	movs	r3, #2
 8001ed0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001ee0:	4bc8      	ldr	r3, [pc, #800]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001eea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001eee:	fa92 f2a2 	rbit	r2, r2
 8001ef2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001ef6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001efa:	fab2 f282 	clz	r2, r2
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	f042 0220 	orr.w	r2, r2, #32
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f002 021f 	and.w	r2, r2, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ad      	bne.n	8001e72 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8110 	beq.w	800214c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d079      	beq.n	8002030 <HAL_RCC_OscConfig+0x760>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001f46:	fa93 f3a3 	rbit	r3, r3
 8001f4a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4bab      	ldr	r3, [pc, #684]	@ (8002208 <HAL_RCC_OscConfig+0x938>)
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	461a      	mov	r2, r3
 8001f62:	2301      	movs	r3, #1
 8001f64:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f66:	f7fe ffe5 	bl	8000f34 <HAL_GetTick>
 8001f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f70:	f7fe ffe0 	bl	8000f34 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d902      	bls.n	8001f86 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	f000 bcdb 	b.w	800293c <HAL_RCC_OscConfig+0x106c>
 8001f86:	2302      	movs	r3, #2
 8001f88:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001fde:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe0:	4b88      	ldr	r3, [pc, #544]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 8001fe2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001fec:	2102      	movs	r1, #2
 8001fee:	6019      	str	r1, [r3, #0]
 8001ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	fa93 f1a3 	rbit	r1, r3
 8001ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002002:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002006:	6019      	str	r1, [r3, #0]
  return result;
 8002008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	4013      	ands	r3, r2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0a0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x6a0>
 800202e:	e08d      	b.n	800214c <HAL_RCC_OscConfig+0x87c>
 8002030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002034:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002052:	601a      	str	r2, [r3, #0]
  return result;
 8002054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002058:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800205c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	4b68      	ldr	r3, [pc, #416]	@ (8002208 <HAL_RCC_OscConfig+0x938>)
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	461a      	mov	r2, r3
 800206e:	2300      	movs	r3, #0
 8002070:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7fe ff5f 	bl	8000f34 <HAL_GetTick>
 8002076:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207c:	f7fe ff5a 	bl	8000f34 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d902      	bls.n	8002092 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	f000 bc55 	b.w	800293c <HAL_RCC_OscConfig+0x106c>
 8002092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002096:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800209a:	2202      	movs	r2, #2
 800209c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	fa93 f2a3 	rbit	r2, r3
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020be:	2202      	movs	r2, #2
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	fa93 f2a3 	rbit	r2, r3
 80020d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020e2:	2202      	movs	r2, #2
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 8002100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002106:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800210a:	2102      	movs	r1, #2
 800210c:	6019      	str	r1, [r3, #0]
 800210e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002112:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	fa93 f1a3 	rbit	r1, r3
 800211c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002120:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002124:	6019      	str	r1, [r3, #0]
  return result;
 8002126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800213a:	b2db      	uxtb	r3, r3
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f303 	lsl.w	r3, r1, r3
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d197      	bne.n	800207c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002150:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 81a1 	beq.w	80024a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002168:	4b26      	ldr	r3, [pc, #152]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d116      	bne.n	80021a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	4b23      	ldr	r3, [pc, #140]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217e:	61d3      	str	r3, [r2, #28]
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002196:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800219a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800219c:	2301      	movs	r3, #1
 800219e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a2:	4b1a      	ldr	r3, [pc, #104]	@ (800220c <HAL_RCC_OscConfig+0x93c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11a      	bne.n	80021e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ae:	4b17      	ldr	r3, [pc, #92]	@ (800220c <HAL_RCC_OscConfig+0x93c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a16      	ldr	r2, [pc, #88]	@ (800220c <HAL_RCC_OscConfig+0x93c>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ba:	f7fe febb 	bl	8000f34 <HAL_GetTick>
 80021be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	e009      	b.n	80021d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7fe feb6 	bl	8000f34 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	@ 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e3b1      	b.n	800293c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <HAL_RCC_OscConfig+0x93c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ef      	beq.n	80021c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d10d      	bne.n	8002210 <HAL_RCC_OscConfig+0x940>
 80021f4:	4b03      	ldr	r3, [pc, #12]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4a02      	ldr	r2, [pc, #8]	@ (8002204 <HAL_RCC_OscConfig+0x934>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	6213      	str	r3, [r2, #32]
 8002200:	e03c      	b.n	800227c <HAL_RCC_OscConfig+0x9ac>
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	10908120 	.word	0x10908120
 800220c:	40007000 	.word	0x40007000
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x96a>
 8002220:	4bc1      	ldr	r3, [pc, #772]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	4ac0      	ldr	r2, [pc, #768]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002226:	f023 0301 	bic.w	r3, r3, #1
 800222a:	6213      	str	r3, [r2, #32]
 800222c:	4bbe      	ldr	r3, [pc, #760]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	4abd      	ldr	r2, [pc, #756]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002232:	f023 0304 	bic.w	r3, r3, #4
 8002236:	6213      	str	r3, [r2, #32]
 8002238:	e020      	b.n	800227c <HAL_RCC_OscConfig+0x9ac>
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d10c      	bne.n	8002264 <HAL_RCC_OscConfig+0x994>
 800224a:	4bb7      	ldr	r3, [pc, #732]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4ab6      	ldr	r2, [pc, #728]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002250:	f043 0304 	orr.w	r3, r3, #4
 8002254:	6213      	str	r3, [r2, #32]
 8002256:	4bb4      	ldr	r3, [pc, #720]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4ab3      	ldr	r2, [pc, #716]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6213      	str	r3, [r2, #32]
 8002262:	e00b      	b.n	800227c <HAL_RCC_OscConfig+0x9ac>
 8002264:	4bb0      	ldr	r3, [pc, #704]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4aaf      	ldr	r2, [pc, #700]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	4bad      	ldr	r3, [pc, #692]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4aac      	ldr	r2, [pc, #688]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002280:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8081 	beq.w	8002390 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fe51 	bl	8000f34 <HAL_GetTick>
 8002292:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7fe fe4c 	bl	8000f34 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e345      	b.n	800293c <HAL_RCC_OscConfig+0x106c>
 80022b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022b8:	2202      	movs	r2, #2
 80022ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	fa93 f2a3 	rbit	r2, r3
 80022ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022dc:	2202      	movs	r2, #2
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022f6:	601a      	str	r2, [r3, #0]
  return result;
 80022f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002300:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	b2db      	uxtb	r3, r3
 800230c:	f043 0302 	orr.w	r3, r3, #2
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d102      	bne.n	800231c <HAL_RCC_OscConfig+0xa4c>
 8002316:	4b84      	ldr	r3, [pc, #528]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	e013      	b.n	8002344 <HAL_RCC_OscConfig+0xa74>
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002324:	2202      	movs	r2, #2
 8002326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	4b79      	ldr	r3, [pc, #484]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002348:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800234c:	2102      	movs	r1, #2
 800234e:	6011      	str	r1, [r2, #0]
 8002350:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002354:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	fa92 f1a2 	rbit	r1, r2
 800235e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002362:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002366:	6011      	str	r1, [r2, #0]
  return result;
 8002368:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800236c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002370:	6812      	ldr	r2, [r2, #0]
 8002372:	fab2 f282 	clz	r2, r2
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	f002 021f 	and.w	r2, r2, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f202 	lsl.w	r2, r1, r2
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d084      	beq.n	8002298 <HAL_RCC_OscConfig+0x9c8>
 800238e:	e07f      	b.n	8002490 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7fe fdd0 	bl	8000f34 <HAL_GetTick>
 8002394:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002398:	e00b      	b.n	80023b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fdcb 	bl	8000f34 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e2c4      	b.n	800293c <HAL_RCC_OscConfig+0x106c>
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023ba:	2202      	movs	r2, #2
 80023bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023de:	2202      	movs	r2, #2
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80023f8:	601a      	str	r2, [r3, #0]
  return result;
 80023fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002402:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f043 0302 	orr.w	r3, r3, #2
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d102      	bne.n	800241e <HAL_RCC_OscConfig+0xb4e>
 8002418:	4b43      	ldr	r3, [pc, #268]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	e013      	b.n	8002446 <HAL_RCC_OscConfig+0xb76>
 800241e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002422:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002426:	2202      	movs	r2, #2
 8002428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fa93 f2a3 	rbit	r2, r3
 8002438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	4b39      	ldr	r3, [pc, #228]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800244e:	2102      	movs	r1, #2
 8002450:	6011      	str	r1, [r2, #0]
 8002452:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002456:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	fa92 f1a2 	rbit	r1, r2
 8002460:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002464:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002468:	6011      	str	r1, [r2, #0]
  return result;
 800246a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800246e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f002 021f 	and.w	r2, r2, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d184      	bne.n	800239a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002490:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002498:	4b23      	ldr	r3, [pc, #140]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	4a22      	ldr	r2, [pc, #136]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 800249e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8242 	beq.w	800293a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <HAL_RCC_OscConfig+0xc58>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b08      	cmp	r3, #8
 80024c0:	f000 8213 	beq.w	80028ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	f040 8162 	bne.w	800279a <HAL_RCC_OscConfig+0xeca>
 80024d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024da:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	fa93 f2a3 	rbit	r2, r3
 80024f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80024fa:	601a      	str	r2, [r3, #0]
  return result;
 80024fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002500:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002504:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002510:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fd0a 	bl	8000f34 <HAL_GetTick>
 8002520:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e00c      	b.n	8002540 <HAL_RCC_OscConfig+0xc70>
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fd02 	bl	8000f34 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1fd      	b.n	800293c <HAL_RCC_OscConfig+0x106c>
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002548:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800254c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	fa93 f2a3 	rbit	r2, r3
 800255c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002560:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002564:	601a      	str	r2, [r3, #0]
  return result;
 8002566:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800256a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800256e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002570:	fab3 f383 	clz	r3, r3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <HAL_RCC_OscConfig+0xcba>
 8002584:	4bb0      	ldr	r3, [pc, #704]	@ (8002848 <HAL_RCC_OscConfig+0xf78>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	e027      	b.n	80025da <HAL_RCC_OscConfig+0xd0a>
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002592:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002596:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	fa93 f2a3 	rbit	r2, r3
 80025a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	fa93 f2a3 	rbit	r2, r3
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	4b9c      	ldr	r3, [pc, #624]	@ (8002848 <HAL_RCC_OscConfig+0xf78>)
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025de:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025e6:	6011      	str	r1, [r2, #0]
 80025e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	fa92 f1a2 	rbit	r1, r2
 80025f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80025fe:	6011      	str	r1, [r2, #0]
  return result;
 8002600:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002604:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002608:	6812      	ldr	r2, [r2, #0]
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f042 0220 	orr.w	r2, r2, #32
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f002 021f 	and.w	r2, r2, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d182      	bne.n	800252c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002626:	4b88      	ldr	r3, [pc, #544]	@ (8002848 <HAL_RCC_OscConfig+0xf78>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800262e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800263a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	430b      	orrs	r3, r1
 8002648:	497f      	ldr	r1, [pc, #508]	@ (8002848 <HAL_RCC_OscConfig+0xf78>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
 800264e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002652:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002656:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800265a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002660:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	fa93 f2a3 	rbit	r2, r3
 800266a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002672:	601a      	str	r2, [r3, #0]
  return result;
 8002674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002678:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800267c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002688:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	461a      	mov	r2, r3
 8002690:	2301      	movs	r3, #1
 8002692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7fe fc4e 	bl	8000f34 <HAL_GetTick>
 8002698:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800269c:	e009      	b.n	80026b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fc49 	bl	8000f34 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e144      	b.n	800293c <HAL_RCC_OscConfig+0x106c>
 80026b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	fa93 f2a3 	rbit	r2, r3
 80026ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026d6:	601a      	str	r2, [r3, #0]
  return result;
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80026e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d102      	bne.n	80026fc <HAL_RCC_OscConfig+0xe2c>
 80026f6:	4b54      	ldr	r3, [pc, #336]	@ (8002848 <HAL_RCC_OscConfig+0xf78>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	e027      	b.n	800274c <HAL_RCC_OscConfig+0xe7c>
 80026fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002700:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002704:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800270e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	fa93 f2a3 	rbit	r2, r3
 8002718:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002726:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800272a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002734:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	fa93 f2a3 	rbit	r2, r3
 800273e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002742:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	4b3f      	ldr	r3, [pc, #252]	@ (8002848 <HAL_RCC_OscConfig+0xf78>)
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002750:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002754:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002758:	6011      	str	r1, [r2, #0]
 800275a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800275e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	fa92 f1a2 	rbit	r1, r2
 8002768:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800276c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002770:	6011      	str	r1, [r2, #0]
  return result;
 8002772:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002776:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f002 021f 	and.w	r2, r2, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d082      	beq.n	800269e <HAL_RCC_OscConfig+0xdce>
 8002798:	e0cf      	b.n	800293a <HAL_RCC_OscConfig+0x106a>
 800279a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800279e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	fa93 f2a3 	rbit	r2, r3
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027be:	601a      	str	r2, [r3, #0]
  return result;
 80027c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80027c8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	461a      	mov	r2, r3
 80027dc:	2300      	movs	r3, #0
 80027de:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe fba8 	bl	8000f34 <HAL_GetTick>
 80027e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e8:	e009      	b.n	80027fe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe fba3 	bl	8000f34 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e09e      	b.n	800293c <HAL_RCC_OscConfig+0x106c>
 80027fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002802:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002806:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800280a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002810:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	fa93 f2a3 	rbit	r2, r3
 800281a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002822:	601a      	str	r2, [r3, #0]
  return result;
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800282c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d104      	bne.n	800284c <HAL_RCC_OscConfig+0xf7c>
 8002842:	4b01      	ldr	r3, [pc, #4]	@ (8002848 <HAL_RCC_OscConfig+0xf78>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	e029      	b.n	800289c <HAL_RCC_OscConfig+0xfcc>
 8002848:	40021000 	.word	0x40021000
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002854:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002858:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800285e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	fa93 f2a3 	rbit	r2, r3
 8002868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002876:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800287a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	fa93 f2a3 	rbit	r2, r3
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	4b2b      	ldr	r3, [pc, #172]	@ (8002948 <HAL_RCC_OscConfig+0x1078>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028a0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ae:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	fa92 f1a2 	rbit	r1, r2
 80028b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028c0:	6011      	str	r1, [r2, #0]
  return result;
 80028c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028c6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	fab2 f282 	clz	r2, r2
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	f042 0220 	orr.w	r2, r2, #32
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f002 021f 	and.w	r2, r2, #31
 80028dc:	2101      	movs	r1, #1
 80028de:	fa01 f202 	lsl.w	r2, r1, r2
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d180      	bne.n	80027ea <HAL_RCC_OscConfig+0xf1a>
 80028e8:	e027      	b.n	800293a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e01e      	b.n	800293c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028fe:	4b12      	ldr	r3, [pc, #72]	@ (8002948 <HAL_RCC_OscConfig+0x1078>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002906:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800290a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	429a      	cmp	r2, r3
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800291e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002922:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002932:	429a      	cmp	r2, r3
 8002934:	d001      	beq.n	800293a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b09e      	sub	sp, #120	@ 0x78
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002956:	2300      	movs	r3, #0
 8002958:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e162      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b90      	ldr	r3, [pc, #576]	@ (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b8d      	ldr	r3, [pc, #564]	@ (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	498b      	ldr	r1, [pc, #556]	@ (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b89      	ldr	r3, [pc, #548]	@ (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e14a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b82      	ldr	r3, [pc, #520]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	497f      	ldr	r1, [pc, #508]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80dc 	beq.w	8002b78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d13c      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xf6>
 80029c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029cc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80029d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xa6>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	e00f      	b.n	8002a12 <HAL_RCC_ClockConfig+0xc6>
 80029f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a04:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a0e:	4b67      	ldr	r3, [pc, #412]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a1a:	fa92 f2a2 	rbit	r2, r2
 8002a1e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002a20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a22:	fab2 f282 	clz	r2, r2
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f042 0220 	orr.w	r2, r2, #32
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f002 021f 	and.w	r2, r2, #31
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f202 	lsl.w	r2, r1, r2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d17b      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0f3      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d13c      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x178>
 8002a4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x128>
 8002a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e00f      	b.n	8002a94 <HAL_RCC_ClockConfig+0x148>
 8002a74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a7c:	fa93 f3a3 	rbit	r3, r3
 8002a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a90:	4b46      	ldr	r3, [pc, #280]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a98:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002a9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a9c:	fa92 f2a2 	rbit	r2, r2
 8002aa0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002aa2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002aa4:	fab2 f282 	clz	r2, r2
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f042 0220 	orr.w	r2, r2, #32
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	f002 021f 	and.w	r2, r2, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d13a      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0b2      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_RCC_ClockConfig+0x1a0>
 8002ae6:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	e00d      	b.n	8002b08 <HAL_RCC_ClockConfig+0x1bc>
 8002aec:	2302      	movs	r3, #2
 8002aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af8:	2302      	movs	r3, #2
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	61fb      	str	r3, [r7, #28]
 8002b04:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	2202      	movs	r2, #2
 8002b0a:	61ba      	str	r2, [r7, #24]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	fa92 f2a2 	rbit	r2, r2
 8002b12:	617a      	str	r2, [r7, #20]
  return result;
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	fab2 f282 	clz	r2, r2
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	f042 0220 	orr.w	r2, r2, #32
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f002 021f 	and.w	r2, r2, #31
 8002b26:	2101      	movs	r1, #1
 8002b28:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e079      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	491a      	ldr	r1, [pc, #104]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fe f9f4 	bl	8000f34 <HAL_GetTick>
 8002b4c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe f9f0 	bl	8000f34 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e061      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_RCC_ClockConfig+0x260>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d214      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b08      	ldr	r3, [pc, #32]	@ (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4906      	ldr	r1, [pc, #24]	@ (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <HAL_RCC_ClockConfig+0x25c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e040      	b.n	8002c2a <HAL_RCC_ClockConfig+0x2de>
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	491a      	ldr	r1, [pc, #104]	@ (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d009      	beq.n	8002bee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bda:	4b16      	ldr	r3, [pc, #88]	@ (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	4912      	ldr	r1, [pc, #72]	@ (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002bee:	f000 f829 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bf2:	4601      	mov	r1, r0
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <HAL_RCC_ClockConfig+0x2e8>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bfc:	22f0      	movs	r2, #240	@ 0xf0
 8002bfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	fa92 f2a2 	rbit	r2, r2
 8002c06:	60fa      	str	r2, [r7, #12]
  return result;
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	fab2 f282 	clz	r2, r2
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	40d3      	lsrs	r3, r2
 8002c12:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <HAL_RCC_ClockConfig+0x2ec>)
 8002c14:	5cd3      	ldrb	r3, [r2, r3]
 8002c16:	fa21 f303 	lsr.w	r3, r1, r3
 8002c1a:	4a08      	ldr	r2, [pc, #32]	@ (8002c3c <HAL_RCC_ClockConfig+0x2f0>)
 8002c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <HAL_RCC_ClockConfig+0x2f4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f942 	bl	8000eac <HAL_InitTick>
  
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3778      	adds	r7, #120	@ 0x78
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
 8002c38:	080059ec 	.word	0x080059ec
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000004 	.word	0x20000004

08002c44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 030c 	and.w	r3, r3, #12
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x30>
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d003      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x36>
 8002c72:	e026      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c74:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8002c76:	613b      	str	r3, [r7, #16]
      break;
 8002c78:	e026      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	0c9b      	lsrs	r3, r3, #18
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	4a17      	ldr	r2, [pc, #92]	@ (8002ce0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c84:	5cd3      	ldrb	r3, [r2, r3]
 8002c86:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	fb02 f303 	mul.w	r3, r2, r3
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e004      	b.n	8002cbc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8002ce8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	613b      	str	r3, [r7, #16]
      break;
 8002cc0:	e002      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cc2:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <HAL_RCC_GetSysClockFreq+0x98>)
 8002cc4:	613b      	str	r3, [r7, #16]
      break;
 8002cc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc8:	693b      	ldr	r3, [r7, #16]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	007a1200 	.word	0x007a1200
 8002ce0:	08005a04 	.word	0x08005a04
 8002ce4:	08005a14 	.word	0x08005a14
 8002ce8:	003d0900 	.word	0x003d0900

08002cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	@ (8002d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000000 	.word	0x20000000

08002d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d0a:	f7ff ffef 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d0e:	4601      	mov	r1, r0
 8002d10:	4b0b      	ldr	r3, [pc, #44]	@ (8002d40 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d18:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002d1c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	fa92 f2a2 	rbit	r2, r2
 8002d24:	603a      	str	r2, [r7, #0]
  return result;
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	fab2 f282 	clz	r2, r2
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	40d3      	lsrs	r3, r2
 8002d30:	4a04      	ldr	r2, [pc, #16]	@ (8002d44 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40021000 	.word	0x40021000
 8002d44:	080059fc 	.word	0x080059fc

08002d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d4e:	f7ff ffcd 	bl	8002cec <HAL_RCC_GetHCLKFreq>
 8002d52:	4601      	mov	r1, r0
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002d5c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002d60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	fa92 f2a2 	rbit	r2, r2
 8002d68:	603a      	str	r2, [r7, #0]
  return result;
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	fab2 f282 	clz	r2, r2
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	40d3      	lsrs	r3, r2
 8002d74:	4a04      	ldr	r2, [pc, #16]	@ (8002d88 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d76:	5cd3      	ldrb	r3, [r2, r3]
 8002d78:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000
 8002d88:	080059fc 	.word	0x080059fc

08002d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b092      	sub	sp, #72	@ 0x48
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80d4 	beq.w	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db0:	4b4e      	ldr	r3, [pc, #312]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10e      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	61d3      	str	r3, [r2, #28]
 8002dc8:	4b48      	ldr	r3, [pc, #288]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b45      	ldr	r3, [pc, #276]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b42      	ldr	r3, [pc, #264]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a41      	ldr	r2, [pc, #260]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fe f89f 	bl	8000f34 <HAL_GetTick>
 8002df6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7fe f89b 	bl	8000f34 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b64      	cmp	r3, #100	@ 0x64
 8002e06:	d901      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e169      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b38      	ldr	r3, [pc, #224]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e18:	4b34      	ldr	r3, [pc, #208]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8084 	beq.w	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d07c      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e38:	4b2c      	ldr	r3, [pc, #176]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b26      	ldr	r3, [pc, #152]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	461a      	mov	r2, r3
 8002e62:	2301      	movs	r3, #1
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	2300      	movs	r3, #0
 8002e88:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e8a:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d04b      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e9a:	f7fe f84b 	bl	8000f34 <HAL_GetTick>
 8002e9e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe f847 	bl	8000f34 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e113      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	61fb      	str	r3, [r7, #28]
  return result;
 8002ed0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	fab3 f383 	clz	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d108      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ee6:	4b01      	ldr	r3, [pc, #4]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	e00d      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	10908100 	.word	0x10908100
 8002ef8:	2302      	movs	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	4b78      	ldr	r3, [pc, #480]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	2202      	movs	r2, #2
 8002f0a:	613a      	str	r2, [r7, #16]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	fa92 f2a2 	rbit	r2, r2
 8002f12:	60fa      	str	r2, [r7, #12]
  return result;
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	fab2 f282 	clz	r2, r2
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f002 021f 	and.w	r2, r2, #31
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0b7      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f32:	4b6d      	ldr	r3, [pc, #436]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	496a      	ldr	r1, [pc, #424]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4c:	4b66      	ldr	r3, [pc, #408]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a65      	ldr	r2, [pc, #404]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f64:	4b60      	ldr	r3, [pc, #384]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	f023 0203 	bic.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	495d      	ldr	r1, [pc, #372]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f82:	4b59      	ldr	r3, [pc, #356]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4956      	ldr	r1, [pc, #344]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fa0:	4b51      	ldr	r3, [pc, #324]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	494e      	ldr	r1, [pc, #312]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fbe:	4b4a      	ldr	r3, [pc, #296]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f023 0210 	bic.w	r2, r3, #16
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4947      	ldr	r1, [pc, #284]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002fdc:	4b42      	ldr	r3, [pc, #264]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	493f      	ldr	r1, [pc, #252]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	f023 0220 	bic.w	r2, r3, #32
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4938      	ldr	r1, [pc, #224]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003008:	4313      	orrs	r3, r2
 800300a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0308 	and.w	r3, r3, #8
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003018:	4b33      	ldr	r3, [pc, #204]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4930      	ldr	r1, [pc, #192]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003026:	4313      	orrs	r3, r2
 8003028:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0310 	and.w	r3, r3, #16
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003036:	4b2c      	ldr	r3, [pc, #176]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	4929      	ldr	r1, [pc, #164]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003054:	4b24      	ldr	r3, [pc, #144]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	4921      	ldr	r1, [pc, #132]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003072:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307e:	491a      	ldr	r1, [pc, #104]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003080:	4313      	orrs	r3, r2
 8003082:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003090:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	4912      	ldr	r1, [pc, #72]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80030ae:	4b0e      	ldr	r3, [pc, #56]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	490b      	ldr	r1, [pc, #44]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80030cc:	4b06      	ldr	r3, [pc, #24]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d8:	4903      	ldr	r1, [pc, #12]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3748      	adds	r7, #72	@ 0x48
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000

080030ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e09d      	b.n	800323a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800310e:	d009      	beq.n	8003124 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
 8003116:	e005      	b.n	8003124 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fc62 	bl	8000a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2202      	movs	r2, #2
 8003148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800315a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003164:	d902      	bls.n	800316c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e002      	b.n	8003172 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800316c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003170:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800317a:	d007      	beq.n	800318c <HAL_SPI_Init+0xa0>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003184:	d002      	beq.n	800318c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	ea42 0103 	orr.w	r1, r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	f003 0204 	and.w	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003208:	ea42 0103 	orr.w	r1, r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003228:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e049      	b.n	80032e8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fd fc0f 	bl	8000a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f000 fca9 	bl	8003bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e049      	b.n	8003396 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f841 	bl	800339e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3304      	adds	r3, #4
 800332c:	4619      	mov	r1, r3
 800332e:	4610      	mov	r0, r2
 8003330:	f000 fc52 	bl	8003bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HAL_TIM_PWM_Start+0x24>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	e03c      	b.n	8003452 <HAL_TIM_PWM_Start+0x9e>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d109      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x3e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	bf14      	ite	ne
 80033ea:	2301      	movne	r3, #1
 80033ec:	2300      	moveq	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	e02f      	b.n	8003452 <HAL_TIM_PWM_Start+0x9e>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d109      	bne.n	800340c <HAL_TIM_PWM_Start+0x58>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	e022      	b.n	8003452 <HAL_TIM_PWM_Start+0x9e>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d109      	bne.n	8003426 <HAL_TIM_PWM_Start+0x72>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b01      	cmp	r3, #1
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	e015      	b.n	8003452 <HAL_TIM_PWM_Start+0x9e>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b10      	cmp	r3, #16
 800342a:	d109      	bne.n	8003440 <HAL_TIM_PWM_Start+0x8c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	e008      	b.n	8003452 <HAL_TIM_PWM_Start+0x9e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e097      	b.n	800358a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d104      	bne.n	800346a <HAL_TIM_PWM_Start+0xb6>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003468:	e023      	b.n	80034b2 <HAL_TIM_PWM_Start+0xfe>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b04      	cmp	r3, #4
 800346e:	d104      	bne.n	800347a <HAL_TIM_PWM_Start+0xc6>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003478:	e01b      	b.n	80034b2 <HAL_TIM_PWM_Start+0xfe>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d104      	bne.n	800348a <HAL_TIM_PWM_Start+0xd6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003488:	e013      	b.n	80034b2 <HAL_TIM_PWM_Start+0xfe>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d104      	bne.n	800349a <HAL_TIM_PWM_Start+0xe6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003498:	e00b      	b.n	80034b2 <HAL_TIM_PWM_Start+0xfe>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b10      	cmp	r3, #16
 800349e:	d104      	bne.n	80034aa <HAL_TIM_PWM_Start+0xf6>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034a8:	e003      	b.n	80034b2 <HAL_TIM_PWM_Start+0xfe>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2201      	movs	r2, #1
 80034b8:	6839      	ldr	r1, [r7, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 ff98 	bl	80043f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a33      	ldr	r2, [pc, #204]	@ (8003594 <HAL_TIM_PWM_Start+0x1e0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_TIM_PWM_Start+0x13e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a32      	ldr	r2, [pc, #200]	@ (8003598 <HAL_TIM_PWM_Start+0x1e4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIM_PWM_Start+0x13e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a30      	ldr	r2, [pc, #192]	@ (800359c <HAL_TIM_PWM_Start+0x1e8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIM_PWM_Start+0x13e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2f      	ldr	r2, [pc, #188]	@ (80035a0 <HAL_TIM_PWM_Start+0x1ec>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIM_PWM_Start+0x13e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2d      	ldr	r2, [pc, #180]	@ (80035a4 <HAL_TIM_PWM_Start+0x1f0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_PWM_Start+0x142>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_TIM_PWM_Start+0x144>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800350a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a20      	ldr	r2, [pc, #128]	@ (8003594 <HAL_TIM_PWM_Start+0x1e0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d018      	beq.n	8003548 <HAL_TIM_PWM_Start+0x194>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351e:	d013      	beq.n	8003548 <HAL_TIM_PWM_Start+0x194>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a20      	ldr	r2, [pc, #128]	@ (80035a8 <HAL_TIM_PWM_Start+0x1f4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00e      	beq.n	8003548 <HAL_TIM_PWM_Start+0x194>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <HAL_TIM_PWM_Start+0x1f8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d009      	beq.n	8003548 <HAL_TIM_PWM_Start+0x194>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a17      	ldr	r2, [pc, #92]	@ (8003598 <HAL_TIM_PWM_Start+0x1e4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_TIM_PWM_Start+0x194>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a16      	ldr	r2, [pc, #88]	@ (800359c <HAL_TIM_PWM_Start+0x1e8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d115      	bne.n	8003574 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <HAL_TIM_PWM_Start+0x1fc>)
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b06      	cmp	r3, #6
 8003558:	d015      	beq.n	8003586 <HAL_TIM_PWM_Start+0x1d2>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003560:	d011      	beq.n	8003586 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003572:	e008      	b.n	8003586 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e000      	b.n	8003588 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40013400 	.word	0x40013400
 800359c:	40014000 	.word	0x40014000
 80035a0:	40014400 	.word	0x40014400
 80035a4:	40014800 	.word	0x40014800
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40000800 	.word	0x40000800
 80035b0:	00010007 	.word	0x00010007

080035b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d020      	beq.n	8003618 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01b      	beq.n	8003618 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0202 	mvn.w	r2, #2
 80035e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 facb 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 8003604:	e005      	b.n	8003612 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fabd 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 face 	bl	8003bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0204 	mvn.w	r2, #4
 8003634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2202      	movs	r2, #2
 800363a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 faa5 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 8003650:	e005      	b.n	800365e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 fa97 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 faa8 	bl	8003bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d020      	beq.n	80036b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01b      	beq.n	80036b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0208 	mvn.w	r2, #8
 8003680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2204      	movs	r2, #4
 8003686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d003      	beq.n	800369e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa7f 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 800369c:	e005      	b.n	80036aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa71 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fa82 	bl	8003bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d020      	beq.n	80036fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f06f 0210 	mvn.w	r2, #16
 80036cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2208      	movs	r2, #8
 80036d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fa59 	bl	8003b9a <HAL_TIM_IC_CaptureCallback>
 80036e8:	e005      	b.n	80036f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fa4b 	bl	8003b86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 fa5c 	bl	8003bae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00c      	beq.n	8003720 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f06f 0201 	mvn.w	r2, #1
 8003718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fa29 	bl	8003b72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800373c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 ff84 	bl	800464c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00c      	beq.n	8003768 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 ff7c 	bl	8004660 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00c      	beq.n	800378c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa1b 	bl	8003bc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00c      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0220 	mvn.w	r2, #32
 80037a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 ff44 	bl	8004638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037d2:	2302      	movs	r3, #2
 80037d4:	e0ff      	b.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b14      	cmp	r3, #20
 80037e2:	f200 80f0 	bhi.w	80039c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80037e6:	a201      	add	r2, pc, #4	@ (adr r2, 80037ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	08003841 	.word	0x08003841
 80037f0:	080039c7 	.word	0x080039c7
 80037f4:	080039c7 	.word	0x080039c7
 80037f8:	080039c7 	.word	0x080039c7
 80037fc:	08003881 	.word	0x08003881
 8003800:	080039c7 	.word	0x080039c7
 8003804:	080039c7 	.word	0x080039c7
 8003808:	080039c7 	.word	0x080039c7
 800380c:	080038c3 	.word	0x080038c3
 8003810:	080039c7 	.word	0x080039c7
 8003814:	080039c7 	.word	0x080039c7
 8003818:	080039c7 	.word	0x080039c7
 800381c:	08003903 	.word	0x08003903
 8003820:	080039c7 	.word	0x080039c7
 8003824:	080039c7 	.word	0x080039c7
 8003828:	080039c7 	.word	0x080039c7
 800382c:	08003945 	.word	0x08003945
 8003830:	080039c7 	.word	0x080039c7
 8003834:	080039c7 	.word	0x080039c7
 8003838:	080039c7 	.word	0x080039c7
 800383c:	08003985 	.word	0x08003985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fa62 	bl	8003d10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6999      	ldr	r1, [r3, #24]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	619a      	str	r2, [r3, #24]
      break;
 800387e:	e0a5      	b.n	80039cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fad2 	bl	8003e30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6999      	ldr	r1, [r3, #24]
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	021a      	lsls	r2, r3, #8
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	619a      	str	r2, [r3, #24]
      break;
 80038c0:	e084      	b.n	80039cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fb3b 	bl	8003f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0208 	orr.w	r2, r2, #8
 80038dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0204 	bic.w	r2, r2, #4
 80038ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69d9      	ldr	r1, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]
      break;
 8003900:	e064      	b.n	80039cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fba3 	bl	8004054 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69d9      	ldr	r1, [r3, #28]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	021a      	lsls	r2, r3, #8
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	61da      	str	r2, [r3, #28]
      break;
 8003942:	e043      	b.n	80039cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fbec 	bl	8004128 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0208 	orr.w	r2, r2, #8
 800395e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003982:	e023      	b.n	80039cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fc30 	bl	80041f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800399e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	021a      	lsls	r2, r3, #8
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039c4:	e002      	b.n	80039cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	75fb      	strb	r3, [r7, #23]
      break;
 80039ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop

080039e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_TIM_ConfigClockSource+0x1c>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e0b6      	b.n	8003b6a <HAL_TIM_ConfigClockSource+0x18a>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a38:	d03e      	beq.n	8003ab8 <HAL_TIM_ConfigClockSource+0xd8>
 8003a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3e:	f200 8087 	bhi.w	8003b50 <HAL_TIM_ConfigClockSource+0x170>
 8003a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a46:	f000 8086 	beq.w	8003b56 <HAL_TIM_ConfigClockSource+0x176>
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4e:	d87f      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x170>
 8003a50:	2b70      	cmp	r3, #112	@ 0x70
 8003a52:	d01a      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0xaa>
 8003a54:	2b70      	cmp	r3, #112	@ 0x70
 8003a56:	d87b      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x170>
 8003a58:	2b60      	cmp	r3, #96	@ 0x60
 8003a5a:	d050      	beq.n	8003afe <HAL_TIM_ConfigClockSource+0x11e>
 8003a5c:	2b60      	cmp	r3, #96	@ 0x60
 8003a5e:	d877      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x170>
 8003a60:	2b50      	cmp	r3, #80	@ 0x50
 8003a62:	d03c      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0xfe>
 8003a64:	2b50      	cmp	r3, #80	@ 0x50
 8003a66:	d873      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x170>
 8003a68:	2b40      	cmp	r3, #64	@ 0x40
 8003a6a:	d058      	beq.n	8003b1e <HAL_TIM_ConfigClockSource+0x13e>
 8003a6c:	2b40      	cmp	r3, #64	@ 0x40
 8003a6e:	d86f      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x170>
 8003a70:	2b30      	cmp	r3, #48	@ 0x30
 8003a72:	d064      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15e>
 8003a74:	2b30      	cmp	r3, #48	@ 0x30
 8003a76:	d86b      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x170>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d060      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15e>
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d867      	bhi.n	8003b50 <HAL_TIM_ConfigClockSource+0x170>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d05c      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15e>
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d05a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0x15e>
 8003a88:	e062      	b.n	8003b50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a9a:	f000 fc89 	bl	80043b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	609a      	str	r2, [r3, #8]
      break;
 8003ab6:	e04f      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ac8:	f000 fc72 	bl	80043b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ada:	609a      	str	r2, [r3, #8]
      break;
 8003adc:	e03c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	461a      	mov	r2, r3
 8003aec:	f000 fbe6 	bl	80042bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2150      	movs	r1, #80	@ 0x50
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 fc3f 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003afc:	e02c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f000 fc05 	bl	800431a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2160      	movs	r1, #96	@ 0x60
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fc2f 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003b1c:	e01c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f000 fbc6 	bl	80042bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2140      	movs	r1, #64	@ 0x40
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fc1f 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003b3c:	e00c      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f000 fc16 	bl	800437a <TIM_ITRx_SetConfig>
      break;
 8003b4e:	e003      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      break;
 8003b54:	e000      	b.n	8003b58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a42      	ldr	r2, [pc, #264]	@ (8003cf4 <TIM_Base_SetConfig+0x11c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00f      	beq.n	8003c10 <TIM_Base_SetConfig+0x38>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf6:	d00b      	beq.n	8003c10 <TIM_Base_SetConfig+0x38>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8003cf8 <TIM_Base_SetConfig+0x120>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_Base_SetConfig+0x38>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3e      	ldr	r2, [pc, #248]	@ (8003cfc <TIM_Base_SetConfig+0x124>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_Base_SetConfig+0x38>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3d      	ldr	r2, [pc, #244]	@ (8003d00 <TIM_Base_SetConfig+0x128>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d108      	bne.n	8003c22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a33      	ldr	r2, [pc, #204]	@ (8003cf4 <TIM_Base_SetConfig+0x11c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01b      	beq.n	8003c62 <TIM_Base_SetConfig+0x8a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c30:	d017      	beq.n	8003c62 <TIM_Base_SetConfig+0x8a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a30      	ldr	r2, [pc, #192]	@ (8003cf8 <TIM_Base_SetConfig+0x120>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <TIM_Base_SetConfig+0x8a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2f      	ldr	r2, [pc, #188]	@ (8003cfc <TIM_Base_SetConfig+0x124>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00f      	beq.n	8003c62 <TIM_Base_SetConfig+0x8a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2e      	ldr	r2, [pc, #184]	@ (8003d00 <TIM_Base_SetConfig+0x128>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_Base_SetConfig+0x8a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003d04 <TIM_Base_SetConfig+0x12c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_Base_SetConfig+0x8a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2c      	ldr	r2, [pc, #176]	@ (8003d08 <TIM_Base_SetConfig+0x130>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_Base_SetConfig+0x8a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d0c <TIM_Base_SetConfig+0x134>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d108      	bne.n	8003c74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <TIM_Base_SetConfig+0x11c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00f      	beq.n	8003cc0 <TIM_Base_SetConfig+0xe8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	@ (8003d00 <TIM_Base_SetConfig+0x128>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <TIM_Base_SetConfig+0xe8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a16      	ldr	r2, [pc, #88]	@ (8003d04 <TIM_Base_SetConfig+0x12c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <TIM_Base_SetConfig+0xe8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <TIM_Base_SetConfig+0x130>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0xe8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a14      	ldr	r2, [pc, #80]	@ (8003d0c <TIM_Base_SetConfig+0x134>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d103      	bne.n	8003cc8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f023 0201 	bic.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	611a      	str	r2, [r3, #16]
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f023 0201 	bic.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0303 	bic.w	r3, r3, #3
 8003d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f023 0302 	bic.w	r3, r3, #2
 8003d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e1c <TIM_OC1_SetConfig+0x10c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <TIM_OC1_SetConfig+0x80>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a2b      	ldr	r2, [pc, #172]	@ (8003e20 <TIM_OC1_SetConfig+0x110>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_OC1_SetConfig+0x80>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <TIM_OC1_SetConfig+0x114>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_OC1_SetConfig+0x80>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a29      	ldr	r2, [pc, #164]	@ (8003e28 <TIM_OC1_SetConfig+0x118>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_OC1_SetConfig+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a28      	ldr	r2, [pc, #160]	@ (8003e2c <TIM_OC1_SetConfig+0x11c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10c      	bne.n	8003daa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0308 	bic.w	r3, r3, #8
 8003d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <TIM_OC1_SetConfig+0x10c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00f      	beq.n	8003dd2 <TIM_OC1_SetConfig+0xc2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e20 <TIM_OC1_SetConfig+0x110>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_OC1_SetConfig+0xc2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	@ (8003e24 <TIM_OC1_SetConfig+0x114>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_OC1_SetConfig+0xc2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	@ (8003e28 <TIM_OC1_SetConfig+0x118>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_OC1_SetConfig+0xc2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a17      	ldr	r2, [pc, #92]	@ (8003e2c <TIM_OC1_SetConfig+0x11c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d111      	bne.n	8003df6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40013400 	.word	0x40013400
 8003e24:	40014000 	.word	0x40014000
 8003e28:	40014400 	.word	0x40014400
 8003e2c:	40014800 	.word	0x40014800

08003e30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	f023 0210 	bic.w	r2, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0320 	bic.w	r3, r3, #32
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a28      	ldr	r2, [pc, #160]	@ (8003f30 <TIM_OC2_SetConfig+0x100>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_OC2_SetConfig+0x6c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a27      	ldr	r2, [pc, #156]	@ (8003f34 <TIM_OC2_SetConfig+0x104>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d10d      	bne.n	8003eb8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1d      	ldr	r2, [pc, #116]	@ (8003f30 <TIM_OC2_SetConfig+0x100>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00f      	beq.n	8003ee0 <TIM_OC2_SetConfig+0xb0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <TIM_OC2_SetConfig+0x104>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <TIM_OC2_SetConfig+0xb0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	@ (8003f38 <TIM_OC2_SetConfig+0x108>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_OC2_SetConfig+0xb0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f3c <TIM_OC2_SetConfig+0x10c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC2_SetConfig+0xb0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a19      	ldr	r2, [pc, #100]	@ (8003f40 <TIM_OC2_SetConfig+0x110>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d113      	bne.n	8003f08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40013400 	.word	0x40013400
 8003f38:	40014000 	.word	0x40014000
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800

08003f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a27      	ldr	r2, [pc, #156]	@ (8004040 <TIM_OC3_SetConfig+0xfc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC3_SetConfig+0x6a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a26      	ldr	r2, [pc, #152]	@ (8004044 <TIM_OC3_SetConfig+0x100>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10d      	bne.n	8003fca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fc8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8004040 <TIM_OC3_SetConfig+0xfc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_OC3_SetConfig+0xae>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <TIM_OC3_SetConfig+0x100>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_OC3_SetConfig+0xae>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8004048 <TIM_OC3_SetConfig+0x104>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC3_SetConfig+0xae>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a19      	ldr	r2, [pc, #100]	@ (800404c <TIM_OC3_SetConfig+0x108>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC3_SetConfig+0xae>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a18      	ldr	r2, [pc, #96]	@ (8004050 <TIM_OC3_SetConfig+0x10c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d113      	bne.n	800401a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800

08004054 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800408e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	021b      	lsls	r3, r3, #8
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	031b      	lsls	r3, r3, #12
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a18      	ldr	r2, [pc, #96]	@ (8004114 <TIM_OC4_SetConfig+0xc0>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00f      	beq.n	80040d8 <TIM_OC4_SetConfig+0x84>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <TIM_OC4_SetConfig+0xc4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00b      	beq.n	80040d8 <TIM_OC4_SetConfig+0x84>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a16      	ldr	r2, [pc, #88]	@ (800411c <TIM_OC4_SetConfig+0xc8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d007      	beq.n	80040d8 <TIM_OC4_SetConfig+0x84>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a15      	ldr	r2, [pc, #84]	@ (8004120 <TIM_OC4_SetConfig+0xcc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d003      	beq.n	80040d8 <TIM_OC4_SetConfig+0x84>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a14      	ldr	r2, [pc, #80]	@ (8004124 <TIM_OC4_SetConfig+0xd0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d109      	bne.n	80040ec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	019b      	lsls	r3, r3, #6
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40013400 	.word	0x40013400
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800416c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	041b      	lsls	r3, r3, #16
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a17      	ldr	r2, [pc, #92]	@ (80041dc <TIM_OC5_SetConfig+0xb4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00f      	beq.n	80041a2 <TIM_OC5_SetConfig+0x7a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a16      	ldr	r2, [pc, #88]	@ (80041e0 <TIM_OC5_SetConfig+0xb8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00b      	beq.n	80041a2 <TIM_OC5_SetConfig+0x7a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a15      	ldr	r2, [pc, #84]	@ (80041e4 <TIM_OC5_SetConfig+0xbc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d007      	beq.n	80041a2 <TIM_OC5_SetConfig+0x7a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a14      	ldr	r2, [pc, #80]	@ (80041e8 <TIM_OC5_SetConfig+0xc0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d003      	beq.n	80041a2 <TIM_OC5_SetConfig+0x7a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a13      	ldr	r2, [pc, #76]	@ (80041ec <TIM_OC5_SetConfig+0xc4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d109      	bne.n	80041b6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	621a      	str	r2, [r3, #32]
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40013400 	.word	0x40013400
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40014400 	.word	0x40014400
 80041ec:	40014800 	.word	0x40014800

080041f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800421e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	051b      	lsls	r3, r3, #20
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a18      	ldr	r2, [pc, #96]	@ (80042a8 <TIM_OC6_SetConfig+0xb8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d00f      	beq.n	800426c <TIM_OC6_SetConfig+0x7c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <TIM_OC6_SetConfig+0xbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d00b      	beq.n	800426c <TIM_OC6_SetConfig+0x7c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a16      	ldr	r2, [pc, #88]	@ (80042b0 <TIM_OC6_SetConfig+0xc0>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d007      	beq.n	800426c <TIM_OC6_SetConfig+0x7c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a15      	ldr	r2, [pc, #84]	@ (80042b4 <TIM_OC6_SetConfig+0xc4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC6_SetConfig+0x7c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a14      	ldr	r2, [pc, #80]	@ (80042b8 <TIM_OC6_SetConfig+0xc8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d109      	bne.n	8004280 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004272:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	029b      	lsls	r3, r3, #10
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40012c00 	.word	0x40012c00
 80042ac:	40013400 	.word	0x40013400
 80042b0:	40014000 	.word	0x40014000
 80042b4:	40014400 	.word	0x40014400
 80042b8:	40014800 	.word	0x40014800

080042bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	f023 0201 	bic.w	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 030a 	bic.w	r3, r3, #10
 80042f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431a:	b480      	push	{r7}
 800431c:	b087      	sub	sp, #28
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 0210 	bic.w	r2, r3, #16
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	031b      	lsls	r3, r3, #12
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	f043 0307 	orr.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]
}
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	021a      	lsls	r2, r3, #8
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	609a      	str	r2, [r3, #8]
}
 80043e4:	bf00      	nop
 80043e6:	371c      	adds	r7, #28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2201      	movs	r2, #1
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1a      	ldr	r2, [r3, #32]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1a      	ldr	r2, [r3, #32]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 031f 	and.w	r3, r3, #31
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	fa01 f303 	lsl.w	r3, r1, r3
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
	...

0800443c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004450:	2302      	movs	r3, #2
 8004452:	e063      	b.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2b      	ldr	r2, [pc, #172]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d004      	beq.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2a      	ldr	r2, [pc, #168]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d108      	bne.n	800449a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800448e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d018      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c6:	d013      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a18      	ldr	r2, [pc, #96]	@ (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00e      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a17      	ldr	r2, [pc, #92]	@ (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d009      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a12      	ldr	r2, [pc, #72]	@ (800452c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d004      	beq.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a13      	ldr	r2, [pc, #76]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d10c      	bne.n	800450a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40013400 	.word	0x40013400
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40014000 	.word	0x40014000

0800453c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004554:	2302      	movs	r3, #2
 8004556:	e065      	b.n	8004624 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a16      	ldr	r2, [pc, #88]	@ (8004630 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d004      	beq.n	80045e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a14      	ldr	r2, [pc, #80]	@ (8004634 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d115      	bne.n	8004612 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	051b      	lsls	r3, r3, #20
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	69db      	ldr	r3, [r3, #28]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	40012c00 	.word	0x40012c00
 8004634:	40013400 	.word	0x40013400

08004638 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e040      	b.n	8004708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fa8e 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2224      	movs	r2, #36	@ 0x24
 80046a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fa86 	bl	8004bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f8af 	bl	8004824 <UART_SetConfig>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e01b      	b.n	8004708 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fb05 	bl	8004d10 <UART_CheckIdleState>
 8004706:	4603      	mov	r3, r0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08a      	sub	sp, #40	@ 0x28
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004724:	2b20      	cmp	r3, #32
 8004726:	d177      	bne.n	8004818 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_UART_Transmit+0x24>
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e070      	b.n	800481a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2221      	movs	r2, #33	@ 0x21
 8004744:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004746:	f7fc fbf5 	bl	8000f34 <HAL_GetTick>
 800474a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	88fa      	ldrh	r2, [r7, #6]
 8004750:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	88fa      	ldrh	r2, [r7, #6]
 8004758:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004764:	d108      	bne.n	8004778 <HAL_UART_Transmit+0x68>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e003      	b.n	8004780 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004780:	e02f      	b.n	80047e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2180      	movs	r1, #128	@ 0x80
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 fb67 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e03b      	b.n	800481a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b4:	b292      	uxth	r2, r2
 80047b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	3302      	adds	r3, #2
 80047bc:	61bb      	str	r3, [r7, #24]
 80047be:	e007      	b.n	80047d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3301      	adds	r3, #1
 80047ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1c9      	bne.n	8004782 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2200      	movs	r2, #0
 80047f6:	2140      	movs	r1, #64	@ 0x40
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fb31 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e005      	b.n	800481a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	e000      	b.n	800481a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004818:	2302      	movs	r3, #2
  }
}
 800481a:	4618      	mov	r0, r3
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004852:	f023 030c 	bic.w	r3, r3, #12
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	6979      	ldr	r1, [r7, #20]
 800485c:	430b      	orrs	r3, r1
 800485e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	430a      	orrs	r2, r1
 8004898:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4aa7      	ldr	r2, [pc, #668]	@ (8004b3c <UART_SetConfig+0x318>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d120      	bne.n	80048e6 <UART_SetConfig+0xc2>
 80048a4:	4ba6      	ldr	r3, [pc, #664]	@ (8004b40 <UART_SetConfig+0x31c>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d817      	bhi.n	80048e0 <UART_SetConfig+0xbc>
 80048b0:	a201      	add	r2, pc, #4	@ (adr r2, 80048b8 <UART_SetConfig+0x94>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048d5 	.word	0x080048d5
 80048c0:	080048db 	.word	0x080048db
 80048c4:	080048cf 	.word	0x080048cf
 80048c8:	2301      	movs	r3, #1
 80048ca:	77fb      	strb	r3, [r7, #31]
 80048cc:	e0b5      	b.n	8004a3a <UART_SetConfig+0x216>
 80048ce:	2302      	movs	r3, #2
 80048d0:	77fb      	strb	r3, [r7, #31]
 80048d2:	e0b2      	b.n	8004a3a <UART_SetConfig+0x216>
 80048d4:	2304      	movs	r3, #4
 80048d6:	77fb      	strb	r3, [r7, #31]
 80048d8:	e0af      	b.n	8004a3a <UART_SetConfig+0x216>
 80048da:	2308      	movs	r3, #8
 80048dc:	77fb      	strb	r3, [r7, #31]
 80048de:	e0ac      	b.n	8004a3a <UART_SetConfig+0x216>
 80048e0:	2310      	movs	r3, #16
 80048e2:	77fb      	strb	r3, [r7, #31]
 80048e4:	e0a9      	b.n	8004a3a <UART_SetConfig+0x216>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a96      	ldr	r2, [pc, #600]	@ (8004b44 <UART_SetConfig+0x320>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d124      	bne.n	800493a <UART_SetConfig+0x116>
 80048f0:	4b93      	ldr	r3, [pc, #588]	@ (8004b40 <UART_SetConfig+0x31c>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80048fc:	d011      	beq.n	8004922 <UART_SetConfig+0xfe>
 80048fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004902:	d817      	bhi.n	8004934 <UART_SetConfig+0x110>
 8004904:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004908:	d011      	beq.n	800492e <UART_SetConfig+0x10a>
 800490a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800490e:	d811      	bhi.n	8004934 <UART_SetConfig+0x110>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <UART_SetConfig+0xf8>
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004918:	d006      	beq.n	8004928 <UART_SetConfig+0x104>
 800491a:	e00b      	b.n	8004934 <UART_SetConfig+0x110>
 800491c:	2300      	movs	r3, #0
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e08b      	b.n	8004a3a <UART_SetConfig+0x216>
 8004922:	2302      	movs	r3, #2
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e088      	b.n	8004a3a <UART_SetConfig+0x216>
 8004928:	2304      	movs	r3, #4
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e085      	b.n	8004a3a <UART_SetConfig+0x216>
 800492e:	2308      	movs	r3, #8
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e082      	b.n	8004a3a <UART_SetConfig+0x216>
 8004934:	2310      	movs	r3, #16
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e07f      	b.n	8004a3a <UART_SetConfig+0x216>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a82      	ldr	r2, [pc, #520]	@ (8004b48 <UART_SetConfig+0x324>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d124      	bne.n	800498e <UART_SetConfig+0x16a>
 8004944:	4b7e      	ldr	r3, [pc, #504]	@ (8004b40 <UART_SetConfig+0x31c>)
 8004946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004948:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800494c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004950:	d011      	beq.n	8004976 <UART_SetConfig+0x152>
 8004952:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004956:	d817      	bhi.n	8004988 <UART_SetConfig+0x164>
 8004958:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800495c:	d011      	beq.n	8004982 <UART_SetConfig+0x15e>
 800495e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004962:	d811      	bhi.n	8004988 <UART_SetConfig+0x164>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <UART_SetConfig+0x14c>
 8004968:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800496c:	d006      	beq.n	800497c <UART_SetConfig+0x158>
 800496e:	e00b      	b.n	8004988 <UART_SetConfig+0x164>
 8004970:	2300      	movs	r3, #0
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e061      	b.n	8004a3a <UART_SetConfig+0x216>
 8004976:	2302      	movs	r3, #2
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e05e      	b.n	8004a3a <UART_SetConfig+0x216>
 800497c:	2304      	movs	r3, #4
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e05b      	b.n	8004a3a <UART_SetConfig+0x216>
 8004982:	2308      	movs	r3, #8
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e058      	b.n	8004a3a <UART_SetConfig+0x216>
 8004988:	2310      	movs	r3, #16
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e055      	b.n	8004a3a <UART_SetConfig+0x216>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a6e      	ldr	r2, [pc, #440]	@ (8004b4c <UART_SetConfig+0x328>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d124      	bne.n	80049e2 <UART_SetConfig+0x1be>
 8004998:	4b69      	ldr	r3, [pc, #420]	@ (8004b40 <UART_SetConfig+0x31c>)
 800499a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80049a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049a4:	d011      	beq.n	80049ca <UART_SetConfig+0x1a6>
 80049a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049aa:	d817      	bhi.n	80049dc <UART_SetConfig+0x1b8>
 80049ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049b0:	d011      	beq.n	80049d6 <UART_SetConfig+0x1b2>
 80049b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049b6:	d811      	bhi.n	80049dc <UART_SetConfig+0x1b8>
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <UART_SetConfig+0x1a0>
 80049bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049c0:	d006      	beq.n	80049d0 <UART_SetConfig+0x1ac>
 80049c2:	e00b      	b.n	80049dc <UART_SetConfig+0x1b8>
 80049c4:	2300      	movs	r3, #0
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e037      	b.n	8004a3a <UART_SetConfig+0x216>
 80049ca:	2302      	movs	r3, #2
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e034      	b.n	8004a3a <UART_SetConfig+0x216>
 80049d0:	2304      	movs	r3, #4
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e031      	b.n	8004a3a <UART_SetConfig+0x216>
 80049d6:	2308      	movs	r3, #8
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e02e      	b.n	8004a3a <UART_SetConfig+0x216>
 80049dc:	2310      	movs	r3, #16
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e02b      	b.n	8004a3a <UART_SetConfig+0x216>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a5a      	ldr	r2, [pc, #360]	@ (8004b50 <UART_SetConfig+0x32c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d124      	bne.n	8004a36 <UART_SetConfig+0x212>
 80049ec:	4b54      	ldr	r3, [pc, #336]	@ (8004b40 <UART_SetConfig+0x31c>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80049f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049f8:	d011      	beq.n	8004a1e <UART_SetConfig+0x1fa>
 80049fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049fe:	d817      	bhi.n	8004a30 <UART_SetConfig+0x20c>
 8004a00:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a04:	d011      	beq.n	8004a2a <UART_SetConfig+0x206>
 8004a06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004a0a:	d811      	bhi.n	8004a30 <UART_SetConfig+0x20c>
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <UART_SetConfig+0x1f4>
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a14:	d006      	beq.n	8004a24 <UART_SetConfig+0x200>
 8004a16:	e00b      	b.n	8004a30 <UART_SetConfig+0x20c>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	77fb      	strb	r3, [r7, #31]
 8004a1c:	e00d      	b.n	8004a3a <UART_SetConfig+0x216>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	77fb      	strb	r3, [r7, #31]
 8004a22:	e00a      	b.n	8004a3a <UART_SetConfig+0x216>
 8004a24:	2304      	movs	r3, #4
 8004a26:	77fb      	strb	r3, [r7, #31]
 8004a28:	e007      	b.n	8004a3a <UART_SetConfig+0x216>
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	77fb      	strb	r3, [r7, #31]
 8004a2e:	e004      	b.n	8004a3a <UART_SetConfig+0x216>
 8004a30:	2310      	movs	r3, #16
 8004a32:	77fb      	strb	r3, [r7, #31]
 8004a34:	e001      	b.n	8004a3a <UART_SetConfig+0x216>
 8004a36:	2310      	movs	r3, #16
 8004a38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a42:	d15b      	bne.n	8004afc <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8004a44:	7ffb      	ldrb	r3, [r7, #31]
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d827      	bhi.n	8004a9a <UART_SetConfig+0x276>
 8004a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <UART_SetConfig+0x22c>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a75 	.word	0x08004a75
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a85 	.word	0x08004a85
 8004a5c:	08004a9b 	.word	0x08004a9b
 8004a60:	08004a8b 	.word	0x08004a8b
 8004a64:	08004a9b 	.word	0x08004a9b
 8004a68:	08004a9b 	.word	0x08004a9b
 8004a6c:	08004a9b 	.word	0x08004a9b
 8004a70:	08004a93 	.word	0x08004a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a74:	f7fe f946 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8004a78:	61b8      	str	r0, [r7, #24]
        break;
 8004a7a:	e013      	b.n	8004aa4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7fe f964 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8004a80:	61b8      	str	r0, [r7, #24]
        break;
 8004a82:	e00f      	b.n	8004aa4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a84:	4b33      	ldr	r3, [pc, #204]	@ (8004b54 <UART_SetConfig+0x330>)
 8004a86:	61bb      	str	r3, [r7, #24]
        break;
 8004a88:	e00c      	b.n	8004aa4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8a:	f7fe f8db 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8004a8e:	61b8      	str	r0, [r7, #24]
        break;
 8004a90:	e008      	b.n	8004aa4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a96:	61bb      	str	r3, [r7, #24]
        break;
 8004a98:	e004      	b.n	8004aa4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8004aa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8082 	beq.w	8004bb0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	005a      	lsls	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	441a      	add	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d916      	bls.n	8004af6 <UART_SetConfig+0x2d2>
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ace:	d212      	bcs.n	8004af6 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	f023 030f 	bic.w	r3, r3, #15
 8004ad8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	89fb      	ldrh	r3, [r7, #14]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	89fa      	ldrh	r2, [r7, #14]
 8004af2:	60da      	str	r2, [r3, #12]
 8004af4:	e05c      	b.n	8004bb0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	77bb      	strb	r3, [r7, #30]
 8004afa:	e059      	b.n	8004bb0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afc:	7ffb      	ldrb	r3, [r7, #31]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d835      	bhi.n	8004b6e <UART_SetConfig+0x34a>
 8004b02:	a201      	add	r2, pc, #4	@ (adr r2, 8004b08 <UART_SetConfig+0x2e4>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b35 	.word	0x08004b35
 8004b10:	08004b59 	.word	0x08004b59
 8004b14:	08004b6f 	.word	0x08004b6f
 8004b18:	08004b5f 	.word	0x08004b5f
 8004b1c:	08004b6f 	.word	0x08004b6f
 8004b20:	08004b6f 	.word	0x08004b6f
 8004b24:	08004b6f 	.word	0x08004b6f
 8004b28:	08004b67 	.word	0x08004b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f7fe f8ea 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8004b30:	61b8      	str	r0, [r7, #24]
        break;
 8004b32:	e021      	b.n	8004b78 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b34:	f7fe f908 	bl	8002d48 <HAL_RCC_GetPCLK2Freq>
 8004b38:	61b8      	str	r0, [r7, #24]
        break;
 8004b3a:	e01d      	b.n	8004b78 <UART_SetConfig+0x354>
 8004b3c:	40013800 	.word	0x40013800
 8004b40:	40021000 	.word	0x40021000
 8004b44:	40004400 	.word	0x40004400
 8004b48:	40004800 	.word	0x40004800
 8004b4c:	40004c00 	.word	0x40004c00
 8004b50:	40005000 	.word	0x40005000
 8004b54:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <UART_SetConfig+0x3a4>)
 8004b5a:	61bb      	str	r3, [r7, #24]
        break;
 8004b5c:	e00c      	b.n	8004b78 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b5e:	f7fe f871 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8004b62:	61b8      	str	r0, [r7, #24]
        break;
 8004b64:	e008      	b.n	8004b78 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	61bb      	str	r3, [r7, #24]
        break;
 8004b6c:	e004      	b.n	8004b78 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	77bb      	strb	r3, [r7, #30]
        break;
 8004b76:	bf00      	nop
    }

    if (pclk != 0U)
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d018      	beq.n	8004bb0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	085a      	lsrs	r2, r3, #1
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	441a      	add	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b0f      	cmp	r3, #15
 8004b96:	d909      	bls.n	8004bac <UART_SetConfig+0x388>
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b9e:	d205      	bcs.n	8004bac <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	60da      	str	r2, [r3, #12]
 8004baa:	e001      	b.n	8004bb0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	007a1200 	.word	0x007a1200

08004bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00a      	beq.n	8004bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01a      	beq.n	8004ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cca:	d10a      	bne.n	8004ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	605a      	str	r2, [r3, #4]
  }
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b098      	sub	sp, #96	@ 0x60
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d20:	f7fc f908 	bl	8000f34 <HAL_GetTick>
 8004d24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d12e      	bne.n	8004d92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f88c 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d021      	beq.n	8004d92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d74:	e841 2300 	strex	r3, r2, [r1]
 8004d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1e6      	bne.n	8004d4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e062      	b.n	8004e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d149      	bne.n	8004e34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004da8:	2200      	movs	r2, #0
 8004daa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f856 	bl	8004e60 <UART_WaitOnFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d03c      	beq.n	8004e34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e6      	bne.n	8004dba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3308      	adds	r3, #8
 8004df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e0c:	61fa      	str	r2, [r7, #28]
 8004e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	69b9      	ldr	r1, [r7, #24]
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	617b      	str	r3, [r7, #20]
   return(result);
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e011      	b.n	8004e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2220      	movs	r2, #32
 8004e38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3758      	adds	r7, #88	@ 0x58
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	603b      	str	r3, [r7, #0]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e70:	e04f      	b.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e78:	d04b      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7a:	f7fc f85b 	bl	8000f34 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d302      	bcc.n	8004e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e04e      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d037      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b80      	cmp	r3, #128	@ 0x80
 8004ea6:	d034      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b40      	cmp	r3, #64	@ 0x40
 8004eac:	d031      	beq.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d110      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 f838 	bl	8004f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e029      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eec:	d111      	bne.n	8004f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 f81e 	bl	8004f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e00f      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69da      	ldr	r2, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	bf0c      	ite	eq
 8004f22:	2301      	moveq	r3, #1
 8004f24:	2300      	movne	r3, #0
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d0a0      	beq.n	8004e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b095      	sub	sp, #84	@ 0x54
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f60:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3308      	adds	r3, #8
 8004f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3308      	adds	r3, #8
 8004f92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d118      	bne.n	8004fe2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f023 0310 	bic.w	r3, r3, #16
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fce:	61bb      	str	r3, [r7, #24]
 8004fd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6979      	ldr	r1, [r7, #20]
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	613b      	str	r3, [r7, #16]
   return(result);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e6      	bne.n	8004fb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ff6:	bf00      	nop
 8004ff8:	3754      	adds	r7, #84	@ 0x54
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005002:	b480      	push	{r7}
 8005004:	b085      	sub	sp, #20
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800500a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800500e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	b29b      	uxth	r3, r3
 800501c:	43db      	mvns	r3, r3
 800501e:	b29b      	uxth	r3, r3
 8005020:	4013      	ands	r3, r2
 8005022:	b29a      	uxth	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3714      	adds	r7, #20
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	1d3b      	adds	r3, r7, #4
 8005042:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <siprintf>:
 8005074:	b40e      	push	{r1, r2, r3}
 8005076:	b500      	push	{lr}
 8005078:	b09c      	sub	sp, #112	@ 0x70
 800507a:	ab1d      	add	r3, sp, #116	@ 0x74
 800507c:	9002      	str	r0, [sp, #8]
 800507e:	9006      	str	r0, [sp, #24]
 8005080:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005084:	4809      	ldr	r0, [pc, #36]	@ (80050ac <siprintf+0x38>)
 8005086:	9107      	str	r1, [sp, #28]
 8005088:	9104      	str	r1, [sp, #16]
 800508a:	4909      	ldr	r1, [pc, #36]	@ (80050b0 <siprintf+0x3c>)
 800508c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005090:	9105      	str	r1, [sp, #20]
 8005092:	6800      	ldr	r0, [r0, #0]
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	a902      	add	r1, sp, #8
 8005098:	f000 f89c 	bl	80051d4 <_svfiprintf_r>
 800509c:	9b02      	ldr	r3, [sp, #8]
 800509e:	2200      	movs	r2, #0
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	b01c      	add	sp, #112	@ 0x70
 80050a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050a8:	b003      	add	sp, #12
 80050aa:	4770      	bx	lr
 80050ac:	2000000c 	.word	0x2000000c
 80050b0:	ffff0208 	.word	0xffff0208

080050b4 <memset>:
 80050b4:	4402      	add	r2, r0
 80050b6:	4603      	mov	r3, r0
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d100      	bne.n	80050be <memset+0xa>
 80050bc:	4770      	bx	lr
 80050be:	f803 1b01 	strb.w	r1, [r3], #1
 80050c2:	e7f9      	b.n	80050b8 <memset+0x4>

080050c4 <__errno>:
 80050c4:	4b01      	ldr	r3, [pc, #4]	@ (80050cc <__errno+0x8>)
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	2000000c 	.word	0x2000000c

080050d0 <__libc_init_array>:
 80050d0:	b570      	push	{r4, r5, r6, lr}
 80050d2:	4d0d      	ldr	r5, [pc, #52]	@ (8005108 <__libc_init_array+0x38>)
 80050d4:	4c0d      	ldr	r4, [pc, #52]	@ (800510c <__libc_init_array+0x3c>)
 80050d6:	1b64      	subs	r4, r4, r5
 80050d8:	10a4      	asrs	r4, r4, #2
 80050da:	2600      	movs	r6, #0
 80050dc:	42a6      	cmp	r6, r4
 80050de:	d109      	bne.n	80050f4 <__libc_init_array+0x24>
 80050e0:	4d0b      	ldr	r5, [pc, #44]	@ (8005110 <__libc_init_array+0x40>)
 80050e2:	4c0c      	ldr	r4, [pc, #48]	@ (8005114 <__libc_init_array+0x44>)
 80050e4:	f000 fc66 	bl	80059b4 <_init>
 80050e8:	1b64      	subs	r4, r4, r5
 80050ea:	10a4      	asrs	r4, r4, #2
 80050ec:	2600      	movs	r6, #0
 80050ee:	42a6      	cmp	r6, r4
 80050f0:	d105      	bne.n	80050fe <__libc_init_array+0x2e>
 80050f2:	bd70      	pop	{r4, r5, r6, pc}
 80050f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f8:	4798      	blx	r3
 80050fa:	3601      	adds	r6, #1
 80050fc:	e7ee      	b.n	80050dc <__libc_init_array+0xc>
 80050fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005102:	4798      	blx	r3
 8005104:	3601      	adds	r6, #1
 8005106:	e7f2      	b.n	80050ee <__libc_init_array+0x1e>
 8005108:	08005a60 	.word	0x08005a60
 800510c:	08005a60 	.word	0x08005a60
 8005110:	08005a60 	.word	0x08005a60
 8005114:	08005a64 	.word	0x08005a64

08005118 <__retarget_lock_acquire_recursive>:
 8005118:	4770      	bx	lr

0800511a <__retarget_lock_release_recursive>:
 800511a:	4770      	bx	lr

0800511c <__ssputs_r>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	688e      	ldr	r6, [r1, #8]
 8005122:	461f      	mov	r7, r3
 8005124:	42be      	cmp	r6, r7
 8005126:	680b      	ldr	r3, [r1, #0]
 8005128:	4682      	mov	sl, r0
 800512a:	460c      	mov	r4, r1
 800512c:	4690      	mov	r8, r2
 800512e:	d82d      	bhi.n	800518c <__ssputs_r+0x70>
 8005130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005134:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005138:	d026      	beq.n	8005188 <__ssputs_r+0x6c>
 800513a:	6965      	ldr	r5, [r4, #20]
 800513c:	6909      	ldr	r1, [r1, #16]
 800513e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005142:	eba3 0901 	sub.w	r9, r3, r1
 8005146:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800514a:	1c7b      	adds	r3, r7, #1
 800514c:	444b      	add	r3, r9
 800514e:	106d      	asrs	r5, r5, #1
 8005150:	429d      	cmp	r5, r3
 8005152:	bf38      	it	cc
 8005154:	461d      	movcc	r5, r3
 8005156:	0553      	lsls	r3, r2, #21
 8005158:	d527      	bpl.n	80051aa <__ssputs_r+0x8e>
 800515a:	4629      	mov	r1, r5
 800515c:	f000 f958 	bl	8005410 <_malloc_r>
 8005160:	4606      	mov	r6, r0
 8005162:	b360      	cbz	r0, 80051be <__ssputs_r+0xa2>
 8005164:	6921      	ldr	r1, [r4, #16]
 8005166:	464a      	mov	r2, r9
 8005168:	f000 fbc4 	bl	80058f4 <memcpy>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	6126      	str	r6, [r4, #16]
 800517a:	6165      	str	r5, [r4, #20]
 800517c:	444e      	add	r6, r9
 800517e:	eba5 0509 	sub.w	r5, r5, r9
 8005182:	6026      	str	r6, [r4, #0]
 8005184:	60a5      	str	r5, [r4, #8]
 8005186:	463e      	mov	r6, r7
 8005188:	42be      	cmp	r6, r7
 800518a:	d900      	bls.n	800518e <__ssputs_r+0x72>
 800518c:	463e      	mov	r6, r7
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	4632      	mov	r2, r6
 8005192:	4641      	mov	r1, r8
 8005194:	f000 fb84 	bl	80058a0 <memmove>
 8005198:	68a3      	ldr	r3, [r4, #8]
 800519a:	1b9b      	subs	r3, r3, r6
 800519c:	60a3      	str	r3, [r4, #8]
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	4433      	add	r3, r6
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	2000      	movs	r0, #0
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051aa:	462a      	mov	r2, r5
 80051ac:	f000 fb4a 	bl	8005844 <_realloc_r>
 80051b0:	4606      	mov	r6, r0
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d1e0      	bne.n	8005178 <__ssputs_r+0x5c>
 80051b6:	6921      	ldr	r1, [r4, #16]
 80051b8:	4650      	mov	r0, sl
 80051ba:	f000 fba9 	bl	8005910 <_free_r>
 80051be:	230c      	movs	r3, #12
 80051c0:	f8ca 3000 	str.w	r3, [sl]
 80051c4:	89a3      	ldrh	r3, [r4, #12]
 80051c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ca:	81a3      	strh	r3, [r4, #12]
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051d0:	e7e9      	b.n	80051a6 <__ssputs_r+0x8a>
	...

080051d4 <_svfiprintf_r>:
 80051d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d8:	4698      	mov	r8, r3
 80051da:	898b      	ldrh	r3, [r1, #12]
 80051dc:	061b      	lsls	r3, r3, #24
 80051de:	b09d      	sub	sp, #116	@ 0x74
 80051e0:	4607      	mov	r7, r0
 80051e2:	460d      	mov	r5, r1
 80051e4:	4614      	mov	r4, r2
 80051e6:	d510      	bpl.n	800520a <_svfiprintf_r+0x36>
 80051e8:	690b      	ldr	r3, [r1, #16]
 80051ea:	b973      	cbnz	r3, 800520a <_svfiprintf_r+0x36>
 80051ec:	2140      	movs	r1, #64	@ 0x40
 80051ee:	f000 f90f 	bl	8005410 <_malloc_r>
 80051f2:	6028      	str	r0, [r5, #0]
 80051f4:	6128      	str	r0, [r5, #16]
 80051f6:	b930      	cbnz	r0, 8005206 <_svfiprintf_r+0x32>
 80051f8:	230c      	movs	r3, #12
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005200:	b01d      	add	sp, #116	@ 0x74
 8005202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005206:	2340      	movs	r3, #64	@ 0x40
 8005208:	616b      	str	r3, [r5, #20]
 800520a:	2300      	movs	r3, #0
 800520c:	9309      	str	r3, [sp, #36]	@ 0x24
 800520e:	2320      	movs	r3, #32
 8005210:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005214:	f8cd 800c 	str.w	r8, [sp, #12]
 8005218:	2330      	movs	r3, #48	@ 0x30
 800521a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80053b8 <_svfiprintf_r+0x1e4>
 800521e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005222:	f04f 0901 	mov.w	r9, #1
 8005226:	4623      	mov	r3, r4
 8005228:	469a      	mov	sl, r3
 800522a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800522e:	b10a      	cbz	r2, 8005234 <_svfiprintf_r+0x60>
 8005230:	2a25      	cmp	r2, #37	@ 0x25
 8005232:	d1f9      	bne.n	8005228 <_svfiprintf_r+0x54>
 8005234:	ebba 0b04 	subs.w	fp, sl, r4
 8005238:	d00b      	beq.n	8005252 <_svfiprintf_r+0x7e>
 800523a:	465b      	mov	r3, fp
 800523c:	4622      	mov	r2, r4
 800523e:	4629      	mov	r1, r5
 8005240:	4638      	mov	r0, r7
 8005242:	f7ff ff6b 	bl	800511c <__ssputs_r>
 8005246:	3001      	adds	r0, #1
 8005248:	f000 80a7 	beq.w	800539a <_svfiprintf_r+0x1c6>
 800524c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800524e:	445a      	add	r2, fp
 8005250:	9209      	str	r2, [sp, #36]	@ 0x24
 8005252:	f89a 3000 	ldrb.w	r3, [sl]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 809f 	beq.w	800539a <_svfiprintf_r+0x1c6>
 800525c:	2300      	movs	r3, #0
 800525e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005262:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005266:	f10a 0a01 	add.w	sl, sl, #1
 800526a:	9304      	str	r3, [sp, #16]
 800526c:	9307      	str	r3, [sp, #28]
 800526e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005272:	931a      	str	r3, [sp, #104]	@ 0x68
 8005274:	4654      	mov	r4, sl
 8005276:	2205      	movs	r2, #5
 8005278:	f814 1b01 	ldrb.w	r1, [r4], #1
 800527c:	484e      	ldr	r0, [pc, #312]	@ (80053b8 <_svfiprintf_r+0x1e4>)
 800527e:	f7fa ffa7 	bl	80001d0 <memchr>
 8005282:	9a04      	ldr	r2, [sp, #16]
 8005284:	b9d8      	cbnz	r0, 80052be <_svfiprintf_r+0xea>
 8005286:	06d0      	lsls	r0, r2, #27
 8005288:	bf44      	itt	mi
 800528a:	2320      	movmi	r3, #32
 800528c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005290:	0711      	lsls	r1, r2, #28
 8005292:	bf44      	itt	mi
 8005294:	232b      	movmi	r3, #43	@ 0x2b
 8005296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800529a:	f89a 3000 	ldrb.w	r3, [sl]
 800529e:	2b2a      	cmp	r3, #42	@ 0x2a
 80052a0:	d015      	beq.n	80052ce <_svfiprintf_r+0xfa>
 80052a2:	9a07      	ldr	r2, [sp, #28]
 80052a4:	4654      	mov	r4, sl
 80052a6:	2000      	movs	r0, #0
 80052a8:	f04f 0c0a 	mov.w	ip, #10
 80052ac:	4621      	mov	r1, r4
 80052ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052b2:	3b30      	subs	r3, #48	@ 0x30
 80052b4:	2b09      	cmp	r3, #9
 80052b6:	d94b      	bls.n	8005350 <_svfiprintf_r+0x17c>
 80052b8:	b1b0      	cbz	r0, 80052e8 <_svfiprintf_r+0x114>
 80052ba:	9207      	str	r2, [sp, #28]
 80052bc:	e014      	b.n	80052e8 <_svfiprintf_r+0x114>
 80052be:	eba0 0308 	sub.w	r3, r0, r8
 80052c2:	fa09 f303 	lsl.w	r3, r9, r3
 80052c6:	4313      	orrs	r3, r2
 80052c8:	9304      	str	r3, [sp, #16]
 80052ca:	46a2      	mov	sl, r4
 80052cc:	e7d2      	b.n	8005274 <_svfiprintf_r+0xa0>
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	1d19      	adds	r1, r3, #4
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	9103      	str	r1, [sp, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bfbb      	ittet	lt
 80052da:	425b      	neglt	r3, r3
 80052dc:	f042 0202 	orrlt.w	r2, r2, #2
 80052e0:	9307      	strge	r3, [sp, #28]
 80052e2:	9307      	strlt	r3, [sp, #28]
 80052e4:	bfb8      	it	lt
 80052e6:	9204      	strlt	r2, [sp, #16]
 80052e8:	7823      	ldrb	r3, [r4, #0]
 80052ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80052ec:	d10a      	bne.n	8005304 <_svfiprintf_r+0x130>
 80052ee:	7863      	ldrb	r3, [r4, #1]
 80052f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80052f2:	d132      	bne.n	800535a <_svfiprintf_r+0x186>
 80052f4:	9b03      	ldr	r3, [sp, #12]
 80052f6:	1d1a      	adds	r2, r3, #4
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	9203      	str	r2, [sp, #12]
 80052fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005300:	3402      	adds	r4, #2
 8005302:	9305      	str	r3, [sp, #20]
 8005304:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80053c8 <_svfiprintf_r+0x1f4>
 8005308:	7821      	ldrb	r1, [r4, #0]
 800530a:	2203      	movs	r2, #3
 800530c:	4650      	mov	r0, sl
 800530e:	f7fa ff5f 	bl	80001d0 <memchr>
 8005312:	b138      	cbz	r0, 8005324 <_svfiprintf_r+0x150>
 8005314:	9b04      	ldr	r3, [sp, #16]
 8005316:	eba0 000a 	sub.w	r0, r0, sl
 800531a:	2240      	movs	r2, #64	@ 0x40
 800531c:	4082      	lsls	r2, r0
 800531e:	4313      	orrs	r3, r2
 8005320:	3401      	adds	r4, #1
 8005322:	9304      	str	r3, [sp, #16]
 8005324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005328:	4824      	ldr	r0, [pc, #144]	@ (80053bc <_svfiprintf_r+0x1e8>)
 800532a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800532e:	2206      	movs	r2, #6
 8005330:	f7fa ff4e 	bl	80001d0 <memchr>
 8005334:	2800      	cmp	r0, #0
 8005336:	d036      	beq.n	80053a6 <_svfiprintf_r+0x1d2>
 8005338:	4b21      	ldr	r3, [pc, #132]	@ (80053c0 <_svfiprintf_r+0x1ec>)
 800533a:	bb1b      	cbnz	r3, 8005384 <_svfiprintf_r+0x1b0>
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	3307      	adds	r3, #7
 8005340:	f023 0307 	bic.w	r3, r3, #7
 8005344:	3308      	adds	r3, #8
 8005346:	9303      	str	r3, [sp, #12]
 8005348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800534a:	4433      	add	r3, r6
 800534c:	9309      	str	r3, [sp, #36]	@ 0x24
 800534e:	e76a      	b.n	8005226 <_svfiprintf_r+0x52>
 8005350:	fb0c 3202 	mla	r2, ip, r2, r3
 8005354:	460c      	mov	r4, r1
 8005356:	2001      	movs	r0, #1
 8005358:	e7a8      	b.n	80052ac <_svfiprintf_r+0xd8>
 800535a:	2300      	movs	r3, #0
 800535c:	3401      	adds	r4, #1
 800535e:	9305      	str	r3, [sp, #20]
 8005360:	4619      	mov	r1, r3
 8005362:	f04f 0c0a 	mov.w	ip, #10
 8005366:	4620      	mov	r0, r4
 8005368:	f810 2b01 	ldrb.w	r2, [r0], #1
 800536c:	3a30      	subs	r2, #48	@ 0x30
 800536e:	2a09      	cmp	r2, #9
 8005370:	d903      	bls.n	800537a <_svfiprintf_r+0x1a6>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0c6      	beq.n	8005304 <_svfiprintf_r+0x130>
 8005376:	9105      	str	r1, [sp, #20]
 8005378:	e7c4      	b.n	8005304 <_svfiprintf_r+0x130>
 800537a:	fb0c 2101 	mla	r1, ip, r1, r2
 800537e:	4604      	mov	r4, r0
 8005380:	2301      	movs	r3, #1
 8005382:	e7f0      	b.n	8005366 <_svfiprintf_r+0x192>
 8005384:	ab03      	add	r3, sp, #12
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	462a      	mov	r2, r5
 800538a:	4b0e      	ldr	r3, [pc, #56]	@ (80053c4 <_svfiprintf_r+0x1f0>)
 800538c:	a904      	add	r1, sp, #16
 800538e:	4638      	mov	r0, r7
 8005390:	f3af 8000 	nop.w
 8005394:	1c42      	adds	r2, r0, #1
 8005396:	4606      	mov	r6, r0
 8005398:	d1d6      	bne.n	8005348 <_svfiprintf_r+0x174>
 800539a:	89ab      	ldrh	r3, [r5, #12]
 800539c:	065b      	lsls	r3, r3, #25
 800539e:	f53f af2d 	bmi.w	80051fc <_svfiprintf_r+0x28>
 80053a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053a4:	e72c      	b.n	8005200 <_svfiprintf_r+0x2c>
 80053a6:	ab03      	add	r3, sp, #12
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	462a      	mov	r2, r5
 80053ac:	4b05      	ldr	r3, [pc, #20]	@ (80053c4 <_svfiprintf_r+0x1f0>)
 80053ae:	a904      	add	r1, sp, #16
 80053b0:	4638      	mov	r0, r7
 80053b2:	f000 f91b 	bl	80055ec <_printf_i>
 80053b6:	e7ed      	b.n	8005394 <_svfiprintf_r+0x1c0>
 80053b8:	08005a24 	.word	0x08005a24
 80053bc:	08005a2e 	.word	0x08005a2e
 80053c0:	00000000 	.word	0x00000000
 80053c4:	0800511d 	.word	0x0800511d
 80053c8:	08005a2a 	.word	0x08005a2a

080053cc <sbrk_aligned>:
 80053cc:	b570      	push	{r4, r5, r6, lr}
 80053ce:	4e0f      	ldr	r6, [pc, #60]	@ (800540c <sbrk_aligned+0x40>)
 80053d0:	460c      	mov	r4, r1
 80053d2:	6831      	ldr	r1, [r6, #0]
 80053d4:	4605      	mov	r5, r0
 80053d6:	b911      	cbnz	r1, 80053de <sbrk_aligned+0x12>
 80053d8:	f000 fa7c 	bl	80058d4 <_sbrk_r>
 80053dc:	6030      	str	r0, [r6, #0]
 80053de:	4621      	mov	r1, r4
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 fa77 	bl	80058d4 <_sbrk_r>
 80053e6:	1c43      	adds	r3, r0, #1
 80053e8:	d103      	bne.n	80053f2 <sbrk_aligned+0x26>
 80053ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80053ee:	4620      	mov	r0, r4
 80053f0:	bd70      	pop	{r4, r5, r6, pc}
 80053f2:	1cc4      	adds	r4, r0, #3
 80053f4:	f024 0403 	bic.w	r4, r4, #3
 80053f8:	42a0      	cmp	r0, r4
 80053fa:	d0f8      	beq.n	80053ee <sbrk_aligned+0x22>
 80053fc:	1a21      	subs	r1, r4, r0
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fa68 	bl	80058d4 <_sbrk_r>
 8005404:	3001      	adds	r0, #1
 8005406:	d1f2      	bne.n	80053ee <sbrk_aligned+0x22>
 8005408:	e7ef      	b.n	80053ea <sbrk_aligned+0x1e>
 800540a:	bf00      	nop
 800540c:	200006f0 	.word	0x200006f0

08005410 <_malloc_r>:
 8005410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005414:	1ccd      	adds	r5, r1, #3
 8005416:	f025 0503 	bic.w	r5, r5, #3
 800541a:	3508      	adds	r5, #8
 800541c:	2d0c      	cmp	r5, #12
 800541e:	bf38      	it	cc
 8005420:	250c      	movcc	r5, #12
 8005422:	2d00      	cmp	r5, #0
 8005424:	4606      	mov	r6, r0
 8005426:	db01      	blt.n	800542c <_malloc_r+0x1c>
 8005428:	42a9      	cmp	r1, r5
 800542a:	d904      	bls.n	8005436 <_malloc_r+0x26>
 800542c:	230c      	movs	r3, #12
 800542e:	6033      	str	r3, [r6, #0]
 8005430:	2000      	movs	r0, #0
 8005432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005436:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800550c <_malloc_r+0xfc>
 800543a:	f000 f9f7 	bl	800582c <__malloc_lock>
 800543e:	f8d8 3000 	ldr.w	r3, [r8]
 8005442:	461c      	mov	r4, r3
 8005444:	bb44      	cbnz	r4, 8005498 <_malloc_r+0x88>
 8005446:	4629      	mov	r1, r5
 8005448:	4630      	mov	r0, r6
 800544a:	f7ff ffbf 	bl	80053cc <sbrk_aligned>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	4604      	mov	r4, r0
 8005452:	d158      	bne.n	8005506 <_malloc_r+0xf6>
 8005454:	f8d8 4000 	ldr.w	r4, [r8]
 8005458:	4627      	mov	r7, r4
 800545a:	2f00      	cmp	r7, #0
 800545c:	d143      	bne.n	80054e6 <_malloc_r+0xd6>
 800545e:	2c00      	cmp	r4, #0
 8005460:	d04b      	beq.n	80054fa <_malloc_r+0xea>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	4639      	mov	r1, r7
 8005466:	4630      	mov	r0, r6
 8005468:	eb04 0903 	add.w	r9, r4, r3
 800546c:	f000 fa32 	bl	80058d4 <_sbrk_r>
 8005470:	4581      	cmp	r9, r0
 8005472:	d142      	bne.n	80054fa <_malloc_r+0xea>
 8005474:	6821      	ldr	r1, [r4, #0]
 8005476:	1a6d      	subs	r5, r5, r1
 8005478:	4629      	mov	r1, r5
 800547a:	4630      	mov	r0, r6
 800547c:	f7ff ffa6 	bl	80053cc <sbrk_aligned>
 8005480:	3001      	adds	r0, #1
 8005482:	d03a      	beq.n	80054fa <_malloc_r+0xea>
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	442b      	add	r3, r5
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	f8d8 3000 	ldr.w	r3, [r8]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	bb62      	cbnz	r2, 80054ec <_malloc_r+0xdc>
 8005492:	f8c8 7000 	str.w	r7, [r8]
 8005496:	e00f      	b.n	80054b8 <_malloc_r+0xa8>
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	1b52      	subs	r2, r2, r5
 800549c:	d420      	bmi.n	80054e0 <_malloc_r+0xd0>
 800549e:	2a0b      	cmp	r2, #11
 80054a0:	d917      	bls.n	80054d2 <_malloc_r+0xc2>
 80054a2:	1961      	adds	r1, r4, r5
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	6025      	str	r5, [r4, #0]
 80054a8:	bf18      	it	ne
 80054aa:	6059      	strne	r1, [r3, #4]
 80054ac:	6863      	ldr	r3, [r4, #4]
 80054ae:	bf08      	it	eq
 80054b0:	f8c8 1000 	streq.w	r1, [r8]
 80054b4:	5162      	str	r2, [r4, r5]
 80054b6:	604b      	str	r3, [r1, #4]
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 f9bd 	bl	8005838 <__malloc_unlock>
 80054be:	f104 000b 	add.w	r0, r4, #11
 80054c2:	1d23      	adds	r3, r4, #4
 80054c4:	f020 0007 	bic.w	r0, r0, #7
 80054c8:	1ac2      	subs	r2, r0, r3
 80054ca:	bf1c      	itt	ne
 80054cc:	1a1b      	subne	r3, r3, r0
 80054ce:	50a3      	strne	r3, [r4, r2]
 80054d0:	e7af      	b.n	8005432 <_malloc_r+0x22>
 80054d2:	6862      	ldr	r2, [r4, #4]
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	bf0c      	ite	eq
 80054d8:	f8c8 2000 	streq.w	r2, [r8]
 80054dc:	605a      	strne	r2, [r3, #4]
 80054de:	e7eb      	b.n	80054b8 <_malloc_r+0xa8>
 80054e0:	4623      	mov	r3, r4
 80054e2:	6864      	ldr	r4, [r4, #4]
 80054e4:	e7ae      	b.n	8005444 <_malloc_r+0x34>
 80054e6:	463c      	mov	r4, r7
 80054e8:	687f      	ldr	r7, [r7, #4]
 80054ea:	e7b6      	b.n	800545a <_malloc_r+0x4a>
 80054ec:	461a      	mov	r2, r3
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	42a3      	cmp	r3, r4
 80054f2:	d1fb      	bne.n	80054ec <_malloc_r+0xdc>
 80054f4:	2300      	movs	r3, #0
 80054f6:	6053      	str	r3, [r2, #4]
 80054f8:	e7de      	b.n	80054b8 <_malloc_r+0xa8>
 80054fa:	230c      	movs	r3, #12
 80054fc:	6033      	str	r3, [r6, #0]
 80054fe:	4630      	mov	r0, r6
 8005500:	f000 f99a 	bl	8005838 <__malloc_unlock>
 8005504:	e794      	b.n	8005430 <_malloc_r+0x20>
 8005506:	6005      	str	r5, [r0, #0]
 8005508:	e7d6      	b.n	80054b8 <_malloc_r+0xa8>
 800550a:	bf00      	nop
 800550c:	200006f4 	.word	0x200006f4

08005510 <_printf_common>:
 8005510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	4616      	mov	r6, r2
 8005516:	4698      	mov	r8, r3
 8005518:	688a      	ldr	r2, [r1, #8]
 800551a:	690b      	ldr	r3, [r1, #16]
 800551c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005520:	4293      	cmp	r3, r2
 8005522:	bfb8      	it	lt
 8005524:	4613      	movlt	r3, r2
 8005526:	6033      	str	r3, [r6, #0]
 8005528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800552c:	4607      	mov	r7, r0
 800552e:	460c      	mov	r4, r1
 8005530:	b10a      	cbz	r2, 8005536 <_printf_common+0x26>
 8005532:	3301      	adds	r3, #1
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	0699      	lsls	r1, r3, #26
 800553a:	bf42      	ittt	mi
 800553c:	6833      	ldrmi	r3, [r6, #0]
 800553e:	3302      	addmi	r3, #2
 8005540:	6033      	strmi	r3, [r6, #0]
 8005542:	6825      	ldr	r5, [r4, #0]
 8005544:	f015 0506 	ands.w	r5, r5, #6
 8005548:	d106      	bne.n	8005558 <_printf_common+0x48>
 800554a:	f104 0a19 	add.w	sl, r4, #25
 800554e:	68e3      	ldr	r3, [r4, #12]
 8005550:	6832      	ldr	r2, [r6, #0]
 8005552:	1a9b      	subs	r3, r3, r2
 8005554:	42ab      	cmp	r3, r5
 8005556:	dc26      	bgt.n	80055a6 <_printf_common+0x96>
 8005558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800555c:	6822      	ldr	r2, [r4, #0]
 800555e:	3b00      	subs	r3, #0
 8005560:	bf18      	it	ne
 8005562:	2301      	movne	r3, #1
 8005564:	0692      	lsls	r2, r2, #26
 8005566:	d42b      	bmi.n	80055c0 <_printf_common+0xb0>
 8005568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800556c:	4641      	mov	r1, r8
 800556e:	4638      	mov	r0, r7
 8005570:	47c8      	blx	r9
 8005572:	3001      	adds	r0, #1
 8005574:	d01e      	beq.n	80055b4 <_printf_common+0xa4>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	6922      	ldr	r2, [r4, #16]
 800557a:	f003 0306 	and.w	r3, r3, #6
 800557e:	2b04      	cmp	r3, #4
 8005580:	bf02      	ittt	eq
 8005582:	68e5      	ldreq	r5, [r4, #12]
 8005584:	6833      	ldreq	r3, [r6, #0]
 8005586:	1aed      	subeq	r5, r5, r3
 8005588:	68a3      	ldr	r3, [r4, #8]
 800558a:	bf0c      	ite	eq
 800558c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005590:	2500      	movne	r5, #0
 8005592:	4293      	cmp	r3, r2
 8005594:	bfc4      	itt	gt
 8005596:	1a9b      	subgt	r3, r3, r2
 8005598:	18ed      	addgt	r5, r5, r3
 800559a:	2600      	movs	r6, #0
 800559c:	341a      	adds	r4, #26
 800559e:	42b5      	cmp	r5, r6
 80055a0:	d11a      	bne.n	80055d8 <_printf_common+0xc8>
 80055a2:	2000      	movs	r0, #0
 80055a4:	e008      	b.n	80055b8 <_printf_common+0xa8>
 80055a6:	2301      	movs	r3, #1
 80055a8:	4652      	mov	r2, sl
 80055aa:	4641      	mov	r1, r8
 80055ac:	4638      	mov	r0, r7
 80055ae:	47c8      	blx	r9
 80055b0:	3001      	adds	r0, #1
 80055b2:	d103      	bne.n	80055bc <_printf_common+0xac>
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055bc:	3501      	adds	r5, #1
 80055be:	e7c6      	b.n	800554e <_printf_common+0x3e>
 80055c0:	18e1      	adds	r1, r4, r3
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	2030      	movs	r0, #48	@ 0x30
 80055c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055ca:	4422      	add	r2, r4
 80055cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055d4:	3302      	adds	r3, #2
 80055d6:	e7c7      	b.n	8005568 <_printf_common+0x58>
 80055d8:	2301      	movs	r3, #1
 80055da:	4622      	mov	r2, r4
 80055dc:	4641      	mov	r1, r8
 80055de:	4638      	mov	r0, r7
 80055e0:	47c8      	blx	r9
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0e6      	beq.n	80055b4 <_printf_common+0xa4>
 80055e6:	3601      	adds	r6, #1
 80055e8:	e7d9      	b.n	800559e <_printf_common+0x8e>
	...

080055ec <_printf_i>:
 80055ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055f0:	7e0f      	ldrb	r7, [r1, #24]
 80055f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055f4:	2f78      	cmp	r7, #120	@ 0x78
 80055f6:	4691      	mov	r9, r2
 80055f8:	4680      	mov	r8, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	469a      	mov	sl, r3
 80055fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005602:	d807      	bhi.n	8005614 <_printf_i+0x28>
 8005604:	2f62      	cmp	r7, #98	@ 0x62
 8005606:	d80a      	bhi.n	800561e <_printf_i+0x32>
 8005608:	2f00      	cmp	r7, #0
 800560a:	f000 80d2 	beq.w	80057b2 <_printf_i+0x1c6>
 800560e:	2f58      	cmp	r7, #88	@ 0x58
 8005610:	f000 80b9 	beq.w	8005786 <_printf_i+0x19a>
 8005614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800561c:	e03a      	b.n	8005694 <_printf_i+0xa8>
 800561e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005622:	2b15      	cmp	r3, #21
 8005624:	d8f6      	bhi.n	8005614 <_printf_i+0x28>
 8005626:	a101      	add	r1, pc, #4	@ (adr r1, 800562c <_printf_i+0x40>)
 8005628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800562c:	08005685 	.word	0x08005685
 8005630:	08005699 	.word	0x08005699
 8005634:	08005615 	.word	0x08005615
 8005638:	08005615 	.word	0x08005615
 800563c:	08005615 	.word	0x08005615
 8005640:	08005615 	.word	0x08005615
 8005644:	08005699 	.word	0x08005699
 8005648:	08005615 	.word	0x08005615
 800564c:	08005615 	.word	0x08005615
 8005650:	08005615 	.word	0x08005615
 8005654:	08005615 	.word	0x08005615
 8005658:	08005799 	.word	0x08005799
 800565c:	080056c3 	.word	0x080056c3
 8005660:	08005753 	.word	0x08005753
 8005664:	08005615 	.word	0x08005615
 8005668:	08005615 	.word	0x08005615
 800566c:	080057bb 	.word	0x080057bb
 8005670:	08005615 	.word	0x08005615
 8005674:	080056c3 	.word	0x080056c3
 8005678:	08005615 	.word	0x08005615
 800567c:	08005615 	.word	0x08005615
 8005680:	0800575b 	.word	0x0800575b
 8005684:	6833      	ldr	r3, [r6, #0]
 8005686:	1d1a      	adds	r2, r3, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6032      	str	r2, [r6, #0]
 800568c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005694:	2301      	movs	r3, #1
 8005696:	e09d      	b.n	80057d4 <_printf_i+0x1e8>
 8005698:	6833      	ldr	r3, [r6, #0]
 800569a:	6820      	ldr	r0, [r4, #0]
 800569c:	1d19      	adds	r1, r3, #4
 800569e:	6031      	str	r1, [r6, #0]
 80056a0:	0606      	lsls	r6, r0, #24
 80056a2:	d501      	bpl.n	80056a8 <_printf_i+0xbc>
 80056a4:	681d      	ldr	r5, [r3, #0]
 80056a6:	e003      	b.n	80056b0 <_printf_i+0xc4>
 80056a8:	0645      	lsls	r5, r0, #25
 80056aa:	d5fb      	bpl.n	80056a4 <_printf_i+0xb8>
 80056ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056b0:	2d00      	cmp	r5, #0
 80056b2:	da03      	bge.n	80056bc <_printf_i+0xd0>
 80056b4:	232d      	movs	r3, #45	@ 0x2d
 80056b6:	426d      	negs	r5, r5
 80056b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056bc:	4859      	ldr	r0, [pc, #356]	@ (8005824 <_printf_i+0x238>)
 80056be:	230a      	movs	r3, #10
 80056c0:	e011      	b.n	80056e6 <_printf_i+0xfa>
 80056c2:	6821      	ldr	r1, [r4, #0]
 80056c4:	6833      	ldr	r3, [r6, #0]
 80056c6:	0608      	lsls	r0, r1, #24
 80056c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80056cc:	d402      	bmi.n	80056d4 <_printf_i+0xe8>
 80056ce:	0649      	lsls	r1, r1, #25
 80056d0:	bf48      	it	mi
 80056d2:	b2ad      	uxthmi	r5, r5
 80056d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80056d6:	4853      	ldr	r0, [pc, #332]	@ (8005824 <_printf_i+0x238>)
 80056d8:	6033      	str	r3, [r6, #0]
 80056da:	bf14      	ite	ne
 80056dc:	230a      	movne	r3, #10
 80056de:	2308      	moveq	r3, #8
 80056e0:	2100      	movs	r1, #0
 80056e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056e6:	6866      	ldr	r6, [r4, #4]
 80056e8:	60a6      	str	r6, [r4, #8]
 80056ea:	2e00      	cmp	r6, #0
 80056ec:	bfa2      	ittt	ge
 80056ee:	6821      	ldrge	r1, [r4, #0]
 80056f0:	f021 0104 	bicge.w	r1, r1, #4
 80056f4:	6021      	strge	r1, [r4, #0]
 80056f6:	b90d      	cbnz	r5, 80056fc <_printf_i+0x110>
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	d04b      	beq.n	8005794 <_printf_i+0x1a8>
 80056fc:	4616      	mov	r6, r2
 80056fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005702:	fb03 5711 	mls	r7, r3, r1, r5
 8005706:	5dc7      	ldrb	r7, [r0, r7]
 8005708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800570c:	462f      	mov	r7, r5
 800570e:	42bb      	cmp	r3, r7
 8005710:	460d      	mov	r5, r1
 8005712:	d9f4      	bls.n	80056fe <_printf_i+0x112>
 8005714:	2b08      	cmp	r3, #8
 8005716:	d10b      	bne.n	8005730 <_printf_i+0x144>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	07df      	lsls	r7, r3, #31
 800571c:	d508      	bpl.n	8005730 <_printf_i+0x144>
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	6861      	ldr	r1, [r4, #4]
 8005722:	4299      	cmp	r1, r3
 8005724:	bfde      	ittt	le
 8005726:	2330      	movle	r3, #48	@ 0x30
 8005728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800572c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005730:	1b92      	subs	r2, r2, r6
 8005732:	6122      	str	r2, [r4, #16]
 8005734:	f8cd a000 	str.w	sl, [sp]
 8005738:	464b      	mov	r3, r9
 800573a:	aa03      	add	r2, sp, #12
 800573c:	4621      	mov	r1, r4
 800573e:	4640      	mov	r0, r8
 8005740:	f7ff fee6 	bl	8005510 <_printf_common>
 8005744:	3001      	adds	r0, #1
 8005746:	d14a      	bne.n	80057de <_printf_i+0x1f2>
 8005748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800574c:	b004      	add	sp, #16
 800574e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	f043 0320 	orr.w	r3, r3, #32
 8005758:	6023      	str	r3, [r4, #0]
 800575a:	4833      	ldr	r0, [pc, #204]	@ (8005828 <_printf_i+0x23c>)
 800575c:	2778      	movs	r7, #120	@ 0x78
 800575e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	6831      	ldr	r1, [r6, #0]
 8005766:	061f      	lsls	r7, r3, #24
 8005768:	f851 5b04 	ldr.w	r5, [r1], #4
 800576c:	d402      	bmi.n	8005774 <_printf_i+0x188>
 800576e:	065f      	lsls	r7, r3, #25
 8005770:	bf48      	it	mi
 8005772:	b2ad      	uxthmi	r5, r5
 8005774:	6031      	str	r1, [r6, #0]
 8005776:	07d9      	lsls	r1, r3, #31
 8005778:	bf44      	itt	mi
 800577a:	f043 0320 	orrmi.w	r3, r3, #32
 800577e:	6023      	strmi	r3, [r4, #0]
 8005780:	b11d      	cbz	r5, 800578a <_printf_i+0x19e>
 8005782:	2310      	movs	r3, #16
 8005784:	e7ac      	b.n	80056e0 <_printf_i+0xf4>
 8005786:	4827      	ldr	r0, [pc, #156]	@ (8005824 <_printf_i+0x238>)
 8005788:	e7e9      	b.n	800575e <_printf_i+0x172>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	f023 0320 	bic.w	r3, r3, #32
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	e7f6      	b.n	8005782 <_printf_i+0x196>
 8005794:	4616      	mov	r6, r2
 8005796:	e7bd      	b.n	8005714 <_printf_i+0x128>
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	6825      	ldr	r5, [r4, #0]
 800579c:	6961      	ldr	r1, [r4, #20]
 800579e:	1d18      	adds	r0, r3, #4
 80057a0:	6030      	str	r0, [r6, #0]
 80057a2:	062e      	lsls	r6, r5, #24
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	d501      	bpl.n	80057ac <_printf_i+0x1c0>
 80057a8:	6019      	str	r1, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <_printf_i+0x1c6>
 80057ac:	0668      	lsls	r0, r5, #25
 80057ae:	d5fb      	bpl.n	80057a8 <_printf_i+0x1bc>
 80057b0:	8019      	strh	r1, [r3, #0]
 80057b2:	2300      	movs	r3, #0
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	4616      	mov	r6, r2
 80057b8:	e7bc      	b.n	8005734 <_printf_i+0x148>
 80057ba:	6833      	ldr	r3, [r6, #0]
 80057bc:	1d1a      	adds	r2, r3, #4
 80057be:	6032      	str	r2, [r6, #0]
 80057c0:	681e      	ldr	r6, [r3, #0]
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	2100      	movs	r1, #0
 80057c6:	4630      	mov	r0, r6
 80057c8:	f7fa fd02 	bl	80001d0 <memchr>
 80057cc:	b108      	cbz	r0, 80057d2 <_printf_i+0x1e6>
 80057ce:	1b80      	subs	r0, r0, r6
 80057d0:	6060      	str	r0, [r4, #4]
 80057d2:	6863      	ldr	r3, [r4, #4]
 80057d4:	6123      	str	r3, [r4, #16]
 80057d6:	2300      	movs	r3, #0
 80057d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057dc:	e7aa      	b.n	8005734 <_printf_i+0x148>
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	4632      	mov	r2, r6
 80057e2:	4649      	mov	r1, r9
 80057e4:	4640      	mov	r0, r8
 80057e6:	47d0      	blx	sl
 80057e8:	3001      	adds	r0, #1
 80057ea:	d0ad      	beq.n	8005748 <_printf_i+0x15c>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	079b      	lsls	r3, r3, #30
 80057f0:	d413      	bmi.n	800581a <_printf_i+0x22e>
 80057f2:	68e0      	ldr	r0, [r4, #12]
 80057f4:	9b03      	ldr	r3, [sp, #12]
 80057f6:	4298      	cmp	r0, r3
 80057f8:	bfb8      	it	lt
 80057fa:	4618      	movlt	r0, r3
 80057fc:	e7a6      	b.n	800574c <_printf_i+0x160>
 80057fe:	2301      	movs	r3, #1
 8005800:	4632      	mov	r2, r6
 8005802:	4649      	mov	r1, r9
 8005804:	4640      	mov	r0, r8
 8005806:	47d0      	blx	sl
 8005808:	3001      	adds	r0, #1
 800580a:	d09d      	beq.n	8005748 <_printf_i+0x15c>
 800580c:	3501      	adds	r5, #1
 800580e:	68e3      	ldr	r3, [r4, #12]
 8005810:	9903      	ldr	r1, [sp, #12]
 8005812:	1a5b      	subs	r3, r3, r1
 8005814:	42ab      	cmp	r3, r5
 8005816:	dcf2      	bgt.n	80057fe <_printf_i+0x212>
 8005818:	e7eb      	b.n	80057f2 <_printf_i+0x206>
 800581a:	2500      	movs	r5, #0
 800581c:	f104 0619 	add.w	r6, r4, #25
 8005820:	e7f5      	b.n	800580e <_printf_i+0x222>
 8005822:	bf00      	nop
 8005824:	08005a35 	.word	0x08005a35
 8005828:	08005a46 	.word	0x08005a46

0800582c <__malloc_lock>:
 800582c:	4801      	ldr	r0, [pc, #4]	@ (8005834 <__malloc_lock+0x8>)
 800582e:	f7ff bc73 	b.w	8005118 <__retarget_lock_acquire_recursive>
 8005832:	bf00      	nop
 8005834:	200006ec 	.word	0x200006ec

08005838 <__malloc_unlock>:
 8005838:	4801      	ldr	r0, [pc, #4]	@ (8005840 <__malloc_unlock+0x8>)
 800583a:	f7ff bc6e 	b.w	800511a <__retarget_lock_release_recursive>
 800583e:	bf00      	nop
 8005840:	200006ec 	.word	0x200006ec

08005844 <_realloc_r>:
 8005844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005848:	4680      	mov	r8, r0
 800584a:	4615      	mov	r5, r2
 800584c:	460c      	mov	r4, r1
 800584e:	b921      	cbnz	r1, 800585a <_realloc_r+0x16>
 8005850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005854:	4611      	mov	r1, r2
 8005856:	f7ff bddb 	b.w	8005410 <_malloc_r>
 800585a:	b92a      	cbnz	r2, 8005868 <_realloc_r+0x24>
 800585c:	f000 f858 	bl	8005910 <_free_r>
 8005860:	2400      	movs	r4, #0
 8005862:	4620      	mov	r0, r4
 8005864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005868:	f000 f89c 	bl	80059a4 <_malloc_usable_size_r>
 800586c:	4285      	cmp	r5, r0
 800586e:	4606      	mov	r6, r0
 8005870:	d802      	bhi.n	8005878 <_realloc_r+0x34>
 8005872:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005876:	d8f4      	bhi.n	8005862 <_realloc_r+0x1e>
 8005878:	4629      	mov	r1, r5
 800587a:	4640      	mov	r0, r8
 800587c:	f7ff fdc8 	bl	8005410 <_malloc_r>
 8005880:	4607      	mov	r7, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	d0ec      	beq.n	8005860 <_realloc_r+0x1c>
 8005886:	42b5      	cmp	r5, r6
 8005888:	462a      	mov	r2, r5
 800588a:	4621      	mov	r1, r4
 800588c:	bf28      	it	cs
 800588e:	4632      	movcs	r2, r6
 8005890:	f000 f830 	bl	80058f4 <memcpy>
 8005894:	4621      	mov	r1, r4
 8005896:	4640      	mov	r0, r8
 8005898:	f000 f83a 	bl	8005910 <_free_r>
 800589c:	463c      	mov	r4, r7
 800589e:	e7e0      	b.n	8005862 <_realloc_r+0x1e>

080058a0 <memmove>:
 80058a0:	4288      	cmp	r0, r1
 80058a2:	b510      	push	{r4, lr}
 80058a4:	eb01 0402 	add.w	r4, r1, r2
 80058a8:	d902      	bls.n	80058b0 <memmove+0x10>
 80058aa:	4284      	cmp	r4, r0
 80058ac:	4623      	mov	r3, r4
 80058ae:	d807      	bhi.n	80058c0 <memmove+0x20>
 80058b0:	1e43      	subs	r3, r0, #1
 80058b2:	42a1      	cmp	r1, r4
 80058b4:	d008      	beq.n	80058c8 <memmove+0x28>
 80058b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058be:	e7f8      	b.n	80058b2 <memmove+0x12>
 80058c0:	4402      	add	r2, r0
 80058c2:	4601      	mov	r1, r0
 80058c4:	428a      	cmp	r2, r1
 80058c6:	d100      	bne.n	80058ca <memmove+0x2a>
 80058c8:	bd10      	pop	{r4, pc}
 80058ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058d2:	e7f7      	b.n	80058c4 <memmove+0x24>

080058d4 <_sbrk_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4d06      	ldr	r5, [pc, #24]	@ (80058f0 <_sbrk_r+0x1c>)
 80058d8:	2300      	movs	r3, #0
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fb fa5c 	bl	8000d9c <_sbrk>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_sbrk_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_sbrk_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	200006f8 	.word	0x200006f8

080058f4 <memcpy>:
 80058f4:	440a      	add	r2, r1
 80058f6:	4291      	cmp	r1, r2
 80058f8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80058fc:	d100      	bne.n	8005900 <memcpy+0xc>
 80058fe:	4770      	bx	lr
 8005900:	b510      	push	{r4, lr}
 8005902:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005906:	f803 4f01 	strb.w	r4, [r3, #1]!
 800590a:	4291      	cmp	r1, r2
 800590c:	d1f9      	bne.n	8005902 <memcpy+0xe>
 800590e:	bd10      	pop	{r4, pc}

08005910 <_free_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4605      	mov	r5, r0
 8005914:	2900      	cmp	r1, #0
 8005916:	d041      	beq.n	800599c <_free_r+0x8c>
 8005918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800591c:	1f0c      	subs	r4, r1, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfb8      	it	lt
 8005922:	18e4      	addlt	r4, r4, r3
 8005924:	f7ff ff82 	bl	800582c <__malloc_lock>
 8005928:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <_free_r+0x90>)
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	b933      	cbnz	r3, 800593c <_free_r+0x2c>
 800592e:	6063      	str	r3, [r4, #4]
 8005930:	6014      	str	r4, [r2, #0]
 8005932:	4628      	mov	r0, r5
 8005934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005938:	f7ff bf7e 	b.w	8005838 <__malloc_unlock>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d908      	bls.n	8005952 <_free_r+0x42>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	1821      	adds	r1, r4, r0
 8005944:	428b      	cmp	r3, r1
 8005946:	bf01      	itttt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	1809      	addeq	r1, r1, r0
 800594e:	6021      	streq	r1, [r4, #0]
 8005950:	e7ed      	b.n	800592e <_free_r+0x1e>
 8005952:	461a      	mov	r2, r3
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b10b      	cbz	r3, 800595c <_free_r+0x4c>
 8005958:	42a3      	cmp	r3, r4
 800595a:	d9fa      	bls.n	8005952 <_free_r+0x42>
 800595c:	6811      	ldr	r1, [r2, #0]
 800595e:	1850      	adds	r0, r2, r1
 8005960:	42a0      	cmp	r0, r4
 8005962:	d10b      	bne.n	800597c <_free_r+0x6c>
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	4401      	add	r1, r0
 8005968:	1850      	adds	r0, r2, r1
 800596a:	4283      	cmp	r3, r0
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	d1e0      	bne.n	8005932 <_free_r+0x22>
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	6053      	str	r3, [r2, #4]
 8005976:	4408      	add	r0, r1
 8005978:	6010      	str	r0, [r2, #0]
 800597a:	e7da      	b.n	8005932 <_free_r+0x22>
 800597c:	d902      	bls.n	8005984 <_free_r+0x74>
 800597e:	230c      	movs	r3, #12
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	e7d6      	b.n	8005932 <_free_r+0x22>
 8005984:	6820      	ldr	r0, [r4, #0]
 8005986:	1821      	adds	r1, r4, r0
 8005988:	428b      	cmp	r3, r1
 800598a:	bf04      	itt	eq
 800598c:	6819      	ldreq	r1, [r3, #0]
 800598e:	685b      	ldreq	r3, [r3, #4]
 8005990:	6063      	str	r3, [r4, #4]
 8005992:	bf04      	itt	eq
 8005994:	1809      	addeq	r1, r1, r0
 8005996:	6021      	streq	r1, [r4, #0]
 8005998:	6054      	str	r4, [r2, #4]
 800599a:	e7ca      	b.n	8005932 <_free_r+0x22>
 800599c:	bd38      	pop	{r3, r4, r5, pc}
 800599e:	bf00      	nop
 80059a0:	200006f4 	.word	0x200006f4

080059a4 <_malloc_usable_size_r>:
 80059a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a8:	1f18      	subs	r0, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	bfbc      	itt	lt
 80059ae:	580b      	ldrlt	r3, [r1, r0]
 80059b0:	18c0      	addlt	r0, r0, r3
 80059b2:	4770      	bx	lr

080059b4 <_init>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr

080059c0 <_fini>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr


Laser_Projector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f9c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004124  08004124  00005124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800415c  0800415c  00006030  2**0
                  CONTENTS
  4 .ARM          00000000  0800415c  0800415c  00006030  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800415c  0800415c  00006030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0000515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004160  08004160  00005160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  08004164  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006030  2**0
                  CONTENTS
 10 .bss          00000480  20000030  20000030  00006030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004b0  200004b0  00006030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015cda  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a0  00000000  00000000  0001bd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  0001e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efc  00000000  00000000  0001f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4bd  00000000  00000000  000206d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017bc8  00000000  00000000  0003eb91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9f85  00000000  00000000  00056759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001106de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005208  00000000  00000000  00110724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011592c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800410c 	.word	0x0800410c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	0800410c 	.word	0x0800410c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fc2b 	bl	8000a28 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t MSG[20] = {'\0'};
 80001d2:	2300      	movs	r3, #0
 80001d4:	603b      	str	r3, [r7, #0]
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
 80001dc:	605a      	str	r2, [r3, #4]
 80001de:	609a      	str	r2, [r3, #8]
 80001e0:	60da      	str	r2, [r3, #12]
  uint16_t CounterTicks = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	82fb      	strh	r3, [r7, #22]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f813 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f995 	bl	8000518 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001ee:	f000 f871 	bl	80002d4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001f2:	f000 f8af 	bl	8000354 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001f6:	f000 f96d 	bl	80004d4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80001fa:	f000 f8e9 	bl	80003d0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80001fe:	f000 f939 	bl	8000474 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000202:	4802      	ldr	r0, [pc, #8]	@ (800020c <main+0x44>)
 8000204:	f002 fe24 	bl	8002e50 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000208:	bf00      	nop
 800020a:	e7fd      	b.n	8000208 <main+0x40>
 800020c:	20000104 	.word	0x20000104

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b09e      	sub	sp, #120	@ 0x78
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800021a:	2228      	movs	r2, #40	@ 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 ff48 	bl	80040b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	463b      	mov	r3, r7
 8000236:	223c      	movs	r2, #60	@ 0x3c
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f003 ff3a 	bl	80040b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000240:	2303      	movs	r3, #3
 8000242:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000244:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000248:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800025e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000260:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000264:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000266:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f8e0 	bl	8001430 <HAL_RCC_OscConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000276:	f000 f9df 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027a:	230f      	movs	r3, #15
 800027c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027e:	2302      	movs	r3, #2
 8000280:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000286:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000290:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f002 f908 	bl	80024ac <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a2:	f000 f9c9 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80002a6:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <SystemClock_Config+0xc0>)
 80002a8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002b2:	2300      	movs	r3, #0
 80002b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b6:	463b      	mov	r3, r7
 80002b8:	4618      	mov	r0, r3
 80002ba:	f002 fb17 	bl	80028ec <HAL_RCCEx_PeriphCLKConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002c4:	f000 f9b8 	bl	8000638 <Error_Handler>
  }
}
 80002c8:	bf00      	nop
 80002ca:	3778      	adds	r7, #120	@ 0x78
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	00020021 	.word	0x00020021

080002d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <MX_I2C1_Init+0x74>)
 80002da:	4a1c      	ldr	r2, [pc, #112]	@ (800034c <MX_I2C1_Init+0x78>)
 80002dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002de:	4b1a      	ldr	r3, [pc, #104]	@ (8000348 <MX_I2C1_Init+0x74>)
 80002e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000350 <MX_I2C1_Init+0x7c>)
 80002e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e4:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ea:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <MX_I2C1_Init+0x74>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002f6:	4b14      	ldr	r3, [pc, #80]	@ (8000348 <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002fc:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000302:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <MX_I2C1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000308:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <MX_I2C1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800030e:	480e      	ldr	r0, [pc, #56]	@ (8000348 <MX_I2C1_Init+0x74>)
 8000310:	f000 fe94 	bl	800103c <HAL_I2C_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031a:	f000 f98d 	bl	8000638 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800031e:	2100      	movs	r1, #0
 8000320:	4809      	ldr	r0, [pc, #36]	@ (8000348 <MX_I2C1_Init+0x74>)
 8000322:	f000 ff26 	bl	8001172 <HAL_I2CEx_ConfigAnalogFilter>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800032c:	f000 f984 	bl	8000638 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000330:	2100      	movs	r1, #0
 8000332:	4805      	ldr	r0, [pc, #20]	@ (8000348 <MX_I2C1_Init+0x74>)
 8000334:	f000 ff68 	bl	8001208 <HAL_I2CEx_ConfigDigitalFilter>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800033e:	f000 f97b 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	2000004c 	.word	0x2000004c
 800034c:	40005400 	.word	0x40005400
 8000350:	2000090e 	.word	0x2000090e

08000354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000358:	4b1b      	ldr	r3, [pc, #108]	@ (80003c8 <MX_SPI1_Init+0x74>)
 800035a:	4a1c      	ldr	r2, [pc, #112]	@ (80003cc <MX_SPI1_Init+0x78>)
 800035c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800035e:	4b1a      	ldr	r3, [pc, #104]	@ (80003c8 <MX_SPI1_Init+0x74>)
 8000360:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000366:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <MX_SPI1_Init+0x74>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800036c:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <MX_SPI1_Init+0x74>)
 800036e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000372:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_SPI1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800037a:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <MX_SPI1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_SPI1_Init+0x74>)
 8000382:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000386:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_SPI1_Init+0x74>)
 800038a:	2208      	movs	r2, #8
 800038c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_SPI1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_SPI1_Init+0x74>)
 8000396:	2200      	movs	r2, #0
 8000398:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_SPI1_Init+0x74>)
 80003a2:	2207      	movs	r2, #7
 80003a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_SPI1_Init+0x74>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_SPI1_Init+0x74>)
 80003ae:	2208      	movs	r2, #8
 80003b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003b2:	4805      	ldr	r0, [pc, #20]	@ (80003c8 <MX_SPI1_Init+0x74>)
 80003b4:	f002 fc4a 	bl	8002c4c <HAL_SPI_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003be:	f000 f93b 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	200000a0 	.word	0x200000a0
 80003cc:	40013000 	.word	0x40013000

080003d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ee:	4b20      	ldr	r3, [pc, #128]	@ (8000470 <MX_TIM2_Init+0xa0>)
 80003f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000470 <MX_TIM2_Init+0xa0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000470 <MX_TIM2_Init+0xa0>)
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8000402:	4b1b      	ldr	r3, [pc, #108]	@ (8000470 <MX_TIM2_Init+0xa0>)
 8000404:	2214      	movs	r2, #20
 8000406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <MX_TIM2_Init+0xa0>)
 800040a:	2200      	movs	r2, #0
 800040c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800040e:	4b18      	ldr	r3, [pc, #96]	@ (8000470 <MX_TIM2_Init+0xa0>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000414:	4816      	ldr	r0, [pc, #88]	@ (8000470 <MX_TIM2_Init+0xa0>)
 8000416:	f002 fcc4 	bl	8002da2 <HAL_TIM_Base_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000420:	f000 f90a 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000424:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000428:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 15;
 8000432:	230f      	movs	r3, #15
 8000434:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <MX_TIM2_Init+0xa0>)
 800043e:	f002 fe73 	bl	8003128 <HAL_TIM_ConfigClockSource>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000448:	f000 f8f6 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800044c:	2300      	movs	r3, #0
 800044e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_TIM2_Init+0xa0>)
 800045a:	f003 f88d 	bl	8003578 <HAL_TIMEx_MasterConfigSynchronization>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000464:	f000 f8e8 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	3720      	adds	r7, #32
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000104 	.word	0x20000104

08000474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000478:	4b14      	ldr	r3, [pc, #80]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 800047a:	4a15      	ldr	r2, [pc, #84]	@ (80004d0 <MX_USART1_UART_Init+0x5c>)
 800047c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800047e:	4b13      	ldr	r3, [pc, #76]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 8000480:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000486:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000498:	4b0c      	ldr	r3, [pc, #48]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 800049a:	220c      	movs	r2, #12
 800049c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	@ (80004cc <MX_USART1_UART_Init+0x58>)
 80004b8:	f003 f8fc 	bl	80036b4 <HAL_UART_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80004c2:	f000 f8b9 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000150 	.word	0x20000150
 80004d0:	40013800 	.word	0x40013800

080004d4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <MX_USB_PCD_Init+0x3c>)
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <MX_USB_PCD_Init+0x40>)
 80004dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <MX_USB_PCD_Init+0x3c>)
 80004e0:	2208      	movs	r2, #8
 80004e2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <MX_USB_PCD_Init+0x3c>)
 80004e6:	2202      	movs	r2, #2
 80004e8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <MX_USB_PCD_Init+0x3c>)
 80004ec:	2202      	movs	r2, #2
 80004ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004f0:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <MX_USB_PCD_Init+0x3c>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004f6:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <MX_USB_PCD_Init+0x3c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004fc:	4804      	ldr	r0, [pc, #16]	@ (8000510 <MX_USB_PCD_Init+0x3c>)
 80004fe:	f000 fecf 	bl	80012a0 <HAL_PCD_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000508:	f000 f896 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200001d8 	.word	0x200001d8
 8000514:	40005c00 	.word	0x40005c00

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	@ 0x28
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800052e:	4b37      	ldr	r3, [pc, #220]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a36      	ldr	r2, [pc, #216]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b34      	ldr	r3, [pc, #208]	@ (800060c <MX_GPIO_Init+0xf4>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000542:	613b      	str	r3, [r7, #16]
 8000544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b31      	ldr	r3, [pc, #196]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a30      	ldr	r2, [pc, #192]	@ (800060c <MX_GPIO_Init+0xf4>)
 800054c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b2e      	ldr	r3, [pc, #184]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800055e:	4b2b      	ldr	r3, [pc, #172]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a2a      	ldr	r2, [pc, #168]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000564:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b28      	ldr	r3, [pc, #160]	@ (800060c <MX_GPIO_Init+0xf4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b25      	ldr	r3, [pc, #148]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a24      	ldr	r2, [pc, #144]	@ (800060c <MX_GPIO_Init+0xf4>)
 800057c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000580:	6153      	str	r3, [r2, #20]
 8000582:	4b22      	ldr	r3, [pc, #136]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	4a1e      	ldr	r2, [pc, #120]	@ (800060c <MX_GPIO_Init+0xf4>)
 8000594:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000598:	6153      	str	r3, [r2, #20]
 800059a:	4b1c      	ldr	r3, [pc, #112]	@ (800060c <MX_GPIO_Init+0xf4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80005a2:	603b      	str	r3, [r7, #0]
 80005a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80005ac:	4818      	ldr	r0, [pc, #96]	@ (8000610 <MX_GPIO_Init+0xf8>)
 80005ae:	f000 fd2d 	bl	800100c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80005b2:	2337      	movs	r3, #55	@ 0x37
 80005b4:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005b6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4812      	ldr	r0, [pc, #72]	@ (8000610 <MX_GPIO_Init+0xf8>)
 80005c8:	f000 fba6 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005cc:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80005d0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	480a      	ldr	r0, [pc, #40]	@ (8000610 <MX_GPIO_Init+0xf8>)
 80005e6:	f000 fb97 	bl	8000d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f000 fb8a 	bl	8000d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	@ 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000
 8000610:	48001000 	.word	0x48001000

08000614 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, END_MSG, sizeof(END_MSG), 100);
 800061c:	2364      	movs	r3, #100	@ 0x64
 800061e:	2223      	movs	r2, #35	@ 0x23
 8000620:	4903      	ldr	r1, [pc, #12]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000622:	4804      	ldr	r0, [pc, #16]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000624:	f003 f894 	bl	8003750 <HAL_UART_Transmit>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000000 	.word	0x20000000
 8000634:	20000150 	.word	0x20000150

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <Error_Handler+0x8>

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a0e      	ldr	r2, [pc, #56]	@ (8000688 <HAL_MspInit+0x44>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <HAL_MspInit+0x44>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <HAL_MspInit+0x44>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a08      	ldr	r2, [pc, #32]	@ (8000688 <HAL_MspInit+0x44>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <HAL_MspInit+0x44>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800067a:	2007      	movs	r0, #7
 800067c:	f000 fb0a 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000

0800068c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a17      	ldr	r2, [pc, #92]	@ (8000708 <HAL_I2C_MspInit+0x7c>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d127      	bne.n	80006fe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b17      	ldr	r3, [pc, #92]	@ (800070c <HAL_I2C_MspInit+0x80>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a16      	ldr	r2, [pc, #88]	@ (800070c <HAL_I2C_MspInit+0x80>)
 80006b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b14      	ldr	r3, [pc, #80]	@ (800070c <HAL_I2C_MspInit+0x80>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80006c6:	23c0      	movs	r3, #192	@ 0xc0
 80006c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ca:	2312      	movs	r3, #18
 80006cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d2:	2303      	movs	r3, #3
 80006d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006d6:	2304      	movs	r3, #4
 80006d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	480b      	ldr	r0, [pc, #44]	@ (8000710 <HAL_I2C_MspInit+0x84>)
 80006e2:	f000 fb19 	bl	8000d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006e6:	4b09      	ldr	r3, [pc, #36]	@ (800070c <HAL_I2C_MspInit+0x80>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a08      	ldr	r2, [pc, #32]	@ (800070c <HAL_I2C_MspInit+0x80>)
 80006ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <HAL_I2C_MspInit+0x80>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80006fe:	bf00      	nop
 8000700:	3728      	adds	r7, #40	@ 0x28
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40005400 	.word	0x40005400
 800070c:	40021000 	.word	0x40021000
 8000710:	48000400 	.word	0x48000400

08000714 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <HAL_SPI_MspInit+0x7c>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d128      	bne.n	8000788 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <HAL_SPI_MspInit+0x80>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <HAL_SPI_MspInit+0x80>)
 800073c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <HAL_SPI_MspInit+0x80>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <HAL_SPI_MspInit+0x80>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <HAL_SPI_MspInit+0x80>)
 8000754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <HAL_SPI_MspInit+0x80>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000766:	23e0      	movs	r3, #224	@ 0xe0
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000776:	2305      	movs	r3, #5
 8000778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000784:	f000 fac8 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000788:	bf00      	nop
 800078a:	3728      	adds	r7, #40	@ 0x28
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40013000 	.word	0x40013000
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007b8:	d131      	bne.n	800081e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000828 <HAL_TIM_Base_MspInit+0x90>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	4a1a      	ldr	r2, [pc, #104]	@ (8000828 <HAL_TIM_Base_MspInit+0x90>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	61d3      	str	r3, [r2, #28]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <HAL_TIM_Base_MspInit+0x90>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_TIM_Base_MspInit+0x90>)
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	4a14      	ldr	r2, [pc, #80]	@ (8000828 <HAL_TIM_Base_MspInit+0x90>)
 80007d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007dc:	6153      	str	r3, [r2, #20]
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_TIM_Base_MspInit+0x90>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80007ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007fc:	2301      	movs	r3, #1
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f000 fa85 	bl	8000d18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	201c      	movs	r0, #28
 8000814:	f000 fa49 	bl	8000caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000818:	201c      	movs	r0, #28
 800081a:	f000 fa62 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_UART_MspInit+0x7c>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d127      	bne.n	800089e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <HAL_UART_MspInit+0x80>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a16      	ldr	r2, [pc, #88]	@ (80008ac <HAL_UART_MspInit+0x80>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <HAL_UART_MspInit+0x80>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <HAL_UART_MspInit+0x80>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a10      	ldr	r2, [pc, #64]	@ (80008ac <HAL_UART_MspInit+0x80>)
 800086c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <HAL_UART_MspInit+0x80>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800087e:	2330      	movs	r3, #48	@ 0x30
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800088e:	2307      	movs	r3, #7
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <HAL_UART_MspInit+0x84>)
 800089a:	f000 fa3d 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	48000800 	.word	0x48000800

080008b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a18      	ldr	r2, [pc, #96]	@ (8000934 <HAL_PCD_MspInit+0x80>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d129      	bne.n	800092a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <HAL_PCD_MspInit+0x84>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	4a17      	ldr	r2, [pc, #92]	@ (8000938 <HAL_PCD_MspInit+0x84>)
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e0:	6153      	str	r3, [r2, #20]
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_PCD_MspInit+0x84>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80008ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000900:	230e      	movs	r3, #14
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090e:	f000 fa03 	bl	8000d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_PCD_MspInit+0x84>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_PCD_MspInit+0x84>)
 8000918:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_PCD_MspInit+0x84>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	@ 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40005c00 	.word	0x40005c00
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f88f 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <TIM2_IRQHandler+0x10>)
 80009a2:	f002 fabf 	bl	8002f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000104 	.word	0x20000104

080009b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a0c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009d8:	f7ff ffea 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a02:	f003 fb5f 	bl	80040c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a06:	f7ff fbdf 	bl	80001c8 <main>

08000a0a <LoopForever>:

LoopForever:
    b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a0c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000a18:	08004164 	.word	0x08004164
  ldr r2, =_sbss
 8000a1c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000a20:	200004b0 	.word	0x200004b0

08000a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC1_2_IRQHandler>
	...

08000a28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_Init+0x28>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	@ (8000a50 <HAL_Init+0x28>)
 8000a32:	f043 0310 	orr.w	r3, r3, #16
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f92b 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff fdfe 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f943 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a90:	f000 f90b 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	@ (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000024 	.word	0x20000024
 8000aac:	2000002c 	.word	0x2000002c
 8000ab0:	20000028 	.word	0x20000028

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	2000002c 	.word	0x2000002c
 8000ad8:	200004ac 	.word	0x200004ac

08000adc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ae0:	4b03      	ldr	r3, [pc, #12]	@ (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	200004ac 	.word	0x200004ac

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <__NVIC_GetPriorityGrouping+0x18>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	0a1b      	lsrs	r3, r3, #8
 8000b46:	f003 0307 	and.w	r3, r3, #7
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	db0b      	blt.n	8000b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 021f 	and.w	r2, r3, #31
 8000b70:	4907      	ldr	r1, [pc, #28]	@ (8000b90 <__NVIC_EnableIRQ+0x38>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	095b      	lsrs	r3, r3, #5
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db0a      	blt.n	8000bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	490c      	ldr	r1, [pc, #48]	@ (8000be0 <__NVIC_SetPriority+0x4c>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	0112      	lsls	r2, r2, #4
 8000bb4:	b2d2      	uxtb	r2, r2
 8000bb6:	440b      	add	r3, r1
 8000bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bbc:	e00a      	b.n	8000bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4908      	ldr	r1, [pc, #32]	@ (8000be4 <__NVIC_SetPriority+0x50>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	f003 030f 	and.w	r3, r3, #15
 8000bca:	3b04      	subs	r3, #4
 8000bcc:	0112      	lsls	r2, r2, #4
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	440b      	add	r3, r1
 8000bd2:	761a      	strb	r2, [r3, #24]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000e100 	.word	0xe000e100
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b089      	sub	sp, #36	@ 0x24
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f1c3 0307 	rsb	r3, r3, #7
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	bf28      	it	cs
 8000c06:	2304      	movcs	r3, #4
 8000c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	2b06      	cmp	r3, #6
 8000c10:	d902      	bls.n	8000c18 <NVIC_EncodePriority+0x30>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3b03      	subs	r3, #3
 8000c16:	e000      	b.n	8000c1a <NVIC_EncodePriority+0x32>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	43da      	mvns	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	43d9      	mvns	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c40:	4313      	orrs	r3, r2
         );
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3724      	adds	r7, #36	@ 0x24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c74:	f7ff ff8e 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff29 	bl	8000af4 <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff3e 	bl	8000b3c <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff8e 	bl	8000be8 <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff31 	bl	8000b58 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e154      	b.n	8000fd2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8146 	beq.w	8000fcc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d005      	beq.n	8000d58 <HAL_GPIO_Init+0x40>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d017      	beq.n	8000df6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d123      	bne.n	8000e4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	08da      	lsrs	r2, r3, #3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	6939      	ldr	r1, [r7, #16]
 8000e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0203 	and.w	r2, r3, #3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 80a0 	beq.w	8000fcc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	4b58      	ldr	r3, [pc, #352]	@ (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a57      	ldr	r2, [pc, #348]	@ (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b55      	ldr	r3, [pc, #340]	@ (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea4:	4a53      	ldr	r2, [pc, #332]	@ (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ece:	d019      	beq.n	8000f04 <HAL_GPIO_Init+0x1ec>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a49      	ldr	r2, [pc, #292]	@ (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d013      	beq.n	8000f00 <HAL_GPIO_Init+0x1e8>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a48      	ldr	r2, [pc, #288]	@ (8000ffc <HAL_GPIO_Init+0x2e4>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d00d      	beq.n	8000efc <HAL_GPIO_Init+0x1e4>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a47      	ldr	r2, [pc, #284]	@ (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d007      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a46      	ldr	r2, [pc, #280]	@ (8001004 <HAL_GPIO_Init+0x2ec>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d101      	bne.n	8000ef4 <HAL_GPIO_Init+0x1dc>
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	e008      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x1ee>
 8000f04:	2300      	movs	r3, #0
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f16:	4937      	ldr	r1, [pc, #220]	@ (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f24:	4b38      	ldr	r3, [pc, #224]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f48:	4a2f      	ldr	r2, [pc, #188]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f72:	4a25      	ldr	r2, [pc, #148]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f78:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fc6:	4a10      	ldr	r2, [pc, #64]	@ (8001008 <HAL_GPIO_Init+0x2f0>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f aea3 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48000c00 	.word	0x48000c00
 8001004:	48001000 	.word	0x48001000
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001028:	e002      	b.n	8001030 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e08d      	b.n	800116a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d106      	bne.n	8001068 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fb12 	bl	800068c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2224      	movs	r2, #36	@ 0x24
 800106c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800108c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800109c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d107      	bne.n	80010b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	e006      	b.n	80010c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80010c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d108      	bne.n	80010de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	e007      	b.n	80010ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80010ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69d9      	ldr	r1, [r3, #28]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1a      	ldr	r2, [r3, #32]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2220      	movs	r2, #32
 8001156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b20      	cmp	r3, #32
 8001186:	d138      	bne.n	80011fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001192:	2302      	movs	r3, #2
 8001194:	e032      	b.n	80011fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2224      	movs	r2, #36	@ 0x24
 80011a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0201 	bic.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6819      	ldr	r1, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f042 0201 	orr.w	r2, r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2220      	movs	r2, #32
 80011ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e000      	b.n	80011fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011fa:	2302      	movs	r3, #2
  }
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b20      	cmp	r3, #32
 800121c:	d139      	bne.n	8001292 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001224:	2b01      	cmp	r3, #1
 8001226:	d101      	bne.n	800122c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001228:	2302      	movs	r3, #2
 800122a:	e033      	b.n	8001294 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2201      	movs	r2, #1
 8001230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2224      	movs	r2, #36	@ 0x24
 8001238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800125a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	4313      	orrs	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f042 0201 	orr.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001292:	2302      	movs	r3, #2
  }
}
 8001294:	4618      	mov	r0, r3
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e0b9      	b.n	8001426 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d106      	bne.n	80012cc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff faf4 	bl	80008b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2203      	movs	r2, #3
 80012d0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 feb2 	bl	8004042 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e03e      	b.n	8001362 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012e4:	7bfa      	ldrb	r2, [r7, #15]
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	440b      	add	r3, r1
 80012f2:	3311      	adds	r3, #17
 80012f4:	2201      	movs	r2, #1
 80012f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012f8:	7bfa      	ldrb	r2, [r7, #15]
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4613      	mov	r3, r2
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	3310      	adds	r3, #16
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	3313      	adds	r3, #19
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3320      	adds	r3, #32
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	3324      	adds	r3, #36	@ 0x24
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	3301      	adds	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	791b      	ldrb	r3, [r3, #4]
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3bb      	bcc.n	80012e4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e044      	b.n	80013fc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800139e:	7bfa      	ldrb	r2, [r7, #15]
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	4613      	mov	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4413      	add	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	440b      	add	r3, r1
 80013ac:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	3301      	adds	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	791b      	ldrb	r3, [r3, #4]
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	429a      	cmp	r2, r3
 8001404:	d3b5      	bcc.n	8001372 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6818      	ldr	r0, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001412:	f002 fe31 	bl	8004078 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001436:	af00      	add	r7, sp, #0
 8001438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800143c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001440:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001446:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	f001 b823 	b.w	800249c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800145a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 817d 	beq.w	8001766 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800146c:	4bbc      	ldr	r3, [pc, #752]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 030c 	and.w	r3, r3, #12
 8001474:	2b04      	cmp	r3, #4
 8001476:	d00c      	beq.n	8001492 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001478:	4bb9      	ldr	r3, [pc, #740]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 030c 	and.w	r3, r3, #12
 8001480:	2b08      	cmp	r3, #8
 8001482:	d15c      	bne.n	800153e <HAL_RCC_OscConfig+0x10e>
 8001484:	4bb6      	ldr	r3, [pc, #728]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001490:	d155      	bne.n	800153e <HAL_RCC_OscConfig+0x10e>
 8001492:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001496:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	095b      	lsrs	r3, r3, #5
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d102      	bne.n	80014c4 <HAL_RCC_OscConfig+0x94>
 80014be:	4ba8      	ldr	r3, [pc, #672]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	e015      	b.n	80014f0 <HAL_RCC_OscConfig+0xc0>
 80014c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014c8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80014d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014dc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80014e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80014ec:	4b9c      	ldr	r3, [pc, #624]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014f4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80014f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80014fc:	fa92 f2a2 	rbit	r2, r2
 8001500:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001504:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001508:	fab2 f282 	clz	r2, r2
 800150c:	b2d2      	uxtb	r2, r2
 800150e:	f042 0220 	orr.w	r2, r2, #32
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	f002 021f 	and.w	r2, r2, #31
 8001518:	2101      	movs	r1, #1
 800151a:	fa01 f202 	lsl.w	r2, r1, r2
 800151e:	4013      	ands	r3, r2
 8001520:	2b00      	cmp	r3, #0
 8001522:	f000 811f 	beq.w	8001764 <HAL_RCC_OscConfig+0x334>
 8001526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 8116 	bne.w	8001764 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	f000 bfaf 	b.w	800249c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001542:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x12e>
 8001550:	4b83      	ldr	r3, [pc, #524]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a82      	ldr	r2, [pc, #520]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001556:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e036      	b.n	80015cc <HAL_RCC_OscConfig+0x19c>
 800155e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001562:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x158>
 800156e:	4b7c      	ldr	r3, [pc, #496]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7b      	ldr	r2, [pc, #492]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b79      	ldr	r3, [pc, #484]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a78      	ldr	r2, [pc, #480]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e021      	b.n	80015cc <HAL_RCC_OscConfig+0x19c>
 8001588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800158c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x184>
 800159a:	4b71      	ldr	r3, [pc, #452]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a70      	ldr	r2, [pc, #448]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6d      	ldr	r2, [pc, #436]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e00b      	b.n	80015cc <HAL_RCC_OscConfig+0x19c>
 80015b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a69      	ldr	r2, [pc, #420]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b67      	ldr	r3, [pc, #412]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a66      	ldr	r2, [pc, #408]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015cc:	4b64      	ldr	r3, [pc, #400]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d0:	f023 020f 	bic.w	r2, r3, #15
 80015d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	495f      	ldr	r1, [pc, #380]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d059      	beq.n	80016aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fa71 	bl	8000adc <HAL_GetTick>
 80015fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fa6c 	bl	8000adc <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	@ 0x64
 800160e:	d902      	bls.n	8001616 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	f000 bf43 	b.w	800249c <HAL_RCC_OscConfig+0x106c>
 8001616:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800161a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800161e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001622:	fa93 f3a3 	rbit	r3, r3
 8001626:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800162a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800162e:	fab3 f383 	clz	r3, r3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	095b      	lsrs	r3, r3, #5
 8001636:	b2db      	uxtb	r3, r3
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0x218>
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	e015      	b.n	8001674 <HAL_RCC_OscConfig+0x244>
 8001648:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800164c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001650:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001654:	fa93 f3a3 	rbit	r3, r3
 8001658:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800165c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001660:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001664:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001670:	4b3b      	ldr	r3, [pc, #236]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001678:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800167c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001680:	fa92 f2a2 	rbit	r2, r2
 8001684:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001688:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800168c:	fab2 f282 	clz	r2, r2
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f042 0220 	orr.w	r2, r2, #32
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	f002 021f 	and.w	r2, r2, #31
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f202 	lsl.w	r2, r1, r2
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ab      	beq.n	8001600 <HAL_RCC_OscConfig+0x1d0>
 80016a8:	e05d      	b.n	8001766 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016aa:	f7ff fa17 	bl	8000adc <HAL_GetTick>
 80016ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fa12 	bl	8000adc <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b64      	cmp	r3, #100	@ 0x64
 80016c2:	d902      	bls.n	80016ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	f000 bee9 	b.w	800249c <HAL_RCC_OscConfig+0x106c>
 80016ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80016de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	fab3 f383 	clz	r3, r3
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	095b      	lsrs	r3, r3, #5
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0x2cc>
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	e015      	b.n	8001728 <HAL_RCC_OscConfig+0x2f8>
 80016fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001700:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001704:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001708:	fa93 f3a3 	rbit	r3, r3
 800170c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001710:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001714:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001718:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800171c:	fa93 f3a3 	rbit	r3, r3
 8001720:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <HAL_RCC_OscConfig+0x330>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800172c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001730:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001734:	fa92 f2a2 	rbit	r2, r2
 8001738:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800173c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f042 0220 	orr.w	r2, r2, #32
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ab      	bne.n	80016b4 <HAL_RCC_OscConfig+0x284>
 800175c:	e003      	b.n	8001766 <HAL_RCC_OscConfig+0x336>
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 817d 	beq.w	8001a76 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177c:	4ba6      	ldr	r3, [pc, #664]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001788:	4ba3      	ldr	r3, [pc, #652]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d172      	bne.n	800187a <HAL_RCC_OscConfig+0x44a>
 8001794:	4ba0      	ldr	r3, [pc, #640]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d16c      	bne.n	800187a <HAL_RCC_OscConfig+0x44a>
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80017b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0x3a0>
 80017ca:	4b93      	ldr	r3, [pc, #588]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e013      	b.n	80017f8 <HAL_RCC_OscConfig+0x3c8>
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80017e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80017f4:	4b88      	ldr	r3, [pc, #544]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	2202      	movs	r2, #2
 80017fa:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80017fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001802:	fa92 f2a2 	rbit	r2, r2
 8001806:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800180a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800180e:	fab2 f282 	clz	r2, r2
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	f042 0220 	orr.w	r2, r2, #32
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f002 021f 	and.w	r2, r2, #31
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00a      	beq.n	8001840 <HAL_RCC_OscConfig+0x410>
 800182a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d002      	beq.n	8001840 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	f000 be2e 	b.w	800249c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b75      	ldr	r3, [pc, #468]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	21f8      	movs	r1, #248	@ 0xf8
 8001856:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800185e:	fa91 f1a1 	rbit	r1, r1
 8001862:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001866:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800186a:	fab1 f181 	clz	r1, r1
 800186e:	b2c9      	uxtb	r1, r1
 8001870:	408b      	lsls	r3, r1
 8001872:	4969      	ldr	r1, [pc, #420]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 8001874:	4313      	orrs	r3, r2
 8001876:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001878:	e0fd      	b.n	8001a76 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f000 8088 	beq.w	800199c <HAL_RCC_OscConfig+0x56c>
 800188c:	2301      	movs	r3, #1
 800188e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001896:	fa93 f3a3 	rbit	r3, r3
 800189a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800189e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a2:	fab3 f383 	clz	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	461a      	mov	r2, r3
 80018b4:	2301      	movs	r3, #1
 80018b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff f910 	bl	8000adc <HAL_GetTick>
 80018bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff f90b 	bl	8000adc <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d902      	bls.n	80018d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	f000 bde2 	b.w	800249c <HAL_RCC_OscConfig+0x106c>
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80018ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	095b      	lsrs	r3, r3, #5
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d102      	bne.n	8001908 <HAL_RCC_OscConfig+0x4d8>
 8001902:	4b45      	ldr	r3, [pc, #276]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	e013      	b.n	8001930 <HAL_RCC_OscConfig+0x500>
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800191a:	2302      	movs	r3, #2
 800191c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001920:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001924:	fa93 f3a3 	rbit	r3, r3
 8001928:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800192c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001930:	2202      	movs	r2, #2
 8001932:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001936:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800193a:	fa92 f2a2 	rbit	r2, r2
 800193e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001942:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001946:	fab2 f282 	clz	r2, r2
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f042 0220 	orr.w	r2, r2, #32
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f002 021f 	and.w	r2, r2, #31
 8001956:	2101      	movs	r1, #1
 8001958:	fa01 f202 	lsl.w	r2, r1, r2
 800195c:	4013      	ands	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0af      	beq.n	80018c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b2d      	ldr	r3, [pc, #180]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800196a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	21f8      	movs	r1, #248	@ 0xf8
 8001978:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001980:	fa91 f1a1 	rbit	r1, r1
 8001984:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001988:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800198c:	fab1 f181 	clz	r1, r1
 8001990:	b2c9      	uxtb	r1, r1
 8001992:	408b      	lsls	r3, r1
 8001994:	4920      	ldr	r1, [pc, #128]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
 800199a:	e06c      	b.n	8001a76 <HAL_RCC_OscConfig+0x646>
 800199c:	2301      	movs	r3, #1
 800199e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80019ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	fab3 f383 	clz	r3, r3
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	461a      	mov	r2, r3
 80019c4:	2300      	movs	r3, #0
 80019c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff f888 	bl	8000adc <HAL_GetTick>
 80019cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff f883 	bl	8000adc <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d902      	bls.n	80019e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	f000 bd5a 	b.w	800249c <HAL_RCC_OscConfig+0x106c>
 80019e8:	2302      	movs	r3, #2
 80019ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80019fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	095b      	lsrs	r3, r3, #5
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d104      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5ec>
 8001a12:	4b01      	ldr	r3, [pc, #4]	@ (8001a18 <HAL_RCC_OscConfig+0x5e8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	e015      	b.n	8001a44 <HAL_RCC_OscConfig+0x614>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a26:	fa93 f3a3 	rbit	r3, r3
 8001a2a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001a40:	4bc8      	ldr	r3, [pc, #800]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a44:	2202      	movs	r2, #2
 8001a46:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001a4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a4e:	fa92 f2a2 	rbit	r2, r2
 8001a52:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001a56:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	f042 0220 	orr.w	r2, r2, #32
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f002 021f 	and.w	r2, r2, #31
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1ad      	bne.n	80019d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8110 	beq.w	8001cac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d079      	beq.n	8001b90 <HAL_RCC_OscConfig+0x760>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4bab      	ldr	r3, [pc, #684]	@ (8001d68 <HAL_RCC_OscConfig+0x938>)
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f809 	bl	8000adc <HAL_GetTick>
 8001aca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f804 	bl	8000adc <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d902      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	f000 bcdb 	b.w	800249c <HAL_RCC_OscConfig+0x106c>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b00:	2202      	movs	r2, #2
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b08:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f2a3 	rbit	r2, r3
 8001b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b24:	2202      	movs	r2, #2
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b40:	4b88      	ldr	r3, [pc, #544]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001b42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	6019      	str	r1, [r3, #0]
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f1a3 	rbit	r1, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b66:	6019      	str	r1, [r3, #0]
  return result;
 8001b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b6c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fab3 f383 	clz	r3, r3
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2101      	movs	r1, #1
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0a0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x6a0>
 8001b8e:	e08d      	b.n	8001cac <HAL_RCC_OscConfig+0x87c>
 8001b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b94:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f2a3 	rbit	r2, r3
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bb2:	601a      	str	r2, [r3, #0]
  return result;
 8001bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bbc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b68      	ldr	r3, [pc, #416]	@ (8001d68 <HAL_RCC_OscConfig+0x938>)
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2300      	movs	r3, #0
 8001bd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd2:	f7fe ff83 	bl	8000adc <HAL_GetTick>
 8001bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bdc:	f7fe ff7e 	bl	8000adc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d902      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	f000 bc55 	b.w	800249c <HAL_RCC_OscConfig+0x106c>
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c02:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c10:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c1e:	2202      	movs	r2, #2
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c42:	2202      	movs	r2, #2
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c58:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c5e:	4b41      	ldr	r3, [pc, #260]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001c60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c66:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	6019      	str	r1, [r3, #0]
 8001c6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c72:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f1a3 	rbit	r1, r3
 8001c7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c80:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c84:	6019      	str	r1, [r3, #0]
  return result;
 8001c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d197      	bne.n	8001bdc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 81a1 	beq.w	8002004 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc8:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d116      	bne.n	8001d02 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	4b23      	ldr	r3, [pc, #140]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	4a22      	ldr	r2, [pc, #136]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cde:	61d3      	str	r3, [r2, #28]
 8001ce0:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cec:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001cfa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_RCC_OscConfig+0x93c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d11a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <HAL_RCC_OscConfig+0x93c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a16      	ldr	r2, [pc, #88]	@ (8001d6c <HAL_RCC_OscConfig+0x93c>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fedf 	bl	8000adc <HAL_GetTick>
 8001d1e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	e009      	b.n	8001d38 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d24:	f7fe feda 	bl	8000adc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b64      	cmp	r3, #100	@ 0x64
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e3b1      	b.n	800249c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <HAL_RCC_OscConfig+0x93c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ef      	beq.n	8001d24 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10d      	bne.n	8001d70 <HAL_RCC_OscConfig+0x940>
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	4a02      	ldr	r2, [pc, #8]	@ (8001d64 <HAL_RCC_OscConfig+0x934>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6213      	str	r3, [r2, #32]
 8001d60:	e03c      	b.n	8001ddc <HAL_RCC_OscConfig+0x9ac>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	10908120 	.word	0x10908120
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x96a>
 8001d80:	4bc1      	ldr	r3, [pc, #772]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4ac0      	ldr	r2, [pc, #768]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001d86:	f023 0301 	bic.w	r3, r3, #1
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4bbe      	ldr	r3, [pc, #760]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4abd      	ldr	r2, [pc, #756]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001d92:	f023 0304 	bic.w	r3, r3, #4
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e020      	b.n	8001ddc <HAL_RCC_OscConfig+0x9ac>
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x994>
 8001daa:	4bb7      	ldr	r3, [pc, #732]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4ab6      	ldr	r2, [pc, #728]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	4bb4      	ldr	r3, [pc, #720]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	4ab3      	ldr	r2, [pc, #716]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6213      	str	r3, [r2, #32]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0x9ac>
 8001dc4:	4bb0      	ldr	r3, [pc, #704]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4aaf      	ldr	r2, [pc, #700]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	4bad      	ldr	r3, [pc, #692]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4aac      	ldr	r2, [pc, #688]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001dd6:	f023 0304 	bic.w	r3, r3, #4
 8001dda:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ddc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8081 	beq.w	8001ef0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7fe fe75 	bl	8000adc <HAL_GetTick>
 8001df2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7fe fe70 	bl	8000adc <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e345      	b.n	800249c <HAL_RCC_OscConfig+0x106c>
 8001e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e14:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	fa93 f2a3 	rbit	r2, r3
 8001e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e38:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e52:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e56:	601a      	str	r2, [r3, #0]
  return result;
 8001e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d102      	bne.n	8001e7c <HAL_RCC_OscConfig+0xa4c>
 8001e76:	4b84      	ldr	r3, [pc, #528]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	e013      	b.n	8001ea4 <HAL_RCC_OscConfig+0xa74>
 8001e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e80:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e84:	2202      	movs	r2, #2
 8001e86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	fa93 f2a3 	rbit	r2, r3
 8001e96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	4b79      	ldr	r3, [pc, #484]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ea8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001eac:	2102      	movs	r1, #2
 8001eae:	6011      	str	r1, [r2, #0]
 8001eb0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eb4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	fa92 f1a2 	rbit	r1, r2
 8001ebe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ec2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ec6:	6011      	str	r1, [r2, #0]
  return result;
 8001ec8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ecc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ed0:	6812      	ldr	r2, [r2, #0]
 8001ed2:	fab2 f282 	clz	r2, r2
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	f002 021f 	and.w	r2, r2, #31
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d084      	beq.n	8001df8 <HAL_RCC_OscConfig+0x9c8>
 8001eee:	e07f      	b.n	8001ff0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef0:	f7fe fdf4 	bl	8000adc <HAL_GetTick>
 8001ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	e00b      	b.n	8001f12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fdef 	bl	8000adc <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e2c4      	b.n	800249c <HAL_RCC_OscConfig+0x106c>
 8001f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f16:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f22:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f3e:	2202      	movs	r2, #2
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	fa93 f2a3 	rbit	r2, r3
 8001f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f54:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f58:	601a      	str	r2, [r3, #0]
  return result;
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_OscConfig+0xb4e>
 8001f78:	4b43      	ldr	r3, [pc, #268]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	e013      	b.n	8001fa6 <HAL_RCC_OscConfig+0xb76>
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f86:	2202      	movs	r2, #2
 8001f88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	4b39      	ldr	r3, [pc, #228]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001faa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fae:	2102      	movs	r1, #2
 8001fb0:	6011      	str	r1, [r2, #0]
 8001fb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fb6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	fa92 f1a2 	rbit	r1, r2
 8001fc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fc4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fc8:	6011      	str	r1, [r2, #0]
  return result;
 8001fca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fce:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	fab2 f282 	clz	r2, r2
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	f002 021f 	and.w	r2, r2, #31
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d184      	bne.n	8001efa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff8:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8001ffe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002002:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002008:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f000 8242 	beq.w	800249a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002016:	4b1c      	ldr	r3, [pc, #112]	@ (8002088 <HAL_RCC_OscConfig+0xc58>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b08      	cmp	r3, #8
 8002020:	f000 8213 	beq.w	800244a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002024:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002028:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	2b02      	cmp	r3, #2
 8002032:	f040 8162 	bne.w	80022fa <HAL_RCC_OscConfig+0xeca>
 8002036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800203e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002042:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002048:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	fa93 f2a3 	rbit	r2, r3
 8002052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002056:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800205a:	601a      	str	r2, [r3, #0]
  return result;
 800205c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002060:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002064:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002066:	fab3 f383 	clz	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002070:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	461a      	mov	r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7fe fd2e 	bl	8000adc <HAL_GetTick>
 8002080:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002084:	e00c      	b.n	80020a0 <HAL_RCC_OscConfig+0xc70>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208c:	f7fe fd26 	bl	8000adc <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1fd      	b.n	800249c <HAL_RCC_OscConfig+0x106c>
 80020a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f2a3 	rbit	r2, r3
 80020bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020c4:	601a      	str	r2, [r3, #0]
  return result;
 80020c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	fab3 f383 	clz	r3, r3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_OscConfig+0xcba>
 80020e4:	4bb0      	ldr	r3, [pc, #704]	@ (80023a8 <HAL_RCC_OscConfig+0xf78>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	e027      	b.n	800213a <HAL_RCC_OscConfig+0xd0a>
 80020ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002118:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	fa93 f2a3 	rbit	r2, r3
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	4b9c      	ldr	r3, [pc, #624]	@ (80023a8 <HAL_RCC_OscConfig+0xf78>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800213e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002142:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002146:	6011      	str	r1, [r2, #0]
 8002148:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800214c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	fa92 f1a2 	rbit	r1, r2
 8002156:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800215a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800215e:	6011      	str	r1, [r2, #0]
  return result;
 8002160:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002164:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	fab2 f282 	clz	r2, r2
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f042 0220 	orr.w	r2, r2, #32
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f002 021f 	and.w	r2, r2, #31
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d182      	bne.n	800208c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002186:	4b88      	ldr	r3, [pc, #544]	@ (80023a8 <HAL_RCC_OscConfig+0xf78>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800219a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	430b      	orrs	r3, r1
 80021a8:	497f      	ldr	r1, [pc, #508]	@ (80023a8 <HAL_RCC_OscConfig+0xf78>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
 80021ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021d2:	601a      	str	r2, [r3, #0]
  return result;
 80021d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	461a      	mov	r2, r3
 80021f0:	2301      	movs	r3, #1
 80021f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fc72 	bl	8000adc <HAL_GetTick>
 80021f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fe:	f7fe fc6d 	bl	8000adc <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e144      	b.n	800249c <HAL_RCC_OscConfig+0x106c>
 8002212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002216:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800221a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800221e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002240:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	b2db      	uxtb	r3, r3
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b01      	cmp	r3, #1
 8002254:	d102      	bne.n	800225c <HAL_RCC_OscConfig+0xe2c>
 8002256:	4b54      	ldr	r3, [pc, #336]	@ (80023a8 <HAL_RCC_OscConfig+0xf78>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	e027      	b.n	80022ac <HAL_RCC_OscConfig+0xe7c>
 800225c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002260:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002264:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002268:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800228a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	fa93 f2a3 	rbit	r2, r3
 800229e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <HAL_RCC_OscConfig+0xf78>)
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022b8:	6011      	str	r1, [r2, #0]
 80022ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022be:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	fa92 f1a2 	rbit	r1, r2
 80022c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022cc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022d0:	6011      	str	r1, [r2, #0]
  return result;
 80022d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022d6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	f042 0220 	orr.w	r2, r2, #32
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	f002 021f 	and.w	r2, r2, #31
 80022ec:	2101      	movs	r1, #1
 80022ee:	fa01 f202 	lsl.w	r2, r1, r2
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d082      	beq.n	80021fe <HAL_RCC_OscConfig+0xdce>
 80022f8:	e0cf      	b.n	800249a <HAL_RCC_OscConfig+0x106a>
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002302:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	fa93 f2a3 	rbit	r2, r3
 8002316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800231e:	601a      	str	r2, [r3, #0]
  return result;
 8002320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002324:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002328:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002334:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	461a      	mov	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fbcc 	bl	8000adc <HAL_GetTick>
 8002344:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002348:	e009      	b.n	800235e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fbc7 	bl	8000adc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e09e      	b.n	800249c <HAL_RCC_OscConfig+0x106c>
 800235e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002362:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002366:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002370:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002382:	601a      	str	r2, [r3, #0]
  return result;
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800238c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	095b      	lsrs	r3, r3, #5
 8002396:	b2db      	uxtb	r3, r3
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d104      	bne.n	80023ac <HAL_RCC_OscConfig+0xf7c>
 80023a2:	4b01      	ldr	r3, [pc, #4]	@ (80023a8 <HAL_RCC_OscConfig+0xf78>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	e029      	b.n	80023fc <HAL_RCC_OscConfig+0xfcc>
 80023a8:	40021000 	.word	0x40021000
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	fa93 f2a3 	rbit	r2, r3
 80023c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023cc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	fa93 f2a3 	rbit	r2, r3
 80023ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_RCC_OscConfig+0x1078>)
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002400:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002404:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002408:	6011      	str	r1, [r2, #0]
 800240a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800240e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	fa92 f1a2 	rbit	r1, r2
 8002418:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800241c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002420:	6011      	str	r1, [r2, #0]
  return result;
 8002422:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002426:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f002 021f 	and.w	r2, r2, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d180      	bne.n	800234a <HAL_RCC_OscConfig+0xf1a>
 8002448:	e027      	b.n	800249a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e01e      	b.n	800249c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800245e:	4b12      	ldr	r3, [pc, #72]	@ (80024a8 <HAL_RCC_OscConfig+0x1078>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002466:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800246a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800246e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	429a      	cmp	r2, r3
 800247c:	d10b      	bne.n	8002496 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800247e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002482:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002492:	429a      	cmp	r2, r3
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b09e      	sub	sp, #120	@ 0x78
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e162      	b.n	800278a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c4:	4b90      	ldr	r3, [pc, #576]	@ (8002708 <HAL_RCC_ClockConfig+0x25c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d910      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002708 <HAL_RCC_ClockConfig+0x25c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 0207 	bic.w	r2, r3, #7
 80024da:	498b      	ldr	r1, [pc, #556]	@ (8002708 <HAL_RCC_ClockConfig+0x25c>)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b89      	ldr	r3, [pc, #548]	@ (8002708 <HAL_RCC_ClockConfig+0x25c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e14a      	b.n	800278a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4b82      	ldr	r3, [pc, #520]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	497f      	ldr	r1, [pc, #508]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 800250e:	4313      	orrs	r3, r2
 8002510:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 80dc 	beq.w	80026d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d13c      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xf6>
 8002528:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800252c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002530:	fa93 f3a3 	rbit	r3, r3
 8002534:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d102      	bne.n	8002552 <HAL_RCC_ClockConfig+0xa6>
 800254c:	4b6f      	ldr	r3, [pc, #444]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e00f      	b.n	8002572 <HAL_RCC_ClockConfig+0xc6>
 8002552:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002556:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002560:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002564:	663b      	str	r3, [r7, #96]	@ 0x60
 8002566:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800256e:	4b67      	ldr	r3, [pc, #412]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002576:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002580:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f042 0220 	orr.w	r2, r2, #32
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	f002 021f 	and.w	r2, r2, #31
 8002592:	2101      	movs	r1, #1
 8002594:	fa01 f202 	lsl.w	r2, r1, r2
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d17b      	bne.n	8002696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0f3      	b.n	800278a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d13c      	bne.n	8002624 <HAL_RCC_ClockConfig+0x178>
 80025aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x128>
 80025ce:	4b4f      	ldr	r3, [pc, #316]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	e00f      	b.n	80025f4 <HAL_RCC_ClockConfig+0x148>
 80025d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80025e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025ea:	fa93 f3a3 	rbit	r3, r3
 80025ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025f0:	4b46      	ldr	r3, [pc, #280]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025f8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80025fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025fc:	fa92 f2a2 	rbit	r2, r2
 8002600:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002604:	fab2 f282 	clz	r2, r2
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	f042 0220 	orr.w	r2, r2, #32
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f002 021f 	and.w	r2, r2, #31
 8002614:	2101      	movs	r1, #1
 8002616:	fa01 f202 	lsl.w	r2, r1, r2
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d13a      	bne.n	8002696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b2      	b.n	800278a <HAL_RCC_ClockConfig+0x2de>
 8002624:	2302      	movs	r3, #2
 8002626:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	fab3 f383 	clz	r3, r3
 8002636:	b2db      	uxtb	r3, r3
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d102      	bne.n	800264c <HAL_RCC_ClockConfig+0x1a0>
 8002646:	4b31      	ldr	r3, [pc, #196]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	e00d      	b.n	8002668 <HAL_RCC_ClockConfig+0x1bc>
 800264c:	2302      	movs	r3, #2
 800264e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	2302      	movs	r3, #2
 800265a:	623b      	str	r3, [r7, #32]
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	61fb      	str	r3, [r7, #28]
 8002664:	4b29      	ldr	r3, [pc, #164]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	2202      	movs	r2, #2
 800266a:	61ba      	str	r2, [r7, #24]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	617a      	str	r2, [r7, #20]
  return result;
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	fab2 f282 	clz	r2, r2
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	f042 0220 	orr.w	r2, r2, #32
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	f002 021f 	and.w	r2, r2, #31
 8002686:	2101      	movs	r1, #1
 8002688:	fa01 f202 	lsl.w	r2, r1, r2
 800268c:	4013      	ands	r3, r2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e079      	b.n	800278a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002696:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f023 0203 	bic.w	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	491a      	ldr	r1, [pc, #104]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fa18 	bl	8000adc <HAL_GetTick>
 80026ac:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b0:	f7fe fa14 	bl	8000adc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e061      	b.n	800278a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_RCC_ClockConfig+0x260>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 020c 	and.w	r2, r3, #12
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d1eb      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_RCC_ClockConfig+0x25c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d214      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_RCC_ClockConfig+0x25c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 0207 	bic.w	r2, r3, #7
 80026ee:	4906      	ldr	r1, [pc, #24]	@ (8002708 <HAL_RCC_ClockConfig+0x25c>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <HAL_RCC_ClockConfig+0x25c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e040      	b.n	800278a <HAL_RCC_ClockConfig+0x2de>
 8002708:	40022000 	.word	0x40022000
 800270c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <HAL_RCC_ClockConfig+0x2e8>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	491a      	ldr	r1, [pc, #104]	@ (8002794 <HAL_RCC_ClockConfig+0x2e8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <HAL_RCC_ClockConfig+0x2e8>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4912      	ldr	r1, [pc, #72]	@ (8002794 <HAL_RCC_ClockConfig+0x2e8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800274e:	f000 f829 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002752:	4601      	mov	r1, r0
 8002754:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_RCC_ClockConfig+0x2e8>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800275c:	22f0      	movs	r2, #240	@ 0xf0
 800275e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	fa92 f2a2 	rbit	r2, r2
 8002766:	60fa      	str	r2, [r7, #12]
  return result;
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	fab2 f282 	clz	r2, r2
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	40d3      	lsrs	r3, r2
 8002772:	4a09      	ldr	r2, [pc, #36]	@ (8002798 <HAL_RCC_ClockConfig+0x2ec>)
 8002774:	5cd3      	ldrb	r3, [r2, r3]
 8002776:	fa21 f303 	lsr.w	r3, r1, r3
 800277a:	4a08      	ldr	r2, [pc, #32]	@ (800279c <HAL_RCC_ClockConfig+0x2f0>)
 800277c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800277e:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <HAL_RCC_ClockConfig+0x2f4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fe f966 	bl	8000a54 <HAL_InitTick>
  
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3778      	adds	r7, #120	@ 0x78
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	08004124 	.word	0x08004124
 800279c:	20000024 	.word	0x20000024
 80027a0:	20000028 	.word	0x20000028

080027a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027be:	4b1e      	ldr	r3, [pc, #120]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x94>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x30>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x36>
 80027d2:	e026      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	e026      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	4a17      	ldr	r2, [pc, #92]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027e4:	5cd3      	ldrb	r3, [r2, r3]
 80027e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	4a14      	ldr	r2, [pc, #80]	@ (8002844 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002800:	4a0e      	ldr	r2, [pc, #56]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	fbb2 f2f3 	udiv	r2, r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	e004      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a0c      	ldr	r2, [pc, #48]	@ (8002848 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	613b      	str	r3, [r7, #16]
      break;
 8002820:	e002      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002822:	4b06      	ldr	r3, [pc, #24]	@ (800283c <HAL_RCC_GetSysClockFreq+0x98>)
 8002824:	613b      	str	r3, [r7, #16]
      break;
 8002826:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002828:	693b      	ldr	r3, [r7, #16]
}
 800282a:	4618      	mov	r0, r3
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	007a1200 	.word	0x007a1200
 8002840:	0800413c 	.word	0x0800413c
 8002844:	0800414c 	.word	0x0800414c
 8002848:	003d0900 	.word	0x003d0900

0800284c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_RCC_GetHCLKFreq+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000024 	.word	0x20000024

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800286a:	f7ff ffef 	bl	800284c <HAL_RCC_GetHCLKFreq>
 800286e:	4601      	mov	r1, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002878:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800287c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	fa92 f2a2 	rbit	r2, r2
 8002884:	603a      	str	r2, [r7, #0]
  return result;
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	fab2 f282 	clz	r2, r2
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	40d3      	lsrs	r3, r2
 8002890:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002898:	4618      	mov	r0, r3
 800289a:	3708      	adds	r7, #8
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	08004134 	.word	0x08004134

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028ae:	f7ff ffcd 	bl	800284c <HAL_RCC_GetHCLKFreq>
 80028b2:	4601      	mov	r1, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80028bc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80028c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	fa92 f2a2 	rbit	r2, r2
 80028c8:	603a      	str	r2, [r7, #0]
  return result;
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	fab2 f282 	clz	r2, r2
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	40d3      	lsrs	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028d6:	5cd3      	ldrb	r3, [r2, r3]
 80028d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028dc:	4618      	mov	r0, r3
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	08004134 	.word	0x08004134

080028ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b092      	sub	sp, #72	@ 0x48
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80d4 	beq.w	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002910:	4b4e      	ldr	r3, [pc, #312]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10e      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	4a4a      	ldr	r2, [pc, #296]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002926:	61d3      	str	r3, [r2, #28]
 8002928:	4b48      	ldr	r3, [pc, #288]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002934:	2301      	movs	r3, #1
 8002936:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293a:	4b45      	ldr	r3, [pc, #276]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d118      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002946:	4b42      	ldr	r3, [pc, #264]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a41      	ldr	r2, [pc, #260]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800294c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002950:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002952:	f7fe f8c3 	bl	8000adc <HAL_GetTick>
 8002956:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	e008      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295a:	f7fe f8bf 	bl	8000adc <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b64      	cmp	r3, #100	@ 0x64
 8002966:	d901      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e169      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296c:	4b38      	ldr	r3, [pc, #224]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002978:	4b34      	ldr	r3, [pc, #208]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8084 	beq.w	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002992:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002994:	429a      	cmp	r2, r3
 8002996:	d07c      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002998:	4b2c      	ldr	r3, [pc, #176]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80029b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b26      	ldr	r3, [pc, #152]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029bc:	4413      	add	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	461a      	mov	r2, r3
 80029c2:	2301      	movs	r3, #1
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029d6:	fab3 f383 	clz	r3, r3
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	461a      	mov	r2, r3
 80029e6:	2300      	movs	r3, #0
 80029e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ea:	4a18      	ldr	r2, [pc, #96]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d04b      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fe f86f 	bl	8000adc <HAL_GetTick>
 80029fe:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	e00a      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f7fe f86b 	bl	8000adc <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e113      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a24:	2302      	movs	r3, #2
 8002a26:	623b      	str	r3, [r7, #32]
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	61fb      	str	r3, [r7, #28]
  return result;
 8002a30:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d108      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a46:	4b01      	ldr	r3, [pc, #4]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	e00d      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	10908100 	.word	0x10908100
 8002a58:	2302      	movs	r3, #2
 8002a5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	4b78      	ldr	r3, [pc, #480]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	2202      	movs	r2, #2
 8002a6a:	613a      	str	r2, [r7, #16]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	fa92 f2a2 	rbit	r2, r2
 8002a72:	60fa      	str	r2, [r7, #12]
  return result;
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	fab2 f282 	clz	r2, r2
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f002 021f 	and.w	r2, r2, #31
 8002a86:	2101      	movs	r1, #1
 8002a88:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0b7      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a92:	4b6d      	ldr	r3, [pc, #436]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	496a      	ldr	r1, [pc, #424]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aa4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d105      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aac:	4b66      	ldr	r3, [pc, #408]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4a65      	ldr	r2, [pc, #404]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac4:	4b60      	ldr	r3, [pc, #384]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	f023 0203 	bic.w	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	495d      	ldr	r1, [pc, #372]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae2:	4b59      	ldr	r3, [pc, #356]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	4956      	ldr	r1, [pc, #344]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0304 	and.w	r3, r3, #4
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d008      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b00:	4b51      	ldr	r3, [pc, #324]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	494e      	ldr	r1, [pc, #312]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f023 0210 	bic.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4947      	ldr	r1, [pc, #284]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b3c:	4b42      	ldr	r3, [pc, #264]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	493f      	ldr	r1, [pc, #252]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f023 0220 	bic.w	r2, r3, #32
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4938      	ldr	r1, [pc, #224]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b78:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	4930      	ldr	r1, [pc, #192]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b96:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	4929      	ldr	r1, [pc, #164]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bb4:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	4921      	ldr	r1, [pc, #132]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d008      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	491a      	ldr	r1, [pc, #104]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bf0:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bfc:	4912      	ldr	r1, [pc, #72]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	490b      	ldr	r1, [pc, #44]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c38:	4903      	ldr	r1, [pc, #12]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3748      	adds	r7, #72	@ 0x48
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40021000 	.word	0x40021000

08002c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e09d      	b.n	8002d9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d108      	bne.n	8002c78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c6e:	d009      	beq.n	8002c84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	61da      	str	r2, [r3, #28]
 8002c76:	e005      	b.n	8002c84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7fd fd38 	bl	8000714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cc4:	d902      	bls.n	8002ccc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e002      	b.n	8002cd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ccc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002cda:	d007      	beq.n	8002cec <HAL_SPI_Init+0xa0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ce4:	d002      	beq.n	8002cec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2e:	ea42 0103 	orr.w	r1, r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d36:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	f003 0204 	and.w	r2, r3, #4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d68:	ea42 0103 	orr.w	r1, r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e049      	b.n	8002e48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fd fce5 	bl	8000798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f000 fa93 	bl	800330c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d001      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e04a      	b.n	8002efe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0201 	orr.w	r2, r2, #1
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a21      	ldr	r2, [pc, #132]	@ (8002f0c <HAL_TIM_Base_Start_IT+0xbc>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e92:	d013      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	@ (8002f10 <HAL_TIM_Base_Start_IT+0xc0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a1a      	ldr	r2, [pc, #104]	@ (8002f18 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_TIM_Base_Start_IT+0x6c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a19      	ldr	r2, [pc, #100]	@ (8002f1c <HAL_TIM_Base_Start_IT+0xcc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d115      	bne.n	8002ee8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d015      	beq.n	8002efa <HAL_TIM_Base_Start_IT+0xaa>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed4:	d011      	beq.n	8002efa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee6:	e008      	b.n	8002efa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	e000      	b.n	8002efc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40013400 	.word	0x40013400
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	00010007 	.word	0x00010007

08002f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d020      	beq.n	8002f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01b      	beq.n	8002f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f06f 0202 	mvn.w	r2, #2
 8002f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f9ad 	bl	80032ce <HAL_TIM_IC_CaptureCallback>
 8002f74:	e005      	b.n	8002f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f99f 	bl	80032ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f9b0 	bl	80032e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0304 	and.w	r3, r3, #4
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d020      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d01b      	beq.n	8002fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0204 	mvn.w	r2, #4
 8002fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f987 	bl	80032ce <HAL_TIM_IC_CaptureCallback>
 8002fc0:	e005      	b.n	8002fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f979 	bl	80032ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f98a 	bl	80032e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d020      	beq.n	8003020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01b      	beq.n	8003020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0208 	mvn.w	r2, #8
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f961 	bl	80032ce <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f953 	bl	80032ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f964 	bl	80032e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d020      	beq.n	800306c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01b      	beq.n	800306c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0210 	mvn.w	r2, #16
 800303c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2208      	movs	r2, #8
 8003042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f93b 	bl	80032ce <HAL_TIM_IC_CaptureCallback>
 8003058:	e005      	b.n	8003066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f92d 	bl	80032ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f93e 	bl	80032e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0201 	mvn.w	r2, #1
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7fd fac2 	bl	8000614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 faec 	bl	800368c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80030d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fae4 	bl	80036a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00c      	beq.n	80030fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8fd 	bl	80032f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0220 	mvn.w	r2, #32
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 faac 	bl	8003678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3710      	adds	r7, #16
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313c:	2b01      	cmp	r3, #1
 800313e:	d101      	bne.n	8003144 <HAL_TIM_ConfigClockSource+0x1c>
 8003140:	2302      	movs	r3, #2
 8003142:	e0b6      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x18a>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003162:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800316e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003180:	d03e      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0xd8>
 8003182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003186:	f200 8087 	bhi.w	8003298 <HAL_TIM_ConfigClockSource+0x170>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318e:	f000 8086 	beq.w	800329e <HAL_TIM_ConfigClockSource+0x176>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003196:	d87f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 8003198:	2b70      	cmp	r3, #112	@ 0x70
 800319a:	d01a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xaa>
 800319c:	2b70      	cmp	r3, #112	@ 0x70
 800319e:	d87b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031a0:	2b60      	cmp	r3, #96	@ 0x60
 80031a2:	d050      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x11e>
 80031a4:	2b60      	cmp	r3, #96	@ 0x60
 80031a6:	d877      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031a8:	2b50      	cmp	r3, #80	@ 0x50
 80031aa:	d03c      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0xfe>
 80031ac:	2b50      	cmp	r3, #80	@ 0x50
 80031ae:	d873      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031b0:	2b40      	cmp	r3, #64	@ 0x40
 80031b2:	d058      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x13e>
 80031b4:	2b40      	cmp	r3, #64	@ 0x40
 80031b6:	d86f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031b8:	2b30      	cmp	r3, #48	@ 0x30
 80031ba:	d064      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031bc:	2b30      	cmp	r3, #48	@ 0x30
 80031be:	d86b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d060      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d867      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05c      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d05a      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x15e>
 80031d0:	e062      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e2:	f000 f9a9 	bl	8003538 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	609a      	str	r2, [r3, #8]
      break;
 80031fe:	e04f      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003210:	f000 f992 	bl	8003538 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003222:	609a      	str	r2, [r3, #8]
      break;
 8003224:	e03c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003232:	461a      	mov	r2, r3
 8003234:	f000 f906 	bl	8003444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2150      	movs	r1, #80	@ 0x50
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f95f 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8003244:	e02c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003252:	461a      	mov	r2, r3
 8003254:	f000 f925 	bl	80034a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2160      	movs	r1, #96	@ 0x60
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f94f 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8003264:	e01c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	461a      	mov	r2, r3
 8003274:	f000 f8e6 	bl	8003444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2140      	movs	r1, #64	@ 0x40
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f93f 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8003284:	e00c      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f000 f936 	bl	8003502 <TIM_ITRx_SetConfig>
      break;
 8003296:	e003      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      break;
 800329c:	e000      	b.n	80032a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800329e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ba:	b480      	push	{r7}
 80032bc:	b083      	sub	sp, #12
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c2:	bf00      	nop
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr

080032ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a42      	ldr	r2, [pc, #264]	@ (8003428 <TIM_Base_SetConfig+0x11c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00f      	beq.n	8003344 <TIM_Base_SetConfig+0x38>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332a:	d00b      	beq.n	8003344 <TIM_Base_SetConfig+0x38>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a3f      	ldr	r2, [pc, #252]	@ (800342c <TIM_Base_SetConfig+0x120>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d007      	beq.n	8003344 <TIM_Base_SetConfig+0x38>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a3e      	ldr	r2, [pc, #248]	@ (8003430 <TIM_Base_SetConfig+0x124>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0x38>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a3d      	ldr	r2, [pc, #244]	@ (8003434 <TIM_Base_SetConfig+0x128>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d108      	bne.n	8003356 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a33      	ldr	r2, [pc, #204]	@ (8003428 <TIM_Base_SetConfig+0x11c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01b      	beq.n	8003396 <TIM_Base_SetConfig+0x8a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003364:	d017      	beq.n	8003396 <TIM_Base_SetConfig+0x8a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a30      	ldr	r2, [pc, #192]	@ (800342c <TIM_Base_SetConfig+0x120>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <TIM_Base_SetConfig+0x8a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a2f      	ldr	r2, [pc, #188]	@ (8003430 <TIM_Base_SetConfig+0x124>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00f      	beq.n	8003396 <TIM_Base_SetConfig+0x8a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a2e      	ldr	r2, [pc, #184]	@ (8003434 <TIM_Base_SetConfig+0x128>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00b      	beq.n	8003396 <TIM_Base_SetConfig+0x8a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a2d      	ldr	r2, [pc, #180]	@ (8003438 <TIM_Base_SetConfig+0x12c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <TIM_Base_SetConfig+0x8a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2c      	ldr	r2, [pc, #176]	@ (800343c <TIM_Base_SetConfig+0x130>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_Base_SetConfig+0x8a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2b      	ldr	r2, [pc, #172]	@ (8003440 <TIM_Base_SetConfig+0x134>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d108      	bne.n	80033a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800339c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a16      	ldr	r2, [pc, #88]	@ (8003428 <TIM_Base_SetConfig+0x11c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00f      	beq.n	80033f4 <TIM_Base_SetConfig+0xe8>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a17      	ldr	r2, [pc, #92]	@ (8003434 <TIM_Base_SetConfig+0x128>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00b      	beq.n	80033f4 <TIM_Base_SetConfig+0xe8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a16      	ldr	r2, [pc, #88]	@ (8003438 <TIM_Base_SetConfig+0x12c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <TIM_Base_SetConfig+0xe8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a15      	ldr	r2, [pc, #84]	@ (800343c <TIM_Base_SetConfig+0x130>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d003      	beq.n	80033f4 <TIM_Base_SetConfig+0xe8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a14      	ldr	r2, [pc, #80]	@ (8003440 <TIM_Base_SetConfig+0x134>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d103      	bne.n	80033fc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d105      	bne.n	800341a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	611a      	str	r2, [r3, #16]
  }
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40012c00 	.word	0x40012c00
 800342c:	40000400 	.word	0x40000400
 8003430:	40000800 	.word	0x40000800
 8003434:	40013400 	.word	0x40013400
 8003438:	40014000 	.word	0x40014000
 800343c:	40014400 	.word	0x40014400
 8003440:	40014800 	.word	0x40014800

08003444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f023 0201 	bic.w	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800346e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f023 030a 	bic.w	r3, r3, #10
 8003480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b087      	sub	sp, #28
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f023 0210 	bic.w	r2, r3, #16
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	031b      	lsls	r3, r3, #12
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	621a      	str	r2, [r3, #32]
}
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4313      	orrs	r3, r2
 8003520:	f043 0307 	orr.w	r3, r3, #7
 8003524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	021a      	lsls	r2, r3, #8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	431a      	orrs	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800358c:	2302      	movs	r3, #2
 800358e:	e063      	b.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d004      	beq.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2a      	ldr	r2, [pc, #168]	@ (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d108      	bne.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80035ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d018      	beq.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003602:	d013      	beq.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a18      	ldr	r2, [pc, #96]	@ (800366c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00e      	beq.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a17      	ldr	r2, [pc, #92]	@ (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d009      	beq.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a12      	ldr	r2, [pc, #72]	@ (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a13      	ldr	r2, [pc, #76]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d10c      	bne.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003632:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	4313      	orrs	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00
 8003668:	40013400 	.word	0x40013400
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40014000 	.word	0x40014000

08003678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e040      	b.n	8003748 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd f8a8 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	@ 0x24
 80036e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa86 	bl	8003c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f8af 	bl	8003864 <UART_SetConfig>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e01b      	b.n	8003748 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800371e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800372e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb05 	bl	8003d50 <UART_CheckIdleState>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	@ 0x28
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003764:	2b20      	cmp	r3, #32
 8003766:	d177      	bne.n	8003858 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_Transmit+0x24>
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e070      	b.n	800385a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2221      	movs	r2, #33	@ 0x21
 8003784:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003786:	f7fd f9a9 	bl	8000adc <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a4:	d108      	bne.n	80037b8 <HAL_UART_Transmit+0x68>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e003      	b.n	80037c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037bc:	2300      	movs	r3, #0
 80037be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037c0:	e02f      	b.n	8003822 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2200      	movs	r2, #0
 80037ca:	2180      	movs	r1, #128	@ 0x80
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 fb67 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e03b      	b.n	800385a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10b      	bne.n	8003800 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	881a      	ldrh	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f4:	b292      	uxth	r2, r2
 80037f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	3302      	adds	r3, #2
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e007      	b.n	8003810 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3301      	adds	r3, #1
 800380e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1c9      	bne.n	80037c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	2140      	movs	r1, #64	@ 0x40
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fb31 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e005      	b.n	800385a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3720      	adds	r7, #32
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003892:	f023 030c 	bic.w	r3, r3, #12
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	6979      	ldr	r1, [r7, #20]
 800389c:	430b      	orrs	r3, r1
 800389e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4aa7      	ldr	r2, [pc, #668]	@ (8003b7c <UART_SetConfig+0x318>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d120      	bne.n	8003926 <UART_SetConfig+0xc2>
 80038e4:	4ba6      	ldr	r3, [pc, #664]	@ (8003b80 <UART_SetConfig+0x31c>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d817      	bhi.n	8003920 <UART_SetConfig+0xbc>
 80038f0:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <UART_SetConfig+0x94>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	08003909 	.word	0x08003909
 80038fc:	08003915 	.word	0x08003915
 8003900:	0800391b 	.word	0x0800391b
 8003904:	0800390f 	.word	0x0800390f
 8003908:	2301      	movs	r3, #1
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e0b5      	b.n	8003a7a <UART_SetConfig+0x216>
 800390e:	2302      	movs	r3, #2
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e0b2      	b.n	8003a7a <UART_SetConfig+0x216>
 8003914:	2304      	movs	r3, #4
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e0af      	b.n	8003a7a <UART_SetConfig+0x216>
 800391a:	2308      	movs	r3, #8
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e0ac      	b.n	8003a7a <UART_SetConfig+0x216>
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e0a9      	b.n	8003a7a <UART_SetConfig+0x216>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a96      	ldr	r2, [pc, #600]	@ (8003b84 <UART_SetConfig+0x320>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d124      	bne.n	800397a <UART_SetConfig+0x116>
 8003930:	4b93      	ldr	r3, [pc, #588]	@ (8003b80 <UART_SetConfig+0x31c>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003938:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800393c:	d011      	beq.n	8003962 <UART_SetConfig+0xfe>
 800393e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003942:	d817      	bhi.n	8003974 <UART_SetConfig+0x110>
 8003944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003948:	d011      	beq.n	800396e <UART_SetConfig+0x10a>
 800394a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800394e:	d811      	bhi.n	8003974 <UART_SetConfig+0x110>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d003      	beq.n	800395c <UART_SetConfig+0xf8>
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d006      	beq.n	8003968 <UART_SetConfig+0x104>
 800395a:	e00b      	b.n	8003974 <UART_SetConfig+0x110>
 800395c:	2300      	movs	r3, #0
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e08b      	b.n	8003a7a <UART_SetConfig+0x216>
 8003962:	2302      	movs	r3, #2
 8003964:	77fb      	strb	r3, [r7, #31]
 8003966:	e088      	b.n	8003a7a <UART_SetConfig+0x216>
 8003968:	2304      	movs	r3, #4
 800396a:	77fb      	strb	r3, [r7, #31]
 800396c:	e085      	b.n	8003a7a <UART_SetConfig+0x216>
 800396e:	2308      	movs	r3, #8
 8003970:	77fb      	strb	r3, [r7, #31]
 8003972:	e082      	b.n	8003a7a <UART_SetConfig+0x216>
 8003974:	2310      	movs	r3, #16
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e07f      	b.n	8003a7a <UART_SetConfig+0x216>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a82      	ldr	r2, [pc, #520]	@ (8003b88 <UART_SetConfig+0x324>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d124      	bne.n	80039ce <UART_SetConfig+0x16a>
 8003984:	4b7e      	ldr	r3, [pc, #504]	@ (8003b80 <UART_SetConfig+0x31c>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800398c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003990:	d011      	beq.n	80039b6 <UART_SetConfig+0x152>
 8003992:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003996:	d817      	bhi.n	80039c8 <UART_SetConfig+0x164>
 8003998:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800399c:	d011      	beq.n	80039c2 <UART_SetConfig+0x15e>
 800399e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039a2:	d811      	bhi.n	80039c8 <UART_SetConfig+0x164>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <UART_SetConfig+0x14c>
 80039a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039ac:	d006      	beq.n	80039bc <UART_SetConfig+0x158>
 80039ae:	e00b      	b.n	80039c8 <UART_SetConfig+0x164>
 80039b0:	2300      	movs	r3, #0
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e061      	b.n	8003a7a <UART_SetConfig+0x216>
 80039b6:	2302      	movs	r3, #2
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e05e      	b.n	8003a7a <UART_SetConfig+0x216>
 80039bc:	2304      	movs	r3, #4
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e05b      	b.n	8003a7a <UART_SetConfig+0x216>
 80039c2:	2308      	movs	r3, #8
 80039c4:	77fb      	strb	r3, [r7, #31]
 80039c6:	e058      	b.n	8003a7a <UART_SetConfig+0x216>
 80039c8:	2310      	movs	r3, #16
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e055      	b.n	8003a7a <UART_SetConfig+0x216>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6e      	ldr	r2, [pc, #440]	@ (8003b8c <UART_SetConfig+0x328>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d124      	bne.n	8003a22 <UART_SetConfig+0x1be>
 80039d8:	4b69      	ldr	r3, [pc, #420]	@ (8003b80 <UART_SetConfig+0x31c>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80039e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039e4:	d011      	beq.n	8003a0a <UART_SetConfig+0x1a6>
 80039e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039ea:	d817      	bhi.n	8003a1c <UART_SetConfig+0x1b8>
 80039ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039f0:	d011      	beq.n	8003a16 <UART_SetConfig+0x1b2>
 80039f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039f6:	d811      	bhi.n	8003a1c <UART_SetConfig+0x1b8>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <UART_SetConfig+0x1a0>
 80039fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a00:	d006      	beq.n	8003a10 <UART_SetConfig+0x1ac>
 8003a02:	e00b      	b.n	8003a1c <UART_SetConfig+0x1b8>
 8003a04:	2300      	movs	r3, #0
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e037      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	77fb      	strb	r3, [r7, #31]
 8003a0e:	e034      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a10:	2304      	movs	r3, #4
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e031      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a16:	2308      	movs	r3, #8
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e02e      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e02b      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5a      	ldr	r2, [pc, #360]	@ (8003b90 <UART_SetConfig+0x32c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d124      	bne.n	8003a76 <UART_SetConfig+0x212>
 8003a2c:	4b54      	ldr	r3, [pc, #336]	@ (8003b80 <UART_SetConfig+0x31c>)
 8003a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a30:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003a34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a38:	d011      	beq.n	8003a5e <UART_SetConfig+0x1fa>
 8003a3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a3e:	d817      	bhi.n	8003a70 <UART_SetConfig+0x20c>
 8003a40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a44:	d011      	beq.n	8003a6a <UART_SetConfig+0x206>
 8003a46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a4a:	d811      	bhi.n	8003a70 <UART_SetConfig+0x20c>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <UART_SetConfig+0x1f4>
 8003a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a54:	d006      	beq.n	8003a64 <UART_SetConfig+0x200>
 8003a56:	e00b      	b.n	8003a70 <UART_SetConfig+0x20c>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e00d      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	77fb      	strb	r3, [r7, #31]
 8003a62:	e00a      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a64:	2304      	movs	r3, #4
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	e007      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	77fb      	strb	r3, [r7, #31]
 8003a6e:	e004      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a70:	2310      	movs	r3, #16
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e001      	b.n	8003a7a <UART_SetConfig+0x216>
 8003a76:	2310      	movs	r3, #16
 8003a78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a82:	d15b      	bne.n	8003b3c <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 8003a84:	7ffb      	ldrb	r3, [r7, #31]
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d827      	bhi.n	8003ada <UART_SetConfig+0x276>
 8003a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a90 <UART_SetConfig+0x22c>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003ab5 	.word	0x08003ab5
 8003a94:	08003abd 	.word	0x08003abd
 8003a98:	08003ac5 	.word	0x08003ac5
 8003a9c:	08003adb 	.word	0x08003adb
 8003aa0:	08003acb 	.word	0x08003acb
 8003aa4:	08003adb 	.word	0x08003adb
 8003aa8:	08003adb 	.word	0x08003adb
 8003aac:	08003adb 	.word	0x08003adb
 8003ab0:	08003ad3 	.word	0x08003ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ab4:	f7fe fed6 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 8003ab8:	61b8      	str	r0, [r7, #24]
        break;
 8003aba:	e013      	b.n	8003ae4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003abc:	f7fe fef4 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003ac0:	61b8      	str	r0, [r7, #24]
        break;
 8003ac2:	e00f      	b.n	8003ae4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ac4:	4b33      	ldr	r3, [pc, #204]	@ (8003b94 <UART_SetConfig+0x330>)
 8003ac6:	61bb      	str	r3, [r7, #24]
        break;
 8003ac8:	e00c      	b.n	8003ae4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aca:	f7fe fe6b 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8003ace:	61b8      	str	r0, [r7, #24]
        break;
 8003ad0:	e008      	b.n	8003ae4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ad6:	61bb      	str	r3, [r7, #24]
        break;
 8003ad8:	e004      	b.n	8003ae4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ae2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 8082 	beq.w	8003bf0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	005a      	lsls	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	441a      	add	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	2b0f      	cmp	r3, #15
 8003b06:	d916      	bls.n	8003b36 <UART_SetConfig+0x2d2>
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b0e:	d212      	bcs.n	8003b36 <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f023 030f 	bic.w	r3, r3, #15
 8003b18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	89fb      	ldrh	r3, [r7, #14]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	89fa      	ldrh	r2, [r7, #14]
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	e05c      	b.n	8003bf0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	77bb      	strb	r3, [r7, #30]
 8003b3a:	e059      	b.n	8003bf0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d835      	bhi.n	8003bae <UART_SetConfig+0x34a>
 8003b42:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <UART_SetConfig+0x2e4>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b75 	.word	0x08003b75
 8003b50:	08003b99 	.word	0x08003b99
 8003b54:	08003baf 	.word	0x08003baf
 8003b58:	08003b9f 	.word	0x08003b9f
 8003b5c:	08003baf 	.word	0x08003baf
 8003b60:	08003baf 	.word	0x08003baf
 8003b64:	08003baf 	.word	0x08003baf
 8003b68:	08003ba7 	.word	0x08003ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7fe fe7a 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 8003b70:	61b8      	str	r0, [r7, #24]
        break;
 8003b72:	e021      	b.n	8003bb8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b74:	f7fe fe98 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003b78:	61b8      	str	r0, [r7, #24]
        break;
 8003b7a:	e01d      	b.n	8003bb8 <UART_SetConfig+0x354>
 8003b7c:	40013800 	.word	0x40013800
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40004400 	.word	0x40004400
 8003b88:	40004800 	.word	0x40004800
 8003b8c:	40004c00 	.word	0x40004c00
 8003b90:	40005000 	.word	0x40005000
 8003b94:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b98:	4b1b      	ldr	r3, [pc, #108]	@ (8003c08 <UART_SetConfig+0x3a4>)
 8003b9a:	61bb      	str	r3, [r7, #24]
        break;
 8003b9c:	e00c      	b.n	8003bb8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b9e:	f7fe fe01 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8003ba2:	61b8      	str	r0, [r7, #24]
        break;
 8003ba4:	e008      	b.n	8003bb8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003baa:	61bb      	str	r3, [r7, #24]
        break;
 8003bac:	e004      	b.n	8003bb8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bb6:	bf00      	nop
    }

    if (pclk != 0U)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d018      	beq.n	8003bf0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	085a      	lsrs	r2, r3, #1
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	441a      	add	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b0f      	cmp	r3, #15
 8003bd6:	d909      	bls.n	8003bec <UART_SetConfig+0x388>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bde:	d205      	bcs.n	8003bec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	e001      	b.n	8003bf0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bfc:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	007a1200 	.word	0x007a1200

08003c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d0a:	d10a      	bne.n	8003d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b098      	sub	sp, #96	@ 0x60
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d60:	f7fc febc 	bl	8000adc <HAL_GetTick>
 8003d64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d12e      	bne.n	8003dd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f88c 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d021      	beq.n	8003dd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003da2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003db2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003db4:	e841 2300 	strex	r3, r2, [r1]
 8003db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1e6      	bne.n	8003d8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e062      	b.n	8003e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d149      	bne.n	8003e74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de8:	2200      	movs	r2, #0
 8003dea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f856 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d03c      	beq.n	8003e74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	623b      	str	r3, [r7, #32]
   return(result);
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e6      	bne.n	8003dfa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3308      	adds	r3, #8
 8003e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e4c:	61fa      	str	r2, [r7, #28]
 8003e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	69b9      	ldr	r1, [r7, #24]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	617b      	str	r3, [r7, #20]
   return(result);
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2220      	movs	r2, #32
 8003e64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e011      	b.n	8003e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3758      	adds	r7, #88	@ 0x58
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb0:	e04f      	b.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eb8:	d04b      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fc fe0f 	bl	8000adc <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e04e      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d037      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b80      	cmp	r3, #128	@ 0x80
 8003ee6:	d034      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d031      	beq.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d110      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2208      	movs	r2, #8
 8003f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f838 	bl	8003f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e029      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2c:	d111      	bne.n	8003f52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f81e 	bl	8003f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e00f      	b.n	8003f72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d0a0      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b095      	sub	sp, #84	@ 0x54
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e6      	bne.n	8003f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3308      	adds	r3, #8
 8003fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d118      	bne.n	8004022 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 0310 	bic.w	r3, r3, #16
 8004004:	647b      	str	r3, [r7, #68]	@ 0x44
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	613b      	str	r3, [r7, #16]
   return(result);
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e6      	bne.n	8003ff0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004036:	bf00      	nop
 8004038:	3754      	adds	r7, #84	@ 0x54
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800404a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800404e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	b29b      	uxth	r3, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	4013      	ands	r3, r2
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <memset>:
 80040b4:	4402      	add	r2, r0
 80040b6:	4603      	mov	r3, r0
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d100      	bne.n	80040be <memset+0xa>
 80040bc:	4770      	bx	lr
 80040be:	f803 1b01 	strb.w	r1, [r3], #1
 80040c2:	e7f9      	b.n	80040b8 <memset+0x4>

080040c4 <__libc_init_array>:
 80040c4:	b570      	push	{r4, r5, r6, lr}
 80040c6:	4d0d      	ldr	r5, [pc, #52]	@ (80040fc <__libc_init_array+0x38>)
 80040c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004100 <__libc_init_array+0x3c>)
 80040ca:	1b64      	subs	r4, r4, r5
 80040cc:	10a4      	asrs	r4, r4, #2
 80040ce:	2600      	movs	r6, #0
 80040d0:	42a6      	cmp	r6, r4
 80040d2:	d109      	bne.n	80040e8 <__libc_init_array+0x24>
 80040d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004104 <__libc_init_array+0x40>)
 80040d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004108 <__libc_init_array+0x44>)
 80040d8:	f000 f818 	bl	800410c <_init>
 80040dc:	1b64      	subs	r4, r4, r5
 80040de:	10a4      	asrs	r4, r4, #2
 80040e0:	2600      	movs	r6, #0
 80040e2:	42a6      	cmp	r6, r4
 80040e4:	d105      	bne.n	80040f2 <__libc_init_array+0x2e>
 80040e6:	bd70      	pop	{r4, r5, r6, pc}
 80040e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ec:	4798      	blx	r3
 80040ee:	3601      	adds	r6, #1
 80040f0:	e7ee      	b.n	80040d0 <__libc_init_array+0xc>
 80040f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f6:	4798      	blx	r3
 80040f8:	3601      	adds	r6, #1
 80040fa:	e7f2      	b.n	80040e2 <__libc_init_array+0x1e>
 80040fc:	0800415c 	.word	0x0800415c
 8004100:	0800415c 	.word	0x0800415c
 8004104:	0800415c 	.word	0x0800415c
 8004108:	08004160 	.word	0x08004160

0800410c <_init>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	bf00      	nop
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr

08004118 <_fini>:
 8004118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411a:	bf00      	nop
 800411c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411e:	bc08      	pop	{r3}
 8004120:	469e      	mov	lr, r3
 8004122:	4770      	bx	lr
